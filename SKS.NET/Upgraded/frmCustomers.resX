<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</resheader>
  <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ToolTip1.Location" type="System.Drawing.Point, System.Drawing">
    <value>1153, 17</value>
  </data>
  <data name="txtField.Location" type="System.Drawing.Point, System.Drawing">
    <value>1241, 17</value>
  </data>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAM
        EAAAAk1TRnQBSQFMAgEBBQEAAQoBAAEEAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABMAMAAQEBAAEYBgABJP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AB4AJP8C9AH1ATQBOgFHATQBOgFH
        AYMBhwGNkAAh/wHyAvMBNAE6AkcBVAF8ATkBeQHPAUcBgAGtkAAe/wL0AfUBNAE6AkcBVAF8ATkBeQHP
        AVcBtAHqAXsBlwGqkAAb/wHzAvQBNAE6AkcBVAF8ATkBeQHPAVcBtAHqAXsBlwGqA/+QABv/ATQBOgJH
        AVQBfAE5AXkBzwFXAbQB6gF7AZcBqgb/kAAG/wHZAdABygGtAZgBjQGeAYUBeAGYAX8BcQGaAYIBdAGn
        AZIBhwE0AToCRwFUAXwBOQF5Ac8BVwG0AeoBewGXAaoJ/5AAA/8BygG8AbMBqQGRAYIBuAGiAYgB5AHR
        AaIB9gHmAa4B0gG9AZkBpwGPAXkBkgF4AWoBZQF3AZoBVwG0AeoBewGXAaoM/5AAAd0B1QHPAbEBmwGM
        AekB1QGnAf8B8gG0Af8B6wGxAf8B7QHBAf8B9wHWAf8B/QHXAcwBsgKRAXkBbQF7AZcBqg//kAABwAGu
        AaEB0AG9AaAB/wHwAbgB/wHmAbMB/wHkAbQB/wHdAakB/wHiAa8B/wHyAdQB/wH9AdcBrAGRAXoBmAGF
        AX4P/5AAAcABrAGcAe8B3wGzAf8B8QHEAf8B8QHPAf8B9gHTAf8B8gHIAf8B4wGvAf8B4AGtAf8B9gHT
        AdkBxAGbAZgBfwFzD/+QAAHEAbEBogH+AfEBugH/AfkB3AH/AfoB6AH/AfoB5QH/AfgB2wH/AfIByAH/
        Ad0BqQH/AewBuwH1AeQBrQGWAXwBbg//kAABzAG8AasB9AHqAc0B/wH7AewB/wH9AfgB/wH9AfYB/wH6
        AeYB/wH2AdMB/wHlAbIB/wHqAa4B3wHMAZ4BmwGCAXQP/5AAAdMBwwG1AeEB1AHBAf8B/gHzAf8B/QH1
        Af8B/QH1Af8B+gHqAf8B8gHRAf8B5QGxAf8B8QGzAbQBmwGDAaoBlAGJD/+QAAHkAdoB0gHXAcgBtwH1
        AfAB2wH/AfoB3gH/AfkB3wH/AfgB2gH/AfEBywH/AfABuAHmAdQBpQGiAYoBewHZAc8Byg//kAAD/gHb
        Ac8BwwHSAcMBswHlAdYBuwHzAegBxAH9AfMBzAHsAd8BugHIAbYBmgGqAZMBgwHFAbYBrhL/kAAD/wH+
        Av0B4gHYAdABzgG9Aa4BwwGyAaIBuwGmAZcBtwGhAZIBuQGmAZgB2gHRAcoV/5AAMP8DHAOTA+i3/wPB
        AxwCVgFVAZYBlAGTAecC5iT/Ae8BzgHPAcMBZAFlAaoBVQFWAaQBUgFTAZ8BTwFQAZoCTQGUAkoBjwJH
        AYkCRAGDAkEBeAE7ATwBeAE7ATwBcgI5AW4BNgE3Qv8BMAFcATcBKQFSATEBJwFPAS8BJgFNAS4BNAFa
        ATsV/wOkAecB3QHYAUABPAE6AS8BLAEqAWYBbAFuAe8B8gHzA/4b/wHPAWsBbAHzAY4BjwHmAYABgQGq
        AUQBJAFHATIBIQHDAbQBqwHGAbsBswHKAcEBvAHOAcgBxAFWAU0BSAGeAT4BMwGcAT0BNgGYATkBMQFy
        AjkG/wHRAdcB/wF4AYwB/wHFAc4B/wHzAfUB/wL+EP8B+wH8Af8B9gH3Gf8BMAFhATgBMgGaAU8BLAGW
        AUkBJQGSAUQBNwFeAT4V/wHbAdkB1wGZAZYBkgHnAd0B2AFoAaEBtAElAVQBZQE5ATwBQAHsAfEB8xv/
        AdEBbwFwAf8BmQGaAewBhgGHAeYBgAGBAXEBWwFLAUcBPAE0AY0BeAFoAe0B4AHYAfEB5wHgAY8BfwFz
        AaMBQQE1AaIBQgE8AZwBPQE1AXgBOwE8A/8B+QH6Af8BgwGWAf8BDAEoAeEBMAFGAdsB3AHhAf8C/Q3/
        AfwB/QH/AWoBfgH2Ac4B1QH/Av0W/wE3AWsCPwGiAVkBOAGdAVQBMQGaAU4BOgFnAUIY/wG8AbMBrQGD
        AbcBwwGgAeAB8AFcAcAB2wEuAWEBcwE9AUMBSAHiAeUB5xj/AdQBdQF2Af8BnwGgAfUBkAGRAewBhgGH
        AXEBWwFLAwABRwE8ATQB6QHZAc4B7AHdAdQBhQF0AWcBrgFLAUMBqgFJAUQBowFCATwBfQI+Bv8BuQHE
        Af8BFgE3AfYBCQEiAdEBVwFoAeEB9QH2Cv8C/QH/Ad4B4gH/AQ8BJQHCAcsB0QH2Av0W/wE5AXMBQQFN
        AasBZgFFAaYBXwE9AaEBWAE9AW0BRRj/AdoB5wHrAWcBpwG2AbIB8gH9AYcB2QHsAVwBwAHbAS0BWgFp
        AVEBVQFZAdYB3gHhFf8B1wF7AXwB/wGpAaoB+wGfAaAB9QGTAZQBcQFbAUsBcQFbAUsBcQFbAUsBcQFb
        AUsBdgFiAVIBfQFqAVsBugFWAVQBsgFPAUwBqgFJAUQBgwJBBv8B+AH5Af8BYwF6Af8BIQFCAf8BFgEs
        AdABrwG2Ae4G/wH4AfkB/wHyAfQB/wEuAUcB5wFOAWAB4QHiAeQB9gH3AfgK/wFQAY4BVwFpAZ0BbwFo
        AZsBbgFrAZsBcAE/AXwBRgFbAbQBcQFTAa8BagFLAaoBZAE1AWsBPQE0AWgBPAEzAWcBOwEyAWQBOQEw
        AWABOA//AdoB5wHrAWcBpwG2AbIB8gH9AYcB2QHsAVwBwAHbASoBVAFjAVwBawFxAd8B5QHnEv8B2wGD
        AYQB/wGzAbQB/wGtAa4B/AGjAaQB9AGOAY8B7AGGAYcB5gGAAYEB3wF5AXoB1wFxAXIB0QFrAWwBwQFd
        AVwBugFWAVQBsgFQAUwBiQJECf8B6QHsAf8BQgFeAf8BIAFBAfQBLQFDAdsBwAHFAe4B9QH2Af8B9QH2
        Af8BcwGHAf8BDQElAdEBzQHSAfYP/wFRAZ8BWAGFAc8BlAF/AcoBjwF3AcYBiQFwAcEBgwFpAb0BfQFh
        AbgBdgFZAbMBcAFRAa4BagFJAakBYwFCAaUBXAE7AZ8BVgE4AXABQBL/AdEB3wHkAWcBpwG2AbIB8gH9
        AYcB2QHsAVwBwAHbASgBTgFaASsBPgFHAeEB5wHpD/8B3wGKAYsB/wG7AbwB/wG2AbcByQFjAWABxAFe
        AVYBvgFYAUsBuAFSAT8BswFNATQBrQFHASgBpwFBARwBoQE7AREBwQFdAVwBugFWAVQBjwJHCf8C/QH/
        AeIB5gH/ATkBVgH/ARsBPQH/AU0BYwHuAc8B1gH/AVYBbwH/AQ4BLAHpAZ0BrAH/Av4N/wH8AvsBVQGo
        AV0BjwHVAZwBigHRAZgBhAHNAZMBfQHKAY4BdgHGAYgBbgHAAYIBZwG7AXwBXwG3AXUBWAGyAW4BUAGt
        AWcBSAGoAWEBPgF6AUYV/wHWAeIB5wFnAacBtgGyAfIB/QGHAdkB7AFcAcAB2wEqAVEBXwElATcBPwHg
        AegB6wH9Av4J/wHiAZEBkgH/Ab0BvgHMAWYBZwb/AfsB+AL2Ae4B6gHwAeUB3gHqAdsB0gHlAdEBxgHh
        AcoBvQGhATsBEQHCAV0BXAGUAkoP/wHhAeYB/wE8AVkB/wETATYB/wEQATEB9gEOATEB8wE0AVIT/wH7
        AfoB+QFaAbABYQGXAdoBowGTAdgBoAGOAdQBnAGIAdABlwGDAcwBkgF7AckBjAF1AcQBhwFtAcABgQFl
        AbsBegFeAbYBcwFWAbEBbQFDAYUBShj/AdkB5AHpAWcBpwG2AbIB8gH9AYcB2QHsAVwBwAHbAS0BWgFp
        ASIBMwE7AeYB7AHvAf0C/gb/AeUBlwGYAf8BvQG+AdMBbQFuCf8B+wH4AvYB7gHqAfAB5QHeAeoB2wHS
        AeUB0QHGAacBQQEcAcwCZwGaAk0S/wHEAcwB/wE4AVYB/gEtAU0B/gExAU8B/wHuAfET/wH7AfoB+QFZ
        AasBYAFYAaoBXgFWAacBXQFVAaYBXQFXAaoBXgGNAdMBmwGHAc8BlwGBAcwBkQFPAZsBVwFtAacBcwFt
        AaQBcwFLAY4BUwFIAYoBTxv/AdkB5AHpAWcBpwG2AbEB8gH9AYcB2gHsAVwBwAHbATABZAF0ASEBMgE6
        AeoC7wb/AekBngGfAf8BvQG+AdwBdgF3DP8B+wH4AvYB7gHqAfAB5QHeAeoB2wHSAa0BRwEoAdcBcQFy
        AZ8BTwFQDP8C/gH/AdkB3wH/AT8BWwH/AUYBYgH+ATIBUAH+ATgBVQH+AV0BdQH/AfcB+Bz/Af0B/AH7
        AVcBqwFeAZUB2QGiAZEB1gGeAYwB0gGaAVEBngFYAf0C/Cf/AdYB4gHnAWcBpwG2AbIB8gH9AYcB2QHs
        AVwBwAHbAS8BYgFyAjUBkAHVAdcB5gP/Ae0BpgGnAf8BvQG+AeYBgAGBD/8B+wH4AvYB7gHqAfAB5QHe
        AbMBTQE0Ad8BeQF6AaQBUgFTCf8B+QH6Af8BlwGmAf8BKAFJAf4BNAFTAf4BZQF8Af8B1AHbAf8BdgGL
        Af8BOwFZAf4BdgGLAf8B8QHzGf8B/QH8AfsBWgGuAWIBmQHbAaUBmQHaAaQBlAHYAaIBVAGkAVsB/QL8
        Kv8B1AHgAeUBZwGnAbYBsgHzAf0BuQG7AbYBfQKGAU8BUgGiAjUBkAP/AfABrAGtAf8BvQG+Ae8BiQGK
        Ev8B+wH4AvYB7gHqAbgBUgE/AWcCMwGqAVUBVgP/AegB6wH/AcsB0wH/AVYBbwH/ATQBUwH+ATsBWQH+
        AVoBcwH/AfUB9gT/AfcB+AH/AWUBewH+ATcBVgH+AX4BkQH/AfQB9Rn/AV0BtQFkAZkB2wGlAZkB2wGl
        AZkB2wGlAWkBtQFwAf8C/i3/AdMB4QHmAWcBpwG2AbUBqwGhAXcBlAHtAWsBgwHWAUABQwGZA/8B8wGy
        AbMB/wG9Ab4B+AGSAZMV/wH7AfgB9gG+AVgBSwGwAVgBWQGwAVgBWQP/AaQBsQH/AVYBbwH/AUYBYgH+
        AUgBZAH+AY4BngH/AfwB/Qr/AfgB+QH/AcIBywH/AUUBYQH+AW4Bgxn/AV0BsgFjAWIBvwFpAWIBvwFp
        AWEBvgFoAWoBtgFxM/8B0AHZAeUBXQFpAbYBlQGuAfgBdAGRAegBSQFQAaED/wH1AbYBtwH1AbYBtwHz
        AbIBswHxAa0BrgHuAacBqAHqAaEBogHnAZoBmwHkAZMBlAHgAY4BjwHdAYcBiAHaAYABgQHWAXoBewHT
        AXQBdQHRAW8BcAP/AZ8BrQH/AUsBZgH+AUYBYQH+AbQBvwH/AfwB/RD/AfsB/AH/Ad8B5AH/AZkBqF7/
        AccBzgHoAVIBXAGkAVMBXQGlAekB7AH1MP8B0gHZAf8BUAFqAf8BwgHLAf8C/SX/AUIBTQE+BwABPgMA
        ASgDAAFAAwABMAMAAQEBAAEBBQABgAEBFgAD//8AggAL
</value>
  </data>
</root>