<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UpgradeHelpers.VB6.DB</name>
    </assembly>
    <members>
        <member name="T:UpgradeHelpers.VB6.DB.AdoFactoryManager">
            <summary>
            This class provides a set of methods and internal classes to read the provider information from the xml configuration file.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoFactoryManager.InitializeFactorySection">
            <summary>
            Gets the factory section instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoFactoryManager.GetFactory">
            <summary>
            Gets the default factory.
            </summary>
            <returns>The default DBProviderFactory specified on the xml configuration file.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoFactoryManager.GetFactory(System.String)">
            <summary>
            Gets the factory according to the factory name.
            </summary>
            <param name="factoryName">Name of the desire factory.</param>
            <returns>Returns the DBProviderFactory that represents the parameter factoryName.</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.AdoFactoryManager.LastFactoryNotFound">
            <summary>
            Just to avoid several repeated error messages
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoFactoryManager.GetFactoryDbType(System.String)">
            <summary>
            Gets the factory database type according to the factory name.
            </summary>
            <param name="factoryName">Name of the desire factory.</param>
            <returns>Returns the DatabaseType that represents the parameter factoryName.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoFactoryManager.FactorySection">
            <summary>
            Gets the factory section instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoFactoryManager.InDesignMode">
            <summary>
            Gets the design mode flag.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.AdoFactoriesConfigurationSection">
            <summary>
            Class to handle the custom configuration section.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.AdoFactoriesConfigurationSection.SECTION_NAME">
            <summary>
            Name of the section.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoFactoriesConfigurationSection.GetFactoryType(System.String)">
            <summary>
            Gets the factory type according to the parameter.
            </summary>
            <param name="factoryName">Name of the desire factory.</param>
            <returns>The name of the factory type.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoFactoriesConfigurationSection.Factories">
            <summary>
            Gets and sets the factories collection.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.FactoryConfigurationElement">
            <summary>
            Represents the configuration file factory element.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.#ctor">
            <summary>
            Creates a new element instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.#ctor(System.String)">
            <summary>
            Creates a new element instance.
            </summary>
            <param name="factoryName">The factory name which represents this element.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.#ctor(System.String,System.String,UpgradeHelpers.VB6.DB.DatabaseType,System.Boolean)">
            <summary>
            Creates a new element instance.
            </summary>
            <param name="factoryName">The factory name which represents this element.</param>
            <param name="factoryType">The name of the factory type.</param>
            <param name="isDefault">Marks if the factory is the default.</param>
            <param name="databasetype">The database type.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.Name">
            <summary>
            Gets and sets the factory name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.FactoryType">
            <summary>
            Gets and sets the factory type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.DatabaseType">
            <summary>
            Gets and sets the database type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElement.IsDefault">
            <summary>
            Gets and sets the default flag.
            </summary>        
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection">
            <summary>
            The collection of factory elements.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new element.
            </summary>
            <param name="elementName">The name of the new element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>The new element.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the element in the collection.
            </summary>
            <param name="element">The element to get the key from.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.DefaultFactoryType">
            <summary>
            Gets the default factory type.
            </summary>
            <returns>The type name of the element.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.FactoryDbType(System.String)">
            <summary>
            Gets the factory dbtype according to the parameter.
            </summary>
            <param name="factoryname">The factory name to get the information from.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.Add(UpgradeHelpers.VB6.DB.FactoryConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="factory">The factory to be added.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.Item(System.String)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="name">The element key.</param>
            <returns>The element corresponding to the key.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FactoryConfigurationElementsCollection.Item(System.Int32)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="index">The index key.</param>
            <returns>The element corresponding to the index.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.ADOConnectionSettingsHelper">
            <summary>
            Static clss to handle Ado connection properties not present on the native .Net connection class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADOConnectionSettingsHelper.GetConnectionProvider(System.Data.Common.DbConnection)">
            <summary>
            Gets the provider information stored on the connection string
            </summary>
            <param name="connection">The connection object to get the connection string from</param>
            <returns>An string providing the provider information</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADOConnectionSettingsHelper.GetCursorLocation(System.Data.Common.DbConnection)">
            <summary>
            Gets the cursor location assigned to an specific connection
            </summary>
            <param name="connection">The connection to get the inforrmation from</param>
            <returns>The cursor location asigned to the connection</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADOConnectionSettingsHelper.SetCursorLocation(System.Data.Common.DbConnection,UpgradeHelpers.VB6.DB.ADO.CursorLocationEnum)">
            <summary>
            Sets the cursor location to an specific connection
            </summary>
            <param name="connection">The connection to assign the inforrmation from</param>
            <param name="location">The cursor location to be assingned</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper">
            <summary>
            This class implements the MSADODC functionality.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper">
            <summary>
            Base class for the supported ADO Data Controls, internal purposes.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1">
            <summary>
            Base class for the supported Data Controls.
            </summary>
            <typeparam name="T">The type of the specific recordset helper to be handled by the control.</typeparam>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            Raises the validating event.
            </summary>
            <param name="Action">The action that raises the event.</param>
            <param name="Save">Determines if needs to save.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.OnInitialization">
            <summary>
            OnIntialization state
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.#ctor">
            <summary>
            Creates a new DataControlHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new DataControlHelper.
            </summary>
            <param name="container">The container to add the new instance.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.InitRecordset">
            <summary>
            Inits the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.DeInitRecordset">
            <summary>
            De inits the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.UpdateConnectionInfo">
            <summary>
            Try to update the information to connect to the database.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RefreshResultSet">
            <summary>
            It will try to recreate the resultset based on the values of the properties.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.BindingContext_onCurrentChanged(System.Object,System.EventArgs)">
            <summary>
            This method is called each time you change the currency of the BindingSource object
            BindingSource is like a list and the Currency is like the index to the current record inside
            that list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.BindingContext_onListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Refresh">
            <summary>
            Refreshes the control's underlying data.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.EndInit">
            <summary>
            Ends the initialization process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.BeginInit">
            <summary>
            Begins the initialization process.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.b_last">
            <summary>
            b_last Button to move last record
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.b_next">
            <summary>
            b_next Button to move next record
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.b_prev">
            <summary>
            b_prev Button to move previous record
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.b_first">
            <summary>
            b_first Button to move first record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.UpdateBindingSource">
            <summary>
            Gets the DataControlHelper's initialized BindingSource when in Design Mode.  Otherwise,
            returns the BindingSource without initializing it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
            <summary>
            Invokes underlying BindingSource's ApplySort method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="sorts"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RemoveFilter">
            <summary>
            Calls underlying BindingSource's RemoveFilter method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Calls underlying BindingSource's RemoveFilter method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.AddNew">
            <summary>
            Calls underlying BindingSource's AddNew method if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Calls underlying BindingSource's ApplySort method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Calls underlying BindingSource's Find method if the source is 
            connected to a DataSource, returns -1 otherwise.
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Calls underlying BindingSource's RemoveIndex method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RemoveSort">
            <summary>
            Calls underlying BindingSource's RemoveSort method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Add(System.Object)">
            <summary>
            Calls underlying BindingSource's Add method if the source is 
            connected to a DataSource, returns -1 otherwise.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Clear">
            <summary>
            Calls underlying BindingSource's Add method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Contains(System.Object)">
            <summary>
            Calls underlying BindingSource's Contains method if the source is 
            connected to a DataSource, returns false otherwise.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IndexOf(System.Object)">
            <summary>
            Calls underlying BindingSource's IndexOf method if the source is 
            connected to a DataSource, returns -1 otherwise.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Insert(System.Int32,System.Object)">
            <summary>
            Calls underlying BindingSource's Insert method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Remove(System.Object)">
            <summary>
            Calls underlying BindingSource's Remove method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RemoveAt(System.Int32)">
            <summary>
            Calls underlying BindingSource's RemoveAt method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Calls underlying BindingSource's CopyTo method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.GetEnumerator">
            <summary>
            Calls underlying BindingSource's GetEnumerator method if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Calls underlying BindingSource's GetItemProperties method if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Calls underlying BindingSource's GetListName method if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.GetRelatedCurrencyManager(System.String)">
            <summary>
            Calls underlying BindingSource's GetRelatedCurrencyManager method if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
            <param name="dataMember"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.CancelNew(System.Int32)">
            <summary>
            Calls underlying BindingSource's CancelNew method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="itemIndex"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.EndNew(System.Int32)">
            <summary>
            Calls underlying BindingSource's EndNew method if the source is 
            connected to a DataSource, does nothing otherwise.
            </summary>
            <param name="itemIndex"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsConnectionAvailable">
            <summary>
            Checks whether the properties required to establish a connection properly
            have already been set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.InDesignMode">
            <summary>
            Gets the design mode flag.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Validating">
            <summary>
            Public ValidatingEvent.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Text">
            <summary>
            Gets and sets the Text property.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RecordSource">
            <summary>
            Returns/sets the underlying table name, SQL Statement or stored procedure name object used to populate the data control
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.FactoryName">
            <summary>
            Returns/sets the factory name used to create the ADO machinery objects
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.BackColor">
            <summary>
            Gets and sets the control's back color.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Font">
            <summary>
            Gets and sets the control's font.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ForeColor">
            <summary>
            Gets and sets the control's fore color.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.BOFAction">
            <summary>
            Get/Set BOF action value.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.EOFAction">
            <summary>
            Gets and sets the EOF action.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.QueryType">
            <summary>
            Gets/Sets the recordset's command type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.QueryTimeout">
            <summary>
            Gets/sets the underlying command's timeout.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Enabled">
            <summary>
            Indicates whether the control is enabled.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Recordset">
            <summary>
            Gets/Sets the control's underlying recordset.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ConnectionString">
            <summary>
            Properties to change the way the recorset is connected to a datasource.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.UserName">
            <summary>
            Specifies user ID.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Password">
            <summary>
            Password used during creation of the connection.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Connect">
            <summary>
            Connect
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.DatabaseName">
            <summary>
            DatabaseName
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.DefaultType">
            <summary>
            DefaultType
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Exclusive">
            <summary>
            Exclusive
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ReadOnly">
            <summary>
            ReadOnly
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.RecordsetType">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Source">
            <summary>
            Gets the DataControlHelper's BindingSource.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.InitializedSource">
            <summary>
            Gets the DataControlHelper's initialized BindingSource when in Design Mode.  Otherwise,
            returns the BindingSource without initializing it.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Filter">
            <summary>
            Returns underlying BindingSource's Filter value if the source is 
            connected to a DataSource, returns empty string "" otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SortDescriptions">
            <summary>
            Returns underlying BindingSource's SortDescriptions value if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SupportsAdvancedSorting">
            <summary>
            Returns underlying BindingSource's SupportsAdvancedSorting value if the source is 
            connected to a DataSource, returns false by default.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SupportsFiltering">
            <summary>
            Returns underlying BindingSource's SupportsFiltering value if the source is 
            connected to a DataSource, returns true by default.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.AllowEdit">
            <summary>
            Returns underlying BindingSource's AllowEdit value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.AllowNew">
            <summary>
            Returns underlying BindingSource's AllowNew value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.AllowRemove">
            <summary>
            Returns underlying BindingSource's AllowRemove value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsSorted">
            <summary>
            Returns underlying BindingSource's IsSorted value if the source is 
            connected to a DataSource, returns false otherwise.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ListChanged">
            <summary>
            ListChanged EventHandler is not supported for this component
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SortDirection">
            <summary>
            Returns underlying BindingSource's SortDirection value if the source is 
            connected to a DataSource, returns ListSortDirection.Ascending otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SortProperty">
            <summary>
            Returns underlying BindingSource's SortProperty value if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SupportsChangeNotification">
            <summary>
            Returns underlying BindingSource's SupportsChangeNotification value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SupportsSearching">
            <summary>
            Returns underlying BindingSource's SupportsSearching value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SupportsSorting">
            <summary>
            Returns underlying BindingSource's SupportsSorting value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsFixedSize">
            <summary>
            Returns underlying BindingSource's IsFixedSize value if the source is 
            connected to a DataSource, returns true otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsReadOnly">
            <summary>
            Returns underlying BindingSource's IsReadOnly value if the source is 
            connected to a DataSource, returns false otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Item(System.Int32)">
            <summary>
            Gets and sets underlying BindingSource's this[] property if the source is 
            connected to a DataSource.  Returns null otherwise.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Count">
            <summary>
            Returns underlying BindingSource's Count value if the source is 
            connected to a DataSource, returns 0 otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsSynchronized">
            <summary>
            Returns underlying BindingSource's IsSynchronized value if the source is 
            connected to a DataSource, returns false otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.SyncRoot">
            <summary>
            Returns underlying BindingSource's SyncRoot value if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Initialized">
            <summary>
            Initialized EventHandler is not supported for this component
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.IsInitialized">
            <summary>
            Returns underlying BindingSource's IsInitialized value if the source is 
            connected to a DataSource, returns false otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.CurrencyManager">
            <summary>
            Returns underlying BindingSource's CurrencyManager value if the source is 
            connected to a DataSource, returns null otherwise.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.Sort">
            <summary>
            Gets and sets underlying BindingSource's Sort property if the source is 
            connected to a DataSource.  Returns empty string "" otherwise.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.DataControlHelper`1.ValidatingEventHandler">
            <summary>
            Delegate to wire the ValidatingEvent.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalADODataControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.#ctor">
            <summary>
            Creates a new Data Control instance.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper._cursorLocation">
            <summary>
            Private member cursor location value (CursorLocationEnum) for underlying recordset.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper._LockType">
            <summary>
            Private member cursor lock type value (LockTypeEnum) for underlying recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.DeInitRecordset">
            <summary>
            De initializes the underlying recordset object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.InitRecordset">
            <summary>
            Initializes the underlying recordset object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.EndInit">
            <summary>
            Ends the initialization process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_MoveComplete(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.MoveCompleteEventArgs)">
            <summary>
            Handles the MoveComplete event of the underlying Recordset, triggering the control's  MoveComplete event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_WillMove(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.MoveEventArgs)">
            <summary>
            Handles the WillMove event of the underlying Recordset, triggering the control's  WillMove event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_WillChangeRecordset(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventArgs)">
            <summary>
            Handles the WillChangeRecordset event of the underlying Recordset, triggering the control's  WillChangeRecordset event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_RecordsetChangeComplete(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeCompleteEventArgs)">
            <summary>
            Handles the RecordsetChangeComplete event of the underlying Recordset, triggering the control's RecordsetChangeComplete event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_RecordChangeComplete(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeCompleteEventArgs)">
            <summary>
            Handles the RecordChangeComplete event of the underlying Recordset, triggering the control's RecordChangeComplete event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_FieldChangeComplete(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeCompleteEventArgs)">
            <summary>
            Handles the FieldChangeComplete event of the underlying Recordset, triggering the control's FieldChangeComplete event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_EndOfRecordset(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventArgs)">
            <summary>
            Handles the EndOfRecordset event of the underlying Recordset, triggering the control's EndOfRecordset event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_WillChangeRecord(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs)">
            <summary>
            Handles the WillChangeRecord event of the underlying Recordset, triggering the control's WillChangeRecord event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Recordset_WillChangeField(System.Object,UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs)">
            <summary>
            Handles the WillChangeField event of the underlying Recordset, triggering the control's WillChangeField event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnEndOfRecordset(System.Boolean@,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            The EndOfRecordset event is called when there is an attempt to move to a row past the end of the Recordset.
            </summary>
            <param name="moredata">Bool value that indicates if more data have been added to the ADORecordsetHelper.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnWillChangeField(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.Object[])">
            <summary>
            The WillChangeField event is called before a pending operation changes the value of one or more Field objects in the ADORecordsetHelper.
            </summary>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numfields">Indicates the number of fields objects contained in the “fieldvalues” array.</param>
            <param name="fieldvalues">Array with the new values of the modified fields.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnFieldChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.Object[],System.String[])">
            <summary>
            The FieldChangeComplete event is called after the value of one or more Field objects has changed.
            </summary>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numfields">Indicates the number of fields objects contained in the “fieldvalues” array.</param>
            <param name="fieldvalues">Array with the new values of the modified fields.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnWillChangeRecord(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32)">
            <summary>
            The OnWillChangeRecord event is called before one or more records (rows) in the Recordset change.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numRecords">Value indicating the number of records changed (affected).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnRecordChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.String[])">
            <summary>
            OnRecordChangeComplete event is called after one or more records change.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numRecords">Value indicating the number of records changed (affected).</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnWillChangeRecordset(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@)">
            <summary>
            OnWillChangeRecordset event is called before a pending operation changes the ADORecordsetHelper.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnRecordsetChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.String[])">
            <summary>
            OnRecordsetChangeComplete event is called after the ADORecordsetHelper has changed.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnWillMove(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@)">
            <summary>
            OnWillMove event is called before a pending operation changes the current position in the ADORecordsetHelper.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.OnMoveComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.String[])">
            <summary>
            OnMoveComplete event is called after the current position in the ADORecordsetHelper changes.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">A EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.EndOfRecordset">
            <summary>
            Exposes the EndOfRecordsetEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.WillChangeField">
            <summary>
            Exposes the FieldChangeEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.FieldChangeComplete">
            <summary>
            Exposes the FieldChangeCompleteEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.WillChangeRecord">
            <summary>
            Exposes the RecordChangeEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.RecordChangeComplete">
            <summary>
            Exposes the RecordChangeCompleteEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.WillChangeRecordset">
            <summary>
            Exposes the RecordSetChangeCompleteEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.RecordsetChangeComplete">
            <summary>
            Exposes the RecordSetChangeCompleteEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.WillMove">
            <summary>
            Exposes the MoveEvent.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.MoveComplete">
            <summary>
            Exposes the MoveCompleteEvent.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.CursorLocation">
            <summary>
            Gets/sets the cursor location used by the underlying recordset.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADODataControlHelper.LockType">
            <summary>
            Gets and sets the lock type.
            </summary>
        </member>
        <member name="T:DBTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:DBTrace.OpenWithTrace(System.Data.Common.DbConnection)">
            <summary>
            
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:DBTrace.CreateConnectionWithTrace(System.Data.Common.DbProviderFactory)">
            <summary>
            CreateConnectionWithTrace
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:DBTrace.NewConnectionstring(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.AffectEnum">
            <summary>
            Determines which records will be affected by the operation.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.AffectEnum.adAffectCurrent">
            <summary>
            Affect Current
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.AffectEnum.adAffectGroup">
            <summary>
            Affect Group
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.AffectEnum.adAffectAll">
            <summary>
            Affect All
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.AffectEnum.adAffectAllChapters">
            <summary>
            Affect All Chapters
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.CursorLocationEnum">
            <summary>
            Determines if server-side or client-side cursors are used (which cursor engine used).
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.CursorLocationEnum.adUseNone">
            <summary>
            Use None
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.CursorLocationEnum.adUseServer">
            <summary>
            Use Server
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.CursorLocationEnum.adUseClient">
            <summary>
            Use Client
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum">
            <summary>Sets or returns the type of locking (concurrency) to use.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum.adLockUnspecified">
            <summary>
            Lock not specified, value -1
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum.adLockReadOnly">
            <summary>
            Read Only Lock, value 1
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum.adLockPessimistic">
            <summary>
            Pessimistic Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum.adLockOptimistic">
            <summary>
            Optimistic Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.LockTypeEnum.adLockBatchOptimistic">
            <summary>
            Batch Optimistic Lock
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.PositionEnum">
            <summary>Determines if the operation will affect the records in a specific position.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.PositionEnum.adPosBOF">
            <summary>
            Begin of File Position
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.PositionEnum.adPosEOF">
            <summary>
            End Of File Position
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.PositionEnum.adPosUnknown">
            <summary>
            Postion unknown
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.EditModeEnum">
            <summary>
            Enum to describe the different edition modes for the Recordset
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.EditModeEnum.adEditNone">
            <summary>
            No edition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.EditModeEnum.adEditInProgress">
            <summary>
            Edition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.EditModeEnum.adEditAdd">
            <summary>
            Addition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.EditModeEnum.adEditDelete">
            <summary>
            Delete is in progress
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.BookmarkEnum">
            <summary>
            Enum to describe the bookmark prosition to be used by the GetRows method
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.BookmarkEnum.adBookmarkCurrent">
            <summary>
            Uses the current position 
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.BookmarkEnum.adBookmarkFirst">
            <summary>
            Starts at the first record
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.BookmarkEnum.adBookmarkLast">
            <summary>
            Starts at the last record
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper">
            <summary>
            Support class for the ADO.Recorset the object that represents the records in a base table or the records that result from running a query.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RecordSetHelper">
            <summary>
            This is base class for the ADO/RDO/DAORecordsetHelper; 
            it provides common functionality for the database access helpers using ADO.NET.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.disconnected">
            <summary>
            Internal variable added to indicate that the recordset is disconnected
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.activeCommand">
            <summary>
            active command
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.currentView">
            <summary>
            current view
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.dbRow">
            <summary>
            new database row
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.dbvRow">
            <summary>
            New Datarow view when adding to a sorted or filtered collection
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.connectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.index">
            <summary>
            actual index
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.newRow">
            <summary>
            new row state
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.opened">
            <summary>
            open state
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.sqlSelectQuery">
            <summary>
            string for select query
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.sqlUpdateQuery">
            <summary>
            string for update query
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.sqlDeleteQuery">
            <summary>
            string for delete query
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.sqlInsertQuery">
            <summary>
            string for insert query
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.source">
            <summary>
            actual object source
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.operationFinished">
            <summary>
            operation finished state
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.filtered">
            <summary>
            is filtered?
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.firstEOF">
            <summary>
            is first End Of File?
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.firstChange">
            <summary>
            is first change?
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.eof">
            <summary>
            is end of file
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.isDeserialized">
            <summary>
            is deserilized
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.isDefaultSerializationInProgress">
            <summary>
            has auto increment columns
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.hasAutoincrementCols">
            <summary>
            has auto increment columns
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.autoIncrementCol">
            <summary>
            auto increment column name
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.connectionStateAtEntry">
            <summary>
            actual Connection State
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.pagesize">
            <summary>
            page size
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.filter">
            <summary>
            actual filter object
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor">
            <summary>
            Creates a new RecordsetHelper with the default initialization.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new RecordsetHelper using the provided DBProviderFactory.
            </summary>
            <param name="factory">DBProviderFactory instance to be used by internal variable.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor(System.String)">
            <summary>
            Creates a new RecordsetHelper using the provided factory.
            </summary>
            <param name="factoryname">The name for the factory to be used by this ADORecordsetHelper object (the name must exist on the configuration xml file).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor(System.String,System.String)">
            <summary>
            Creates a new RecordsetHelper using the provided parameters.
            </summary>
            <param name="factoryname">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="connString">The connection string to be used by this ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new RecordsetHelper using the provided parameters.
            </summary>
            <param name="factoryname">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="connString">The connection string to be used by this ADORecordsetHelper.</param>
            <param name="sqlSelectString">A string containing the SQL Query to be loaded on the ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Open">
            <summary>
            Opens the connection and initialize the RecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Open(System.Boolean)">
            <summary>
            Opens the RecordsetHelper and requeries according to the value of “requery” parameter.
            </summary>
            <param name="requery">Indicates if a requery most be done.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.OpenRecordset(System.Boolean)">
            <summary>
            Opens the RecordsetHelper and requeries according to the value of “requery” parameter.
            </summary>
            <param name="requery">Indicates if a requery most be done.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Open(System.Xml.XmlDocument)">
            <summary>
            Populates a recordsetHelper with the information defined in a XmlDocument.
            </summary>
            <param name="document">XmlDocument to load into the RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Requery">
            <summary>
            Updates the data in a Recordset object by re-executing the query on which the object is based.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CopySourceCommand">
            <summary>
            Returns a copy of the current ActiveCommand of this RecordsetHelper.
            </summary>
            <returns>A copy of the current ActiveCommand.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.IsNull(System.String)">
            <summary>
            Gets a value that indicates whether the named column contains a null value.
            </summary>
            <param name="columnName">The name of the column.</param>
            <returns>true if the column contains a null value; otherwise, false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetColumnIndexByName(System.String)">
            <summary>
            Looks for a column with the given name and returns the column index
            or -1 if not found
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetField(System.String)">
            <summary>
            Gets or sets the row value at “ColumnName” index.
            </summary>
            <param name="columnName">Name of the column to look for.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetField(System.Int32)">
            <summary>
            Gets or sets the row value at “ColumnIndex” index.
            </summary>
            <param name="columnIndex">index of the column to look for.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Save(System.Xml.XmlDocument)">
            <summary>
            Saves the information on the RecordsetHelper to a XML document.
            </summary>
            <param name="document">The XML document to save the data to.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MoveFirst">
            <summary>
            Moves the current record to the beginning of the RecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MoveLast">
            <summary>
            Moves the current record to the end of the RecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MoveNext">
            <summary>
            Moves the current record forward one position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MovePrevious">
            <summary>
            Moves the current record backwards one position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Move(System.Int32)">
            <summary>
            Moves the position of the currentRecord in a RecordSet
            </summary>
            <param name="records">Amount of records positive or negative to move from the current record.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.getSource">
            <summary>
            Gets Command Source query string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Delete">
            <summary>
            /// Deletes the current record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.StartCachingAdapter">
            <summary>
            Start caching the adapters used for connections. Use carefully because it needs an explicit call to StopCachingAdapter
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.StopCachingAdapter">
            <summary>
            Stop caching the adapters used for connections
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.clearDataAdaptersCached">
            <summary>
            Clear data adapters cached
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateAdapter(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Using connection parameter creates a Database Data Adapter
            </summary>
            <param name="connection">DbConnection parameter</param>
            <param name="updating">if updating creates all internal query strings</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CloneCommand(System.Data.Common.DbCommand)">
            <summary>
            Clone a command
            </summary>
            <param name="dbCommand"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateUpdateCommand(System.Data.Common.DbDataAdapter,System.Data.Common.DbCommandBuilder)">
            <summary>
            Creates the update command for the database update operations of the recordset
            </summary>
            <param name="adapter">The data adapter that will contain the update command</param>
            <param name="cmdBuilder">The command builder to get the update command from.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.AddNew">
            <summary>
            Creates a new record for an updatable Recordset.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RecordSetHelper.disableEventsWhileDeleting">
            <summary>
            This flag is used to stop the propagation of events while performing a delete.
            It was found that deleting a DataRow raised several events on the binding source
            and these events update the current row which must remain the same until the update logic is executed
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Update">
            <summary>
            Saves any changes you make to the current row of a ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CancelUpdate">
            <summary>
            Cancels any changes made to the current or new row of a ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.DoCancelUpdate">
            <summary>
            Cancels any changes made to the current or new row of a ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Cancel">
            <summary>
            Cancels execution of any pending process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CancelBatch">
            <summary>
            Cancels a pending batch update.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.commandParameterBinding(System.Data.Common.DbCommand,System.String)">
            <summary>
            Verifies if a parameter with the provided name exists on the command received, otherwise a new parameter using the specified name.
            </summary>
            <param name="command">The command object to look into.</param>
            <param name="name">The name of the parameter to look for.</param>
            <returns>The parameter named with “name”.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Close">
            <summary>
            Closes an open object and any dependent objects.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Find(System.String)">
            <summary>
            Looks in all records for a field that matches the “criteria”. 
            </summary>
            <param name="criteria">A String used to locate the record. It is like the WHERE clause in an SQL statement, but without the word WHERE.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Find(System.String,System.String)">
            <summary>
            Looks in all records for a field that matches the “criteria”. 
            </summary>
            <param name="rowName">A String used to locate the row from the record.</param>
            <param name="pCriteria">A String used to locate the record. It is like the WHERE clause in an SQL statement, but without the word WHERE.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.RecordSetHelper_RowUpdatedOracle(System.Object,System.Data.OracleClient.OracleRowUpdatedEventArgs)">
            <summary>
            Oracle event for row update
            </summary>
            <param name="sender">object</param>
            <param name="e">OracleRowUpdated event args</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.RecordSetHelper_RowUpdatedOleDb(System.Object,System.Data.OleDb.OleDbRowUpdatedEventArgs)">
            <summary>
            OleDb Row Updated event
            </summary>
            <param name="sender">object</param>
            <param name="e">Row updated event args</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets Object Data
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Validate">
            <summary>
            Verifies if the ADORecordset object have been open.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.getCommandType(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter}@)">
            <summary>
            Infers the command type from an SQL string getting the schema metadata from the database.
            </summary>
            <param name="sqlCommand">The sql string to be analyzed.</param>
            <param name="parameters">List of DbParameters</param>
            <returns>The command type</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.getCommandType(System.String)">
            <summary>
            Infers the command type from an sql string getting the schema metadata from the database.
            </summary>
            <param name="sql">The sql string to be analyzed</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetConnection(System.String)">
            <summary>
            Returns the ActiveConnection object if it has been initialized otherwise creates a new DBConnection object.
            </summary>
            <param name="connectionString">The connection string to be used by the connection.</param>
            <returns>A DBConnection containing with the connection string set. </returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetDBType(System.Type)">
            <summary>
            Converts from System.Type to DbType.
            </summary>
            <param name="type">The System.Type to be converted.</param>
            <returns>The equivalent DBType.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MapToDbType(System.String)">
            <summary>
            Turns the DB type string to corresponding CLR type string.
            </summary>
            <param name="strDBType"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.GetType(System.Data.DbType)">
            <summary>
            Converts from DbType to System.Type.
            </summary>
            <param name="dbType">The DBType to be converted.</param>
            <returns>The equivalent System.Type.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            Creates a DBCommand object using de provided parameters.
            </summary>
            <param name="commandText">A string containing the SQL query.</param>
            <param name="commandType">The desire type for the command.</param>
            <returns>A new DBCommand object containing the SLQ code received has parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateCommand(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Creates a DBCommand object using de provided parameters.
            </summary>
            <param name="commandText">A string containing the SQL query.</param>
            <param name="commandType">The desire type for the command.</param>
            <param name="parameters">A list with the parameters to be included on the DBCommand object.</param>
            <returns>A new DBCommand object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.FixAutoincrementColumns(System.Data.DataTable)">
            <summary>
            Sets the primary key to a DataTable object.
            </summary>
            <param name="dataTable">The DataTable that holds the currently loaded data.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.BasicMove(System.Int32)">
            <summary>
            This is the atomic Move operation it sets the index on the proper position and updates the eof flag.
            </summary>
            <param name="newIndex">The new position for the index</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.doAddNew">
            <summary>
            Executes the atomic addNew Operation creating the new row and setting the newRow flag.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.computeValue(System.String)">
            <summary>
             Send to DB query to compute.
            </summary>
            <param name="expression">The query to compute</param>
            <returns>The value computed</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.AssignDefaultValues(System.Data.DataRow)">
            <summary>
            Sets default values to a fields to avoid insert null in the DB when the field does not accept it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.UpdateWithNoEvents(System.Data.DataRow)">
            <summary>
            Saves any changes made to the DataRow recieved as parameter.
            </summary>
            <param name="theRow">The row to be save on the Database.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.isBatchEnabled">
            <summary>
            Indicates if the ADORecordsetHelper is in batch mode.
            </summary>
            <returns>True if the ADORecordsetHelper is in batch mode, otherwise false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.iterateFields(System.Object[],System.Object[],System.Boolean,System.Boolean)">
            <summary>
            iterate fields, to assign current row the values for each specific fields
            </summary>
            <param name="fields">array of fields</param>
            <param name="values">array of values</param>
            <param name="isString">is string the field items</param>
            <param name="currentValues">has the current values</param>
            <returns>the row with the assigned values on each field</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.HasMultipleTables(System.String)">
            <summary>
            Check if the query has multiple tables
            </summary>
            <param name="sqlQuery">query string</param>
            <returns>boolean</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateDeleteCommandFromMetaData">
            <summary>
            Creates a delete command using the information contained in the RecordsetHelper.    
            </summary>
            <returns>A DBCommand object containing a delete command.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateUpdateCommandFromMetaData">
            <summary>
            Creates an update command using the information contained in the RecordsetHelper.
            </summary>
            <returns>A DBCommand object containing an update command.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateInsertCommandFromMetaData">
            <summary>
            Creates an insert command using the information contained in the RecordsetHelper.
            </summary>
            <returns>A DBCommand object containing an insert command.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CompleteInsertCommand(System.Data.Common.DbDataAdapter)">
            <summary>
            Assigns the InsertCommand to the adaptar parameter
            </summary>
            <param name="adapter">DbDataAdapter</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.MsInsertCommandCompletion(System.Data.Common.DbDataAdapter,System.String,System.String)">
            <summary>
            SqlServer Identity value for last insert execution.
            </summary>
            <param name="adapter">DbDataAdapter to set</param>
            <param name="identityInfo">Name of Identity field</param>
            <param name="extraCommandText">used to set the query to get the identity value</param>
            <returns>returns the entire query in the adapter</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.getTableName(System.String,System.Boolean)">
            <summary>
            Analyzes an SQL Query and obtain the name of the table.
            </summary>
            <param name="sqlSelectQuery">The SQL query containing the name of the table.</param>
            <param name="useParam"> When use the first table name in the query, by default is false.</param>
            <returns>The SQL query containing the name of the table.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.CreateParameterFromColumn(System.String,System.Data.DataColumn)">
            <summary>
            Creates a Dbparameter obtaining the information from a DataColumn object.
            </summary>
            <param name="paramName">The name for the parameter.</param>
            <param name="dColumn">The DataColumn object to extract the information from.</param>
            <returns>A new DBParameter object containing the desired configuration.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.findBookmarkIndex(System.Data.DataRow)">
            <summary>
            Finds the index in the RecordsetHelper for the “value”.
            </summary>
            <param name="value">The DataRow to look for.</param>
            <returns>The index number if is found, otherwise -1.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.SetNewValue(System.Int32,System.Object)">
            <summary>
            Sets a new value for a specific index column.
            </summary>
            <param name="columnIndex">Index of the column to be updated.</param>
            <param name="value">New value for column.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.SetFilter(System.String)">
            <summary>
            Sets the filter for the RecordsetHelper.
            </summary>
            <param name="filter">The filter to apply to this RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.SetFilter(System.Data.DataViewRowState)">
            <summary>
            Sets the filter for the RecordsetHelper.
            </summary>
            <param name="filter">The filter to apply to this RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.SetFilter(System.Data.DataRow[])">
            <summary>
            Sets the filter for the RecordsetHelper.
            </summary>
            <param name="filter">The filter to apply to this RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.OnAfterMove">
            <summary>
            Sets the AfterMove EventHandler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.OnAfterQuery">
            <summary>
            Sets the AfterQuery eventHandler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RecordSetHelper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.MarshalByValueComponent"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. 
                            </param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.LoadSchema">
            <summary>
            This is property is used when the record set uses more than one table,
            uses CommandBuilder, primary keys or, any other metadata information.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.LoadSchemaOnly">
            <summary>
            Used to signal to load only the schema and not fill any data, useful to retrieve meta information
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.PercentPosition">
            <summary>
            Gets and Set the percent of the current position of the total of records retrieved.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Opened">
            <summary>
            Indicates if this RecordsetHelper have been open.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.CurrentPosition">
            <summary>
            Gets or Sets the current Record position inside the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.DatabaseType">
            <summary>
            Gets or sets the DatabaseType being use by this object. 
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.BOF">
            <summary>
            Returns a value that indicates whether the current record position is before the first record in a RecordsetHelper object. Read-only Boolean.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.RecordSource">
            <summary>
            Gets a string with the SQL query being use to obtain the RecordsetHelper data.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.ProviderFactory">
            <summary>
            Gets or sets the DBProviderFactory to be use by this object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.ActiveConnection">
            <summary>
            Gets or sets the ActiveConnection (this connection is the one used in all RecordsetHelper operations).
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.ConnectionString">
            <summary>
            Gets or sets the connection string being use by this RecordsetHelper object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.InDesignMode">
            <summary>
            Gets the design mode flag.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.EOF">
            <summary>
            Gets a bool value indicating if the current record is the last one in the RecordsetHelper object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.FieldsValues">
            <summary>
            Gets a DataRow object containing the field values of the current record.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.FieldsMetadata">
            <summary>
            Gets a DataColumnCollection object that contains the information of all columns on the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.SqlSelectQuery">
            <summary>
            Gets or sets the SQL query used for select operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.SqlUpdateQuery">
            <summary>
            Gets or sets the SQL query used for update operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.SqlDeleteQuery">
            <summary>
            Gets or sets the SQL query used for delete operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.SqlInsertQuery">
            <summary>
            Gets or sets the SQL query used for insert operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Source">
            <summary>
            Sets or sets the source to obtain the necessary queries. Can be DBCommand or String.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.RecordCount">
            <summary>
            Gets the current total number of records on the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.IsLoadingFinished">
            <summary>
            Gets a value indicating if any operation is pending.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.SqlQuery">
            <summary>
            Gets or sets the SQL query used for select operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Item(System.String)">
            <summary>
            Gets or sets the row value at “ColumnName” index.
            </summary>
            <param name="columnName">Name of the column to look for.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Item(System.Int32)">
            <summary>
            Gets or sets the row value at “ColumnIndex” index.
            </summary>
            <param name="columnIndex">index of the column to look for.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Filter">
            <summary>
            Sets the Filter to by applied to the this ADORecordsetHelper. (valid objects are: string, DataViewRowState and DataRow[]).
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.UsingView">
            <summary>
            Property used to determine if the data needs to be get from a dataview or the table directly
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.CurrentRow">
            <summary>
            Gets a DataRow with the information of the current record on the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.Bookmark">
            <summary>
            Sets a bookmark to an specific record inside the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.IsCachingAdapter">
            <summary>
            Return true if the recordsethelper is caching the adapters
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.FactoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.CanMovePrevious">
            <summary>
            Indicates if is possible to move previous one record.
            </summary>     
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.PageSize">
            <summary>
            Gets/Sets the number of rows per page.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RecordSetHelper.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.isClone">
            <summary>
            Flag that indicates if the current recordset is a cloned one
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.ActiveConnection_StateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Event delegate necesary to handle the proper state of the recordset
            </summary>
            <param name="sender">The connection object</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.#ctor">
            <summary>
            Creates a new ADORecordsetHelper instance using the default factory specified on the configuration xml.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.#ctor(System.String)">
            <summary>
            Creates a new ADORecordsetHelper instance using the factory specified on the “factoryName” parameter.
            </summary>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.#ctor(System.String,System.String)">
            <summary>
            Creates a new ADORecordsetHelper instance using provided parameters.
            </summary>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="connString">The connection string to be used by this ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new ADORecordsetHelper instance using provided parameters.
            </summary>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="connString">The connection string to be used by this ADORecordsetHelper.</param>
            <param name="sqlSelectString">A string containing the SQL Query to be loaded on the ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">System.Runtime.Serialization.SerializationInfo, all the data needed to load and store an object.</param>
            <param name="context">System.Runtime.Serialization.StreamingContext, describes the source and destination of 
            a given serialized stream , and provides an additional caller-defined context.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets Object Data
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32,System.Object)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="startfrom">A bookmark representing the row to begin from</param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32,System.Object,System.String)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="startfrom">A bookmark representing the row to begin from</param>
            <param name="fieldname">The field name to be get from the row</param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32,System.Object,System.String[])">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be r    etrieved.</param>
            <param name="startfrom">A bookmark representing the row to begin from</param>
            <param name="fieldnames">An array of field names to be get from the recordset</param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32,System.Object,System.Int32)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="startfrom">A bookmark representing the row to begin from</param>
            <param name="fieldposition">The field index to be get from the recordset </param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.GetRows(System.Int32,System.Object,System.Int32[])">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="startfrom">A bookmark representing the row to begin from</param>
            <param name="fieldpositions">The field indexes to be get from the recordset</param>
            <returns>An array containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Move(System.Int32)">
            <summary>
            Moves the position of the currentRecord in a RecordSet.
            </summary>
            <param name="records">Amount of records positive or negative to move from the current record.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveFirst">
            <summary>
            Moves the current record to the beginning of the ADORecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveLast(System.Int32)">
            <summary>
            Moves the current record to the end of the ADORecordsetHelper.
            </summary>
            <param name="Options"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveLast">
            <summary>
            Moves the current record to the end of the ADORecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveNext">
            <summary>
            Moves the current record forward one position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MovePrevious">
            <summary>
            Moves the current record backwards one position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.AddNew(System.Object[],System.Object[])">
            <summary>
            Creates a new record for an updatable Recordset.
            </summary>
            <param name="rows">Array containing the rows to be added to the ADORecordsetHelper.</param>
            <param name="values">Array containing the values for the rows to be inserted on the ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.AddNew">
            <summary>
            Creates a new record for an updatable Recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Delete(System.Int32)">
            <summary>
            Deletes the current record or a group of records.
            </summary>
            <param name="deleteBehavior">AffectEnum value indicating if the deletion applies to the current group or a group.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Delete">
            <summary>
            Deletes the current record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Edit">
            <summary>
            Not implemented yet.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Update">
            <summary>
            Saves any changes you make to the current row of an ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Update(System.Int32,System.Boolean)">
            <summary>
            Saves the current content of the ADORecordsetHelper to the database.
            </summary>
            <param name="UpdateType">>The UpdateType to be use by this update.</param>
            <param name="Force">A Boolean value indicating whether or not to force the changes into the database.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Update(System.Object[],System.Object[])">
            <summary>
            Updates the provided “Fields” with the “values” received has parameter.
            </summary>
            <param name="fields">Array containing the fields to be updated.</param>
            <param name="values">Array containing the values to be used to update the fields.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Update(System.Object,System.Object)">
            <summary>
            Updates the provided "field" with the "value" recieved has parameter.
            </summary>
            <param name="field">The field to be updated.</param>
            <param name="value">The value to update the field with.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.CancelUpdate">
            <summary>
            Cancels any changes made to the current or new row of a ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.UpdateBatch">
            <summary>
            Writes all pending batch updates to disk.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Cancel">
            <summary>
            Cancels execution of any pending process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.CancelBatch">
            <summary>
            Cancels a pending batch update.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.isBatchEnabled">
            <summary>
            Indicates if the ADORecordsetHelper is in batch mode.
            </summary>
            <returns>True if the ADORecordsetHelper is in batch mode, otherwise false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Validate">
            <summary>
            Verifies if the ADORecordset object have been open.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Close">
            <summary>
            Closes an open object and any dependent objects.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Clone">
            <summary>
            This method clones the recordset instance
            </summary>
            <returns>The cloned recordset</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Clone(UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            This method clones the recordset instance
            </summary>
            <param name="lockType">The lock type to be used by the cloned recorset</param>
            <returns>The cloned recordset</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Boolean)">
            <summary>
            Opens the ADORecordsetHelper and requeries according to the value of “requery” parameter.
            </summary>
            <param name="requery">Indicates if a requery most be done.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbCommand)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="command">A command containing the query to be execute to load the ADORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbConnection)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="connection">Connection object to be use by this ADORecordsetHelper</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,UpgradeHelpers.VB6.DB.StringParameterType)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="str">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="type">StringParameterType of the str.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbCommand,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="command">A command containing the query to be execute to load the ADORecordsetHelper object.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbConnection,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>   
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum,UpgradeHelpers.VB6.DB.StringParameterType)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="str">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>
            <param name="type">StringParameterType of the str.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.String,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connectionString">Strings that contains information about how to connect to the database.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>   
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.String)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connectionString">Strings that contains information about how to connect to the database.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum)">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters. 
            NOTE: It is better to provide the CommandType when executing the command
            If the command type is not given, performance would be affected due to several
            request to the DB schema
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>   
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,UpgradeHelpers.VB6.DB.ADO.LockTypeEnum,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Opens this ADORecordsetHelper using the provided parameters.
            This is the preferred Open method for performance reasons. However this call might required
            some extra parameters like CommandType and ParameterList.
            For most scenerios just provide a null parameter for the parameter list;
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="lockType">The LockTypeEnum of this ADORecordsetHelper object.</param>   
            <param name="commandType">The CommandType of this ADORecordsetHelper object.</param>   
            <param name="parameters">The list of parameters.</param>   
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,System.Int64@,System.String)">
            <summary>
            Creates a new ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="recordsAffected">Out parameter indicating the amount of records affected by the execution of the “SQLstr” query.</param>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new ADORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new ADORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this ADORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this ADORecordsetHelper.</param>
            <param name="factory">The DBProviderFactory to be used on the ADORecordsetHelper.</param>
            <returns>The new ADORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbCommand,System.String)">
            <summary>
            Creates a new ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="command">A command containing the query to be execute to load the ADORecordsetHelper object.</param>
            <param name="factoryName">The name of the factory to by use by this ADORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Open(System.Data.Common.DbCommand,System.Int64@,System.String)">
            <summary>
            Creates a new ADORecordsetHelper using the provided parameters.
            </summary>
            <param name="command"></param>
            <param name="recordsAffected"></param>
            <param name="factoryName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Refresh">
            <summary>
            Updates the data in a Recordset object by re-executing the query on which the object is based.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.SetNewValue(System.Int32,System.Object)">
            <summary>
            Sets the “value” to the column at index “ColumnIndex”.
            </summary>
            <param name="columnIndex">Index of the column to update.</param>
            <param name="value">The new value for the column.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnEndOfRecordset(System.Boolean@,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            The EndOfRecordset event is called when there is an attempt to move to a row past the end of the Recordset.
            </summary>
            <param name="moredata">Bool value that indicates if more data have been added to the ADORecordsetHelper.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnWillChangeField(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.Object[])">
            <summary>
            The WillChangeField event is called before a pending operation changes the value of one or more Field objects in the ADORecordsetHelper.
            </summary>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numfields">Indicates the number of fields objects contained in the “fieldvalues” array.</param>
            <param name="fieldvalues">Array with the new values of the modified fields.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnFieldChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.Object[],System.String[])">
            <summary>
            The FieldChangeComplete event is called after the value of one or more Field objects has changed.
            </summary>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numfields">Indicates the number of fields objects contained in the “fieldvalues” array.</param>
            <param name="fieldvalues">Array with the new values of the modified fields.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnWillChangeRecord(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32)">
            <summary>
            The OnWillChangeRecord event is called before one or more records (rows) in the Recordset change.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numRecords">Value indicating the number of records changed (affected).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnRecordChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.Int32,System.String[])">
            <summary>
            OnRecordChangeComplete event is called after one or more records change.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="numRecords">Value indicating the number of records changed (affected).</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnWillChangeRecordset(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@)">
            <summary>
            OnWillChangeRecordset event is called before a pending operation changes the ADORecordsetHelper.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnRecordsetChangeComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.String[])">
            <summary>
            OnRecordsetChangeComplete event is called after the ADORecordsetHelper has changed.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnWillMove(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@)">
            <summary>
            OnWillMove event is called before a pending operation changes the current position in the ADORecordsetHelper.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OnMoveComplete(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum@,System.String[])">
            <summary>
            OnMoveComplete event is called after the current position in the ADORecordsetHelper changes.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
            <param name="errors">Array containing all the errors occurred during the field change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.BasicMove(System.Int32)">
            <summary>
            Performs the basic move operation on the ADORecordsetHelper, moving the current record forward or backwards.
            </summary>
            <param name="newIndex">The index of the new position for the current record.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.IsEof">
            <summary>
            Determines if we should be at the end of file (EOF) based on the current index.
            </summary>
            <returns>Returns true if based on the index variable EOF is true; otherwise false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.EndOfRecordsetLogic">
            <summary>
            Verifies that no more data is pending on the ADORecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Move(System.Int32,UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Move the current record according to the value of “records”.
            </summary>
            <param name="records">The number of records to move forward (if positive), backwards (if negative).</param>
            <param name="reason">The reason of the change.</param>
            <param name="status">An EventStatusEnum value that indicates the state of the ADORecordsetHelper in the moment that the event rose.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveFirst(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum)">
            <summary>
            Move the current record to the beginning of the ADORecordsetHelper object.
            </summary>
            <param name="reason">The reason of the change.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Update(System.Boolean)">
            <summary>
            Saves the current content of the ADORecordsetHelper to the database.
            </summary>
            <param name="reportMove">Bool flag that indicates if this operation will notify others process raising an event or not.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.OpenRecordset(System.Boolean)">
            <summary>
            Opens the ADORecordsetHelper using the object public information.
            </summary>
            <param name="requery">Flag that indicates if a requery is necessary.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.NextRecordSet">
            <summary>
            Returns a new recordset according to the compound statement on the current recordset
            </summary>
            <returns>A new open recordset</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Dispose(System.Boolean)">
            <summary>
            Overrides the IDisposable.Dispose to cleanup
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.EndOfRecordset">
            <summary>Occurs when EOF/BOF hit.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.WillChangeField">
            <summary>Occurs before a field change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.FieldChangeComplete">
            <summary>Occurs after a field change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.WillChangeRecord">
            <summary>Occurs before a record change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.RecordChangeComplete">
            <summary>Occurs after a record change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.WillChangeRecordset">
            <summary>Occurs before a recordset change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.RecordsetChangeComplete">
            <summary>Occurs after a recordset change.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.WillMove">
            <summary>Occurs before a different row becomes the current row.</summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.MoveComplete">
            <summary>Occurs after a row becomes the current row.</summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.PageCount">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.EOF">
            <summary>
            Gets a bool value indicating if the current record is the last one in the RecordsetHelper object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.EditMode">
            <summary>
            Property to indicate the editing status of the current record
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Status">
            <summary>
            Property to handle the Status of the recordset
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.UsingView">
            <summary>
            Property used to determine if the data needs to be get from a dataview or the table directly
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Sort">
            <summary>
            Property to get and set the order of the recordset
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.State">
            <summary>
            Property to handle the state of the recordset
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.ActiveConnection">
            <summary>
            This is an override to wire the event necesary to handle the proper state of the recordset
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.BOF">
            <summary>
            Returns a value that indicates whether the current record position is before the first record in an ADORecordsetHelper object. Read-only Boolean.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Filter">
            <summary>
            Sets the Filter to by applied to the this ADORecordsetHelper. (valid objects are: string, DataViewRowState and DataRow[]).
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.LockType">
            <summary>
            Gets/Sets the LockType for this object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.CursorLocation">
            <summary>
            Gets/Sets the CursorLocation for this object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.RecordCount">
            <summary>
            Gets the total number of records currently on the ADORecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.AbsolutePosition">
            <summary>
            Gets and Sets the position of the current record on the recordset instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Item(System.String)">
            <summary>
            Array access by column name to set the object
            </summary>
            <param name="columnName">string column name</param>
            <returns>object</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Item(System.Int32)">
            <summary>
            Array access by index
            </summary>
            <param name="columnIndex">index value</param>
            <returns>object</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.Bookmark">
            <summary>
            Sets a bookmark to an specific record inside the ADORecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.AbsolutePage">
            <summary>
            Gets/Sets the current page number.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.DataMember">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.ADORecordSetHelper.SupportsDisconnectedRecordsetOperations">
            <summary>
            Performs a check to determine if the recordset is working disconnected
            </summary>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventHandler">
            <summary>
            Delegate to handle the EndOfRecordset event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventHandler">
            <summary>
            Delegate to handle the FieldChangeEvent event.
            </summary>
            <param name="eventSender">The object which rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeCompleteEventHandler">
            <summary>
            Delegate to handle the FieldChangeCompleteEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventHandler">
            <summary>
            Delegate to handle the RecordChangeEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeCompleteEventHandler">
            <summary>
            Delegate to handle the RecordChangeCompleteEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventHandler">
            <summary>
            Delegate to handle the RecordSetChangeEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeCompleteEventHandler">
            <summary>
            Delegate to handle the RecordSetChangeCompleteEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.MoveEventHandler">
            <summary>
            Delegate to handle the MoveEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.MoveCompleteEventHandler">
            <summary>
            Delegate to handle the MoveCompleteEvent event.
            </summary>
            <param name="eventSender">The object which rises the event.</param>
            <param name="e">The arguments of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum">
            <summary>
            The EventReasonEnum enumeration classifies the reason why an event is being raised.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnAddNew">
            <summary>
            Add New
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnDelete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnUpdate">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnUndoUpdate">
            <summary>
            Undo update
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnUndoAddNew">
            <summary>
            Undo add new
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnUndoDelete">
            <summary>
            Undo delete
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnRequery">
            <summary>
            Requery
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnResynch">
            <summary>
            Resynch
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnClose">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnMove">
            <summary>
            Move
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnFirstChange">
            <summary>
            First Change
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnMoveFirst">
            <summary>
            Move first
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnMoveNext">
            <summary>
            Move next
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnMovePrevious">
            <summary>
            Move previous
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum.adRsnMoveLast">
            <summary>
            Move Last
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum">
            <summary>
            The EventStatusEnum enumeration classifies the status of an event.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum.adStatusOK">
            <summary>
            Status Ok
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum.adStatusErrorsOccurred">
            <summary>
            Errors Ocurred
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum.adStatusCantDeny">
            <summary>
            Can't Deny
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum.adStatusCancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum.adStatusUnwantedEvent">
            <summary>
            Unwanted Event
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs">
            <summary>
            Base class for the ADODB events helpers.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.adStatus">
            <summary>
            private member which declares an EventStatusEnum instance.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.errors">
            <summary>
            private member to collect error information.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="status">The status of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum,System.String[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="status">The status of the event.</param>
            <param name="errors">The errors on the operation.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.Status">
            <summary>
            Gets and sets the event status (EventStatusEnum).
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.BaseAdoEventArgs.Errors">
            <summary>
            Gets the errors array
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventArgs">
            <summary>
            Arguments class for the EndOfRecordsetEvent.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventArgs.moreData">
            <summary>
            private member to store moreDataFlag
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventArgs.#ctor(System.Boolean,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new EndOfRecordsetEventArgs instance.
            </summary>
            <param name="moreData">Indicates if there are more data to get.</param>
            <param name="status">The status of the event</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.EndOfRecordsetEventArgs.MoreData">
            <summary>
            Gets and Sets the more data flag
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs">
            <summary>
            Arguments class for the FieldChangeEvent.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.numberOfFields">
            <summary>
            private member to store number of fields affected value.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.fieldValues">
            <summary>
            private member to store field's values before applying a change.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.#ctor(System.Int32,System.Object[],System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new FieldChangeEventArgs instance.
            </summary>
            <param name="numberOfFields">The number of fields affected.</param>
            <param name="fieldValues">The field's values before the change.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.#ctor(System.Int32,System.Object[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new FieldChangeEventArgs instance.
            </summary>
            <param name="numberOfFields">The number of fields affected.</param>
            <param name="fieldValues">The field's values before the change.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.NumberOfFields">
            <summary>
            Gets the number of fields affected.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeEventArgs.FieldValues">
            <summary>
            The values of the fields affected.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeCompleteEventArgs">
            <summary>
            Arguments class for the FieldChangeCompleteEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.FieldChangeCompleteEventArgs.#ctor(System.Int32,System.Object[],System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new FieldChangeCompleteEventArgs instance.
            </summary>
            <param name="numberOfFields">The number of fields affected.</param>
            <param name="fieldValues">The field's values after the change.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs">
            <summary>
            Arguments class for the RecordChangeEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.Int32,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordChangeEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="numberOfRecords">The number of fields affected.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.Int32,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordChangeEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="numberOfRecords">The number of fields affected.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs.Reason">
            <summary>
            Gets the reason of the event.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeEventArgs.NumberOfRecords">
            <summary>
            Gets the number of records affected.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeCompleteEventArgs">
            <summary>
            Arguments class for the RecordChangeCompleteEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordChangeCompleteEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.Int32,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordChangeCompleteEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="numberOfRecords">The number of fields affected.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventArgs">
            <summary>
            Arguments class for the RecordSetChangeEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordSetChangeEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordSetChangeEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeEventArgs.Reason">
            <summary>
            Gets the reason of the event.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeCompleteEventArgs">
            <summary>
            Arguments class for the RecordSetChangeCompleteEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.RecordSetChangeCompleteEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new RecordSetChangeCompleteEventArgs instance.
            </summary>
            <param name="reason">The reason of the change.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.MoveEventArgs">
            <summary>
            Arguments class for the MoveEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.MoveEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new MoveEventArgs instance.
            </summary>
            <param name="reason">The reason of the move.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.MoveEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new MoveEventArgs instance.
            </summary>
            <param name="reason">The reason of the move.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ADO.Events.MoveEventArgs.Reason">
            <summary>
            Gets the reason of the event.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ADO.Events.MoveCompleteEventArgs">
            <summary>
            Arguments class for the MoveCompleteEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ADO.Events.MoveCompleteEventArgs.#ctor(UpgradeHelpers.VB6.DB.ADO.Events.EventReasonEnum,System.String[],UpgradeHelpers.VB6.DB.ADO.Events.EventStatusEnum)">
            <summary>
            Creates a new MoveCompleteEventArgs instance.
            </summary>
            <param name="reason">The reason of the move.</param>
            <param name="errors">The errors ocurred during the operation.</param>
            <param name="status">The status of the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ConnectionContainers">
            <summary>
            This is the base class to administrate multiple connections under the same structure with the possibility to use a transactional model for all the connections.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.#ctor">
            <summary>
            Creates a new ConnectionContainers object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new ConnectionContainers object and set the DBProviderFactory to “factory”.
            </summary>
            <param name="factory">The factory to be used by the connections created with this ConnectionContainers object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.BeginTransaction(System.Data.Common.DbConnection)">
            <summary>
            Begins a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be initiated.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.BeginTransaction">
            <summary>
            Begins a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.Close(System.Data.Common.DbConnection)">
            <summary>
            Closes a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be close.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.Close">
            <summary>
            Closes a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.CommitTransaction(System.Data.Common.DbConnection)">
            <summary>
            Commits a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be committed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.CommitTransaction">
            <summary>
            Commits a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.Rollback(System.Data.Common.DbConnection)">
            <summary>
            Rollbacks a transaction for a specific connection.
            </summary>
            <param name="connection">The connection to work on.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.Rollback">
            <summary>
            Rollbacks a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.Open(System.String)">
            <summary>
            Creates a new connection and opens it using the provided connection string.
            </summary>
            <param name="connectionString">The connection string with the information to connect to a database.</param>
            <returns>The newly created DBConnection object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ConnectionContainers.result_StateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Event that notifies the current state of a change.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">Additional event information.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ConnectionContainers.Factory">
            <summary>
            Sets the DBProviderFactory to be use in the connections created with this ConnectionContainers object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.ConnectionContainers.Connections">
            <summary>
            Gets the list of all connections contained in this object.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.ValidatingEventArgs">
            <summary>
            The ValidatingEvent arguments.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.ValidatingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new ValidatingEventArgs instance.
            </summary>
            <param name="Action">The action that raises the event.</param>
            <param name="Save">Determines if needs to save.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.ValidatingEventArgs.Action">
            <summary>
            Gets the event action.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.Controls.ValidatingEventArgs.Save">
            <summary>
            Gets the Save value.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.BOFActionEnum">
            <summary>
            BOF action values.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.BOFActionEnum.MoveFirst">
            <summary>
            MoveFirst
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.BOFActionEnum.BOF">
            <summary>
            Begin Of File
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.EOFActionEnum">
            <summary>
            EOF action values.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.EOFActionEnum.MoveLast">
            <summary>
            Move Last
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.EOFActionEnum.EOF">
            <summary>
            End of file
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.EOFActionEnum.Add">
            <summary>
            Add Record state
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper">
            <summary>
            Base class for the supported DAO Data Controls, internal purposes.
            This class just exists due to the VS Designer issue with Generic classes it is just a bridge between the Generaric class and
            the ToolBox enabled control DAODataControlHelper
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalDAODataControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.Controls.InternalRDODataControlHelper">
            <summary>
            Base class for the supported RDO Data Controls, internal purposes.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalRDODataControlHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.Controls.InternalRDODataControlHelper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalRDODataControlHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.Controls.InternalRDODataControlHelper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.QueryDefs(System.String)">
            <summary>
            QueryDefs
            </summary>
            <param name="QueryDefName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.#ctor(System.Data.Common.DbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.AddIndexesToTableDef(UpgradeHelpers.VB6.DB.DAO.TableDefHelper)">
            <summary>
            
            </summary>
            <param name="tableDef"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.AddColumnsToTableDef(UpgradeHelpers.VB6.DB.DAO.TableDefHelper)">
            <summary>
            
            </summary>
            <param name="tableDef"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.CreateTableDef(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.CreateTableDef(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="sourceTableName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.OpenRecordset(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.OpenRecordset(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="factoryName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.CreateCommand">
            <summary>
            CreateCommand
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.Item(System.String)">
            <summary>
            
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper.TableDefs">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper">
            <summary>
            This class implements functionality for a Data Control for DAO access (usually Jet Engine e.g MS Access)
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.#ctor">
            <summary>
            Creates a new Data Control instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.DeInitRecordset">
            <summary>
            De initializes the underlying recordset object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.InitRecordset">
            <summary>
            Initializes the underlying recordset object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.Recordset_Validating(System.Object,UpgradeHelpers.VB6.DB.Controls.ValidatingEventArgs)">
            <summary>
            Fires DAOControlHelper Validating event
            </summary>
            <param name="sender"></param>
            <param name="vArgs"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.EndInit">
            <summary>
            Ends the initialization process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            Raises the validating event.
            </summary>
            <param name="Action">The action that raises the event.</param>
            <param name="Save">Determines if needs to save.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.BindControl(System.Windows.Forms.TextBox,System.String)">
            <summary>
            
            </summary>
            <param name="txtNotes"></param>
            <param name="p"></param>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.Validating">
            <summary>
            Public ValidatingEvent.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.EditMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAODataControlHelper.ValidatingEventHandler">
            <summary>
            Delegate to wire the ValidatingEvent.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum">
            <summary>
            Determines the type of the recordset.
            It will be used on OpenRecordset method.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum.dbOpenTable">
            <summary>
            Open table
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum.dbOpenDynamic">
            <summary>
            Dynamic
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum.dbOpenDynaset">
            <summary>
            Dynaset
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum.dbOpenSnapshot">
            <summary>
            Snapshot
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum.dbOpenForwardOnly">
            <summary>
            Forward Only
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum">
            <summary>
            Determines the way a recordset will be accessed setting some restriction or permitions.
            It will be used on OpenRecordset, and Execute methods.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbAppendOnly">
            <summary>Allows user to add new records to the dynaset, but prevents user from reading existing records.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbConsistent">
            <summary>Applies updates only to those fields that will not affect other records in the dynaset (dynaset- and snapshot-type only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbDenyRead">
            <summary>Prevents other users from reading Recordset records (table-type only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbDenyWrite">
            <summary>Prevents other users from changing Recordset records.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbExecDirect">
            <summary>Executes the query without first calling the SQLPrepare ODBC function.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbFailOnError">
            <summary>Rolls back updates if an error occurs.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbForwardOnly">
            <summary>Creates a forward-only scrolling snapshot-type Recordset (snapshot-type only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbInconsistent">
            <summary>Applies updates to all dynaset fields, even if other records are affected (dynaset- and snapshot-type only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbReadOnly">
            <summary>Opens the Recordset as read-only.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbRunAsync">
            <summary>Executes the query asynchronously.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbSeeChanges">
            <summary>Generates a run-time error if another user is changing data you are editing (dynaset-type only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum.dbSQLPassThrough">
            <summary>Sends an SQL statement to an ODBC database (snapshot-type only).</summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum">
            <summary>Sets or returns the type of locking (concurrency) to use.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum.dbOptimistic">
            <summary>Optimistic concurrency based on record ID. Cursor compares record ID in old and new records to determine if changes have been made since the record was last accessed.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum.dbOptimisticBatch">
            <summary>Enables batch optimistic updates (ODBCDirect workspaces only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum.dbOptimisticValue">
            <summary>Optimistic concurrency based on record values. Cursor compares data values in old and new records to determine if changes have been made since the record was last accessed (ODBCDirect workspaces only).</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum.dbPessimistic">
            <summary>Pessimistic concurrency. Cursor uses the lowest level of locking sufficient to ensure that the record can be updated.</summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAOUpdateTypeEnum">
            <summary>Sets or returns the type of update to use.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOUpdateTypeEnum.dbUpdateBatch">
            <summary>All pending changes in the update cache are written to disk.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOUpdateTypeEnum.dbUpdateCurrentRecord">
            <summary>Only the current record's pending changes are written to disk.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAOUpdateTypeEnum.dbUpdateRegular">
            <summary>(Default) Pending changes are not cached and are written to disk immediately.</summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper">
            <summary>
            Support class for the DAO.Recorset the object that represents the records in a base table or the records that result from running a query.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.editMode">
            <summary>Lock editing operations for the current object.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.noMatch">
            <summary>Indicates the result of a seek or find operation.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.daoRSType">
            <summary>Indicates the type of this recordset.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.daoRSOption">
            <summary>Indicates the options for this recorset.</summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.daoLockType">
            <summary>Indicates the lock for this recordset.</summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.#ctor">
            <summary>
            Creates a new DAORecordSet instance using the default factory specified on the configuration xml.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.#ctor(System.String)">
            <summary>
            Creates a new DAORecordSet instance using the factory specified on the “factoryName” parameter.
            </summary>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.#ctor(System.String,UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum,UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum,UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum)">
            <summary>
            Creates a new DAORecordSet instance using the factory specified on the “factoryName” and the configuration provided by the other parameters.
            </summary>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="rsType">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <param name="rsOption">The DAORecordsetOptionEnum of this DAORecordsetHelper object.</param>
            <param name="lockType">The DAOLockTypeEnum of this DAORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.AddNew">
            <summary>
            Creates a new record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Edit">
            <summary>
            Sets the recordset on edit mode.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.GetRows(System.Int32)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Move(System.Int32,System.Data.DataRow)">
            <summary>
            Moves the position of the currentRecord in a RecordSet.
            </summary>
            <param name="rows">The number of rows the position will move. If rows is greater than 0, the position is moved forward (toward the end of the file). If rows is less than 0, the position is moved backward (toward the beginning of the file).</param>
            <param name="startBookmark">The start value to begin the move.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.FindFirst(System.String)">
            <summary>
            Locates the first record in DAORecordsetHelper object that satisfies the specified criteria and makes that record the current record.
            </summary>
            <param name="criteria">A String used to locate the record. It is like the WHERE clause in an SQL statement, but without the word WHERE.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.FindLast(System.String)">
            <summary>
            Locates the last record in DAORecordsetHelper object that satisfies the specified criteria and makes that record the current record.
            </summary>
            <param name="criteria">A String used to locate the record. It is like the WHERE clause in an SQL statement, but without the word WHERE.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.Data.Common.DbCommand)">
            <summary>
            Opens the DAORecordsetHelper object by executing the query in the “command” parameter and load all results.
            </summary>
            <param name="command">A command containing the query to be execute to load the DAORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.String,System.Data.Common.DbConnection)">
            <summary>
            Opens the DAORecordsetHelper object by executing the query on the “SQLstr” using the connection object provided has parameter and load all results.
            </summary>
            <param name="SQLstr">The string containing the SQL query to be loaded into this DAORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this DAORecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new DAORecordsetHelper object using the “factoryName” and opens it by executing the query on the “SQLstr” using the connection object provided has parameter and load all results.
            </summary>
            <param name="SQLStr">The string containing the SQL query to be loaded into this DAORecodsetHelper object.</param>
            <param name="connection">Connection object to be use by this DAORecordsetHelper.</param>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.String,UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new DAORecordsetHelper object using the “factoryName”, “type” and opens it by executing the query on the “SQLstr” using the connection object provided has parameter and load all results.
            </summary>
            <param name="SQLStr">The string containing the SQL query to be loaded into this DAORecodsetHelper object.</param>
            <param name="type">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <param name="connection">Connection object to be use by this DAORecordsetHelper.</param>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new DAORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.String,UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum,UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new DAORecordsetHelper object using the “factoryName”, “type”, "options" and opens it by executing the query on the “SQLstr” using the connection object provided has parameter and load all results.
            </summary>
            <param name="SQLStr">The string containing the SQL query to be loaded into this DAORecodsetHelper object.</param>
            <param name="type">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <param name="options">The DAORecordsetOptionEnum of this DAORecordsetHelper object.</param>
            <param name="connection">Connection object to be use by this DAORecordsetHelper.</param>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new DAORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.String,UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum,UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum,UpgradeHelpers.VB6.DB.DAO.DAOLockTypeEnum,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new DAORecordsetHelper object using the “factoryName”, “type”, "options", "lockType"  and opens it by executing the query on the “SQLstr” using the connection object provided has parameter and load all results.
            </summary>
            <param name="SQLStr">The string containing the SQL query to be loaded into this DAORecodsetHelper object.</param>
            <param name="type">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <param name="options">The DAORecordsetOptionEnum of this DAORecordsetHelper object.</param>
            <param name="lockType">The DAOLockTypeEnum of this DAORecordsetHelper object.</param>
            <param name="connection">Connection object to be use by this DAORecordsetHelper.</param>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new DAORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Open(System.Data.Common.DbCommand,System.String)">
            <summary>
            Creates a new DAORecordsetHelper object using the “factoryName” and opens it by executing the query in the “command” parameter and load all results.
            </summary>
            <param name="command">A command containing the query to be execute to load the DAORecordsetHelper object.</param>
            <param name="factoryName">The name of the factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new DAORecordsetHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Update(UpgradeHelpers.VB6.DB.DAO.DAOUpdateTypeEnum,System.Boolean)">
            <summary>
            Save the current content of the DAORecordsetHelper to the database.
            </summary>
            <param name="UpdateType">The DAOUpdateTypeEnum to be use by this update.</param>
            <param name="Force">A Boolean value indicating whether or not to force the changes into the database.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateWithNoEvents(System.Data.DataRow)">
            <summary>
            Saves any changes made to the DataRow recieved as parameter.
            </summary>
            <param name="theRow">The row to be save on the Database.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Update">
            <summary>
            Saves the changes done to the current record on the recordset.
            </summary>
            <remarks>If the recordset is not batch enabled this method saves the changes on the database.</remarks>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.BasicMove(System.Int32)">
            <summary>
            Moves the current index to the desire position provided has parameter.
            </summary>
            <param name="newIndex">The new index for the DAORecordsetHelper object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.MoveLast">
            <summary>
            Moves the current location to the last position in the DAORecordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.OpenRS">
            <summary>
            Creates and open a new DAORecordsetHelper using the same information of the current object.
            </summary>
            <returns>A new DAORecordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.OpenRS(UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum)">
            <summary>
            Creates and open a new DAORecordsetHelper using the same information of the current object and the type provided has parameter.
            </summary>
            <param name="rsType">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <returns>A new DAORecordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.OpenRS(UpgradeHelpers.VB6.DB.DAO.DAORecordsetTypeEnum,UpgradeHelpers.VB6.DB.DAO.DAORecordsetOptionEnum)">
            <summary>
            Creates and open a new DAORecordsetHelper using the same information of the current object and the type provided has parameter.
            </summary>
            <param name="rsType">The DAORecordsetTypeEnum of this DAORecordsetHelper object.</param>
            <param name="rsOptions">The DAORecordsetOptionEnum of this DAORecordsetHelper object.</param>
            <returns>A new DAORecordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Requery">
            <summary>
            Updates the data in a Recordset object by re-executing the query on which the object is based.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Delete">
            <summary>
            Deletes the current record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            Fires DAORecordSetHelper Validating event that is listened by DAODataControlHelper
            </summary>
            <param name="Action"></param>
            <param name="Save"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Bookmark">
            <summary>
            Gets and sets a bookmark to an specific record inside the ADORecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.AbsolutePosition">
            <summary>
            Gets and Sets the position of the current record on the recordset instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.BOF">
            <summary>
            Returns a value that indicates whether the current record position is before the first record in a DAORecordsetHelper object. Read-only Boolean.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.LockEdits">
            <summary>
            Gets or Sets if lock is in effect while editing.  
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.NoMatch">
            <summary>
            Indicates whether a particular record was found by using the Seek method or one of the Find methods.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Type">
            <summary>
            Gets or sets the type for this DAORecordSetHelper object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateLambda">
            <summary>
            Extension lambda for overriding default Update logic. This is helpful for
            Recordset loaded from Stored Procedures
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.DeleteLambda">
            <summary>
            Extension lambda for overriding default Update logic. This is helpful for
            Recordset loaded from Stored Procedures
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.BeforeUpdate">
            <summary>
            Event triggered before an update takes placed
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.AfterUpdate">
            <summary>
            Event triggered after the updated has been completed
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.Validating">
            <summary>
            Event Validating
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.LastModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.EditMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateType">
            <summary>
            List the posible update cases used with the UpdateInfo
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateType.Added">
            <summary>
            Row Adde
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateType.Deleted">
            <summary>
            Row deleted
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateType.Modified">
            <summary>
            Row Modified
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateInfo">
            <summary>
            Event argument class for sending update information to listeners like DataControl helper classes
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateInfo.UpdateType">
            <summary>
            The update type for the row
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DAORecordSetHelper.UpdateInfo.index">
            <summary>
            Row Index
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper">
            <summary>
            Support class for DAO.DBEngine. 
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.connectionContainers">
            <summary>
            connectionContainers 
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.factory">
            <summary>
            DbProvider factory
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.instance">
            <summary>
            Singleton Instance
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.Instance(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new DBEngineHelper object using the provided factory.
            </summary>
            <param name="factory">The factory to be use this object.</param>
            <returns>A new DBEngineHelper.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new DBEngineHelper object using the provided factory.
            </summary>
            <param name="factory">The factory to be use this object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.BeginTransaction">
            <summary>
            Begins a new transaction. Read/write Database.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.CommitTransaction">
            <summary>
            Ends the current transaction and saves the changes.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.Rollback">
            <summary>
            Ends the current transaction and restores the databases in the Workspace object to the state they were in when the current transaction began.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.OpenDatabase(System.String)">
            <summary>
            Opens a specified database and returns a reference to the DbConnection object that represents it.
            </summary>
            <param name="connectionString">The connection strings with the necessary information to connect with the desire Database.</param>
            <returns>A DbConnection object that represents the connection with the database.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.CreateWorkspace(System.String,System.String)">
            <summary>
            Creates a new Workspace object.
            </summary>
            <param name="name">The name of the new WorkspaceHelper.</param>
            <param name="factoryName">The name of the factory to by use by this WorkspaceHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new WorkspaceHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.CreateWorkspace(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new Workspace object.
            </summary>
            <param name="name">The name of the new WorkspaceHelper.</param>
            <param name="factoryName">The name of the factory to by use by this WorkspaceHelper object (the name most exist on the configuration xml file).</param>
            <param name="user">The name of the new WorkspaceHelper.</param>
            <param name="password">The name of the new WorkspaceHelper.</param>
            <returns>The new WorkspaceHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.CreateWorkspace(System.String)">
            <summary>
            Creates a new Workspace object.
            </summary>
            <param name="factoryName">The name of the factory to by use by this WorkspaceHelper object (the name most exist on the configuration xml file).</param>
            <returns>The new WorkspaceHelper object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.DeriveParameters(System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory)">
            <summary>
            Extracts the command information from the command object and add specific information based on the factory being use.
            </summary>
            <param name="theCommand">Command to be processed.</param>
            <param name="factory">The factory to be use.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.Item(System.Int32)">
            <summary>
            Gets the WorkspaceHelper object at “index”.
            </summary>
            <param name="index">The index of the WorkspaceHelper to be returned.</param>
            <returns>The WorkspaceHelper at index.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.DBEngineHelper.SystemDB">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.ProviderTypeToType(System.String)">
            <summary>
            
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.ProviderTypeToDbType(System.String)">
            <summary>
            
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.DbTypeToType(System.Data.DbType)">
            <summary>
            
            </summary>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.DbTypeToProviderType(System.Data.DbType)">
            <summary>
            
            </summary>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.TypeToDbType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.DbTypesConverter.TypeToProviderType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.EditModeEnum">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.EditModeEnum.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.EditModeEnum.dbEditAdd">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.EditModeEnum.dbEditNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.EditModeEnum.dbEditInProgress">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.IndexesHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.IndexesHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.IndexHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.IndexHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.IndexHelper.CreateField(System.String,System.Data.DbType,System.Object)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="dbtype"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Unique">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Primary">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.IgnoreNulls">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Required">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Foreign">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Clustered">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.IndexHelper.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.TableDefHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="sourceTableName"></param>
            <param name="fromDatabase"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="sourceTableName"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.CreateField(System.String,System.Data.DbType,System.Object)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="dbtype"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.CreateIndex(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.Indexes">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.TableDefHelper.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper">
            <summary>
            Table Defs Helper, list of TableDef definitions
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper.#ctor(System.Data.Common.DbConnection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper.Add(UpgradeHelpers.VB6.DB.DAO.TableDefHelper)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper.Find(System.String)">
            <summary>
            Returns true if tableName is found
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.TableDefsHelper.Item(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.User">
            <summary>
            User Class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.User.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.User.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.User.Groups">
            
             <summary>
             
             </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.User.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.Group">
            <summary>
            Group Class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Group.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.Group.Users">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.Group.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.Groups">
            <summary>
            Groups Class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Groups.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Groups.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.Users">
            <summary>
            Users Class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Users.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Users.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.Users.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper">
            <summary>
            WorkspaceHelper Class
            A Workspace object defines a named session for a user. It contains open databases and provides mechanisms for simultaneous transactions.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.BeginTransaction(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper)">
            <summary>
            Begins a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be initiated.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.BeginTransaction">
            <summary>
            Begins a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Close(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper)">
            <summary>
            Closes a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be close.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Close">
            <summary>
            Closes a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.CommitTransaction(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper)">
            <summary>
            Commits a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be committed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.CommitTransaction">
            <summary>
            Commits a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Rollback(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper)">
            <summary>
            Rollbacks a transaction for a specific connection.
            </summary>
            <param name="connection">The connection to work on.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Rollback">
            <summary>
            Rollbacks a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Open(System.String)">
            <summary>
            Creates a new connection and opens it using the provided connection string.
            </summary>
            <param name="connectionString">The connection string with the information to connect to a database.</param>
            <returns>The newly created DBConnection object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.result_StateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Event that notifies the current state of a change.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">Additional event information.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.#ctor">
            <summary>
            Creates a new WorkspaceHelper object with the default configuration.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.#ctor(System.String)">
            <summary>
            Creates a new WorkspaceHelper object with the default configuration and the provided name.
            </summary>
            <param name="name">The name for the new WorkspaceHelper</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new WorkspaceHelper object using the provided factory.
            </summary>
            <param name="factory">The factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new WorkspaceHelper object using the provided name and factory.
            </summary>
            <param name="name">The name for the new WorkspaceHelpe.r</param>
            <param name="factory">The factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.#ctor(System.String,System.Data.Common.DbProviderFactory,System.String,System.String)">
            <summary>
            Creates a new WorkspaceHelper object using the provided name and factory.
            </summary>
            <param name="name">The name for the new WorkspaceHelpe.r</param>
            <param name="factory">The factory to by use by this DAORecordsetHelper object (the name most exist on the configuration xml file).</param>
            <param name="user">The name for the new WorkspaceHelpe.r</param>
            <param name="password">The name for the new WorkspaceHelpe.r</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.OpenDatabase(System.String)">
            <summary>
            Opens a Database using the provided connection string.
            </summary>
            <param name="connectionString"></param>
            <returns>A DAODatabaseHelper object with the representation of the openned database.</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper._Users">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper._Groups">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.CreateUser(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="databaseHelper"></param>
            <param name="Username"></param>
            <param name="Password"></param>
            <param name="UserRole"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.DeleteUser(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper,System.String)">
            <summary>
            
            </summary>
            <param name="databaseHelper"></param>
            <param name="Username"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.UpdateRole(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="databaseHelper"></param>
            <param name="OldGroup"></param>
            <param name="NewGroup"></param>
            <param name="user"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.NewPassword(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="databaseHelper"></param>
            <param name="user"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Factory">
            <summary>
            Sets the DBProviderFactory to be use in the connections created with this ConnectionContainers object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Connections">
            <summary>
            Gets the list of all connections contained in this object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Name">
            <summary>
            Gets the name that uniquely identifies this WorkspaceHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Users">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.DAO.WorkspaceHelper.Groups">
            
             <summary>
             
             </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.EngineHelper`1">
            <summary>
            Base class to provide the DBEngine functionality.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.EngineHelper`1.connectionContainers">
            <summary>
            connectionContainers Template List
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.EngineHelper`1.factory">
            <summary>
            DbProvider factory
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.EngineHelper`1.instance">
            <summary>
            Singleton Instance
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.EngineHelper`1.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            EngineHelper Constructor
            </summary>
            <param name="factory">set internal factory instance</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.EngineHelper`1.Item(System.Int32)">
            <summary>
            Array access
            </summary>
            <param name="index">index to access</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.FieldHelper">
            <summary>
            It simulates a VB6 Field, contains the Value and FieldMetadata
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.FieldHelper.#ctor(UpgradeHelpers.VB6.DB.RecordSetHelper,System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rs">The recordset for this Field.</param>
            <param name="column">The column index or column string to get the Field in the recordset.</param>
            <param name="columnTypeNumeric">Indicates if column is an index or string value.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FieldHelper.Value">
            <summary>
            Value for this Field
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.FieldHelper.FieldMetadata">
            <summary>
            Metadata for this Field
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.IdentityColumnsManager">
             <summary>
             This class stores information on the columns whose 
             values are set on the database automatically, 
             either by triggers or automatically because they are an identity column.
            <AdoIdentityColumns>
             <IdentityColumns>
                 <add tablename="CR_Customreport">
                     <columns>
                         <add columnname="CR_ID" sequencename="CR_ID"/>
                     </columns>
                 </add>
             </IdentityColumns>
            </AdoIdentityColumns>
             </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.IdentityColumnsManager.configSection">
            <summary>
            Holds the section instance.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.IdentityColumnsManager.identities">
            <summary>
            Holds the indentities information.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.IdentityColumnsManager.GetIndentityInformation(System.String)">
            <summary>
            Gets the identity information for an specific table.
            </summary>
            <param name="_TableName">The name of the table to get the identity information.</param>
            <returns>A dictionary containing the indentity information for the specified table.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.IdentityColumnsManager.ConfigSection">
            <summary>
            Gets the configurtion section instance.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.AdoIdentityColumnsConfigurationSection">
            <summary>
            Represents the configuration section to handle the identity column information.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.AdoIdentityColumnsConfigurationSection.SECTION_NAME">
            <summary>
            The section name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoIdentityColumnsConfigurationSection.Tables">
            <summary>
            Gets the tables collections.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection">
            <summary>
            The collection of identity elements.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new element.
            </summary>
            <param name="elementName">The name of the new element to be created.</param>
            <returns>The new instance of the configuration element.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>The new instance of the configuration element.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the element in the collection.
            </summary>
            <param name="element">The element to get the key from.</param>
            <returns>The element key.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.Add(UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="tableConfig">The factory to be added.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.Item(System.String)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="name">The element key.</param>
            <returns>The element corresponding to the key.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoIdentityColumnTableConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="index">The index key.</param>
            <returns>The element corresponding to the index.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement">
            <summary>
            The configuration element to define the identity columns on a table.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement.#ctor">
            <summary>
            Creates a new element.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement.#ctor(System.String)">
            <summary>
            Creates a new element with the specific name.
            </summary>
            <param name="tableName">The table name.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement.#ctor(System.String,UpgradeHelpers.VB6.DB.AdoIdentityColumnConfigurationElementCollection)">
            <summary>
            Creates a new element with the specific values.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="colums">The columns collection.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement.TableName">
            <summary>
            Gets and sets the Table name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.AdoIdentityTableColumnConfigurationElement.Columns">
            <summary>
            Gets and sets the colimns collection.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.AdoIdentityColumnConfigurationElementCollection">
            <summary>
            Class to ADO Identity column configuration
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.ParametersHelper">
            <summary>
            Class to handle Database command parameters complex functionality
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ParametersHelper.DeriveParameters(System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory)">
            <summary>
            Extracts the command information from the command object and add specific information based on the factory being use.
            </summary>
            <param name="theCommand">Command to be processed.</param>
            <param name="factory">The factory to be use.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ParametersHelper.DeriveParametersFromProcedureCode(System.Data.Common.DbConnection,System.Data.Common.DbCommand)">
            <summary>
            Extracts the command information from the command object and add specific information based on the factory being use.
            </summary>
            <param name="connection">The connection to extract the information from.</param>
            <param name="pivotCommand">Command to be processed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.ParametersHelper.getDbType(System.String)">
            <summary>
            Gets the corresponding DBType for the string received has parameter.
            </summary>
            <param name="p">The string with the name of the type to convert to DBType.</param>
            <returns>The DBType that correspond to the name revieved has parameter, otherwise DBType.String.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.RowStatusChangedEventHandler">
            <summary>
            Delegate to handle the RowStatusChangedEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillUpdateRowsEventHandler">
            <summary>
            Delegate to handle the WillUpdateRowsEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.RowCurrencyChangeEventHandler">
            <summary>
            Delegate to handle the RowCurrencyChangeEvent.
            </summary>
            <param name="eventSender">The object which rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillDissociateEventHandler">
            <summary>
            Delegate to handle the WillDissociateEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillAssociateEventHandler">
            <summary>
            Delegate to handle the WillAssociateEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.DissociateEventHandler">
            <summary>
            Delegate to handle the DissociateEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.AssociateEventHandler">
            <summary>
            Delegate to handle the AssociateEvent.
            </summary>
            <param name="eventSender">The object whic rises the event</param>
            <param name="e">The arguments of the event</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillDissociateEventArgs">
            <summary>
            Arguments for the WillDissociateEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.Events.WillDissociateEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new WillDissociateEventArgs instance.
            </summary>
            <param name="cancel">Determines if the event is cancelled</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.Events.WillDissociateEventArgs.Cancel">
            <summary>
            Gets and set the cancel flag.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillAssociateEventArgs">
            <summary>
            Arguments for the WillAssociateEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.Events.WillAssociateEventArgs.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Creates a new WillDissociateEventArgs instance.
            </summary>
            <param name="connection">The connection to be associated</param>
            <param name="cancel">Determines if the event is cancelled</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.Events.WillAssociateEventArgs.Connection">
            <summary>
            Gets the connection instance.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.Events.WillUpdateRowsEventArgs">
            <summary>
            Arguments for the WillUpdateRowsEvent.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.Events.WillUpdateRowsEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new WillUpdateRowsEventArgs instance.
            </summary>
            <param name="returncode">The return code of the event</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.Events.WillUpdateRowsEventArgs.Returncode">
            <summary>
            Gets the return code.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper">
            <summary>
            This class implements the MSRDC functionality.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.OnReposition">
            <summary>
            Raises the Reposition event.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.#ctor">
            <summary>
            Creates a new Control instance.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper._LockType">
            <summary>
            Holds the lock type for the underlying recordset.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper._DataSourceName">
            <summary>
            Holds RemoteData control's data source name.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.UpdateConnectionInfo">
            <summary>
            Updates the connection string property according to the specific information given 
            to this control such as Datasource.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.EndInit">
            <summary>
            Finishes the initialization process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.BeginTrans">
            <summary>
            Starts a new transaction.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.CommitTrans">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.RollbackTrans">
            <summary>
            Rollbacks the current transaction.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.UpdateRow">
            <summary>
            Updates the underlying recordset.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.Reposition">
            <summary>
            Exposes the reposition event.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.Connection">
            <summary>
            Gets and sets the Connection object used by the underlying RDORecordsetHelper 
            to make all the database operations.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.LockType">
            <summary>
            Gets and sets the lock type for the underlying recordset.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDODataControlHelper.DataSourceName">
            <summary>
            Gets/sets RemoteData control's data source name.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper">
            <summary>
            This class represents the rdoEngine class.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.timeout">
            <summary>
            timeout value
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.Instance(System.Data.Common.DbProviderFactory)">
            <summary>
            This returns the default instance of the Engine as exposed by RDO.
            </summary>
            <param name="factory">This is the Provider factory used internally to create the necesary ADO .Net internal objects.</param>
            <returns>A new instance of the rdoEngine object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="factory">This is the Provider factory used internally to create the necesary ADO .Net internal objects.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.CreateEnvironment(System.String)">
            <summary>
            Creates a new Environment instance as exposed by RDO.
            </summary>
            <param name="name">The name of the new environment instance.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.DefaultLoginTimeOut">
            <summary>
            Gets and sets the default login time out.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDOEngineHelper.Environments">
            <summary>
            Gets the list of evironments contained on this engine instance.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper">
            <summary>
            This class represents the rdoEnvironment semantic meaning holding a collection of connections.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.loginTimeOut">
            <summary>
            Timeout value.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.name">
            <summary>
            Name value for the environment.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.#ctor">
            <summary>
            Creates a new environment.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new environment.
            </summary>
            <param name="factory">Represents the provider factory to be used to create the ADO .Net.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.OpenConnection(System.String)">
            <summary>
            Opens a new database connection.
            </summary>
            <param name="connectionString">This is the connection to be used to connect to the database.</param>
            <returns>A new open connection.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.Name">
            <summary>
            Gets and sets the name of the environment.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDOEnvironmentHelper.LoginTimeOut">
            <summary>
            Gets and sets the login time out.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants">
            <summary>
            Defines the type of concurrence to be used by the recordset.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants.rdConcurReadOnly">
            <summary>
            Read Only
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants.rdConcurLock">
            <summary>
            Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants.rdConcurRowVer">
            <summary>
            By Row
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants.rdConcurValues">
            <summary>
            By Value
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.RDO.LockTypeConstants.rdConcurBatch">
            <summary>
            Batch
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper">
            <summary>
            This class has the same functionality than the recordset exposed by the RDO library.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.#ctor(System.String)">
            <summary>
            Constructs a new RDORecordSetHelper instance using the specified factory.
            </summary>
            <param name="factoryname">The name used to identify the factory to be used to create all the necesary ADO .Net objects.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.#ctor">
            <summary>
            creates a new recordset helper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Open">
            <summary>
            Opens the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,UpgradeHelpers.VB6.DB.RDO.LockTypeConstants,System.String)">
            <summary>
            Creates a new RDORecordSetHelper and opens it.
            </summary>
            <param name="SQLstr">The sql statement used to populate the recordset.</param>
            <param name="connection">The connection used to interact with the database.</param>
            <param name="locktype">The lock type used by the recordset.</param>
            <param name="factoryName">The name used to identify the factory to be used to create all the necesary ADO .Net objects.</param>
            <returns>A new opened recordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Open(System.String,System.Data.Common.DbConnection,System.String)">
            <summary>
            Creates a new RDORecordSetHelper and opens it.
            </summary>
            <param name="SQLstr">The sql statement used to populate the recordset.</param>
            <param name="connection">The connection used to interact with the database.</param>
            <param name="factoryName">The name used to identify the factory to be used to create all the necesary ADO .Net objects.</param>
            <returns>A new opened recordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Open(System.Data.Common.DbCommand,UpgradeHelpers.VB6.DB.RDO.LockTypeConstants,System.String)">
            <summary>
             Creates a new RDORecordSetHelper and opens it.
            </summary>
            <param name="command">The sql statement used to populate the recordset.</param>
            <param name="locktype">The lock type used by the recordset.</param>
            <param name="factoryName">The name used to identify the factory to be used to create all the necesary ADO .Net objects.</param>
            <returns>A new opened recordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Open(System.Data.Common.DbCommand,System.String)">
            <summary>
             Creates a new RDORecordSetHelper and opens it.
            </summary>
            <param name="command">The sql statement used to populate the recordset.</param>
            <param name="factoryName">The name used to identify the factory to be used to create all the necesary ADO .Net objects.</param>
            <returns>A new opened recordset.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.AddNew">
            <summary>
            Creates a new record on the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Edit">
            <summary>
            Sets the recordset on edition mode.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Delete">
            <summary>
            Deletes the current record of the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Update">
            <summary>
            Saves the changes done to the current record on the recordset.
            </summary>
            <remarks>If the recordset is not batch enabled this method saves the changes on the database.</remarks>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.BatchUpdate">
            <summary>
            Saves a batch of changes to the database.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.CancelUpdate">
            <summary>
            Cancels the changes done to the current recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Close">
            <summary>
            Releses the resources used by the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.isBatchEnabled">
            <summary>
            Determines if the recordset is batch enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.GetClipString(System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a delimited string for 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="columnDelimiter">Expression used to separate the columns.</param>
            <param name="rowDelimiter">Expression used to separate the rows.</param>
            <param name="nullExpr">Expression used to replace nulls.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.GetClipString(System.Int32,System.String,System.String)">
            <summary>
            Returns a delimited string for 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="columnDelimiter">Expression used to separate the columns.</param>
            <param name="rowDelimiter">Expression used to separate the rows.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.GetClipString(System.Int32,System.String)">
            <summary>
            Returns a delimited string for 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <param name="columnDelimiter">Expression used to separate the columns.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.GetClipString(System.Int32)">
            <summary>
            Returns a delimited string for 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.GetRows(System.Int32)">
            <summary>
            Returns a two dimmension array representing 'n' rows in a result set.
            </summary>
            <param name="numrows">Number of rows to be retrieved.</param>
            <returns>A delimited string containing a number of rows.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Move(System.Int32)">
            <summary>
            Moves the current record pointer 'n' number of records.
            </summary>
            <param name="records">The number of records to move the record pointer.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MoveFirst">
            <summary>
            Moves the record pointer to the first record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MoveLast">
            <summary>
            Moves the record pointer to the last record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MoveNext">
            <summary>
            Moves the record pointer to the next record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MovePrevious">
            <summary>
            Moves the record pointer to the previous record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.DoMove(UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MoveAction)">
            <summary>
            Actually executes the move method.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.BasicMove(System.Int32)">
            <summary>
            Moves between the rows of the current recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.RDORecordSetHelper_RowChanging(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Method to trigger the row status changed event when an update happens.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnRowStatusChanged">
            <summary>
            Fires event RowStatusChanged.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnRowCurrencyChange">
            <summary>
            Fires event RowCurrencyChange.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnWillUpdateRows(System.Int32@)">
            <summary>
            Fires event WillUpdateRows.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnAssociate">
            <summary>
            Fires event Associate.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnDissociate">
            <summary>
            Fires event Dissociate.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnWillAssociate(System.Data.Common.DbConnection,System.Boolean@)">
            <summary>
            Fires event WillAssociate.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.OnWillDissociate(System.Boolean@)">
            <summary>
            Fires event WillDissociate.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.RowStatusChanged">
            <summary>
            Row Status Changed event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.WillUpdateRows">
            <summary>
            Will Update Rows event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.RowCurrencyChange">
            <summary>
            Row Currency Change event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.WillDissociate">
            <summary>
            Will Dissociate event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.WillAssociate">
            <summary>
            Will Associate event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Dissociate">
            <summary>
            Dissociate event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Associate">
            <summary>
            Associate event
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.ActiveConnection">
            <summary>
            Gets and Set the connection to be used to interact with the database.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.AbsolutePosition">
            <summary>
            Gets and Set the position of the current record on the recordset instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.PercentPosition">
            <summary>
            Gets and Set the percentage of the current position of the total of records retrieved.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.LockType">
            <summary>
            Gets and Set the lock type to be used by the recordset.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Bookmark">
            <summary>
            Bookmark a Data Row
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.Name">
            <summary>
            Gets the first 256 characters of the sql statement used to open the recordset.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.RDO.RDORecordSetHelper.MoveAction">
            <summary>
            Used to handle the common move call.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.StringParameterType">
            <summary>
            String Parameter Type Enum
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.StringParameterType.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.StringParameterType.ConnectionString">
            <summary>
            Connection String
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.DatabaseType">
            <summary>
            Database Type Enum
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DatabaseType.SQLServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DatabaseType.Access">
            <summary>
            MS Access
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.DB.DatabaseType.Undefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.DB.TransactionManager">
            <summary>
            Transaction Manager Class, used to control Database transactions
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.GetTransaction(UpgradeHelpers.VB6.DB.DAO.DAODatabaseHelper)">
            <summary>
            Returns the Transaction object associated to a connection.
            </summary>
            <param name="dbh">The DAODatabaseHelper to get the transaction from.</param>
            <returns>The transaction associated with the parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.GetTransaction(System.Data.Common.DbConnection)">
            <summary>
            Returns the Transaction object associated to a connection.
            </summary>
            <param name="conn">The connection to get the transaction from.</param>
            <returns>The transaction associated with the parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.GetCurrentTransaction(System.Data.Common.DbConnection)">
            <summary>
            Gets the current transaction for the specified connection.
            </summary>
            <param name="conn">The connection to get the transaction from.</param>
            <returns>The transaction associated with the parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.Commit(System.Data.Common.DbConnection)">
            <summary>
            Commits the transaction associated to the specified connection. Once the Commit is performed the transaction is DeEnlisted.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.Rollback(System.Data.Common.DbConnection)">
            <summary>
            Rollbacks the transaction associated to the specified connection. Once the Rollback is performed the connection is DeEnlisted.
            </summary>
            <param name="conn">The connection to get the transaction from.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.Enlist(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Enlists a Transaction in the transaction manager.
            </summary>
            <param name="conn">The connection to create the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.Enlist(System.Data.Common.DbConnection)">
            <summary>
            Enlists a Transaction in the transaction manager.
            </summary>
            <param name="conn">The connection to create the transaction.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.Enlist(System.Data.Common.DbTransaction)">
            <summary>
            Enlists a Transaction in the transaction pool.
            </summary>
            <param name="t">The trancsation to be enlisted.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.DeEnlist(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Removes the Transaction associated to the connection object from the transaction manager.
            </summary>
            <param name="conn">The connection instance associated with the transaction.</param>
            <param name="transaction">The transaction attached to the connection.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.DB.TransactionManager.DeEnlist(System.Data.Common.DbConnection)">
            <summary>
            Removes the Transaction from the transaction manager.
            </summary>
            <param name="connection">The connection to be removed.</param>
        </member>
    </members>
</doc>
