using System;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Reflection;
using System.Diagnostics;
using System.ComponentModel;
using System.Collections;

namespace UpgradeHelpers.VB6.Gui
{
    /// <summary>
    /// The FormHelper contains the missing functionality upgrading VB6.Forms to System.Windows.Forms,
    /// mainly the simulation of Load/Unload functionality provided by VB6 but differently in .NET.
    /// </summary>
    public static class FormsHelper
    {
        /// <summary>
        /// Dictionary that contains the forms already loaded, in addition contains the list of visual controls
        /// for each forms (to be disposed in case of unload).
        /// </summary>
        private static Dictionary<Form, string[]> formsLoaded = new Dictionary<Form, string[]>();

        /// <summary>
        /// Contains all forms being displayed via ShowDialog.
        /// </summary>
        private static List<Form> dialogForms = new List<Form>();

        private static bool invokingClosingEvents = false;

        private static bool hidingDialogForm = false;

        /// <summary>
        /// Attibute used as a flag to mark the Form_Load method as generated by VBUC.
        /// </summary>
        public class LoadAttribute : Attribute
        {
        }

        /// <summary>
        /// Indicates if a form is already loaded into memory.
        /// </summary>
        /// <param name="form">The form to check if it is loaded.</param>
        /// <returns>Returns true if the form is already loaded or false.</returns>
#if TargetF2
        public static bool IsFormLoaded(Form form)
#else
        public static bool IsFormLoaded(this Form form)
#endif
        {
            return formsLoaded.ContainsKey(form);
        }

        /// <summary>
        /// Sets a flag indicating if this form is being loaded or unloaded.
        /// </summary>
        /// <param name="form">The form to set as loaded or unloaded.</param>
        /// <param name="value">True if the form is being loaded or false if it is being unloaded.</param>
#if TargetF2
        public static void SetFormLoaded(Form form, bool value)
#else
        public static void SetFormLoaded(this Form form, bool value)
#endif
        {
            SetFormLoaded(form, value, new string[] { });
        }

        /// <summary>
        /// Sets a flag indicating if this form is being loaded or unloaded.
        /// </summary>
        /// <param name="form">The form to set as loaded or unloaded.</param>
        /// <param name="value">True if the form is being loaded or false if it is being unloaded.</param>
        /// <param name="visualControls">Array of strings containing the names of the visual controls in the form.
        /// Theorically, these controls must be passed when the form is being loaded, to be used when the form is unloaded./// </param>
#if TargetF2
        public static void SetFormLoaded(Form form, bool value, string[] visualControls)
#else
        public static void SetFormLoaded(this Form form, bool value, string[] visualControls)
#endif
        {
            if (value)
            {
                if (formsLoaded.ContainsKey(form))
                {
                    string[] currentVisualCtrls = formsLoaded[form];
                    if (currentVisualCtrls.Length == 0) formsLoaded[form] = visualControls;
                }
                else
                    formsLoaded.Add(form, visualControls);
            }
            else
                if (formsLoaded.ContainsKey(form)) formsLoaded.Remove(form);
        }

        /// <summary>
        /// Executes the load of the form, loading the visual controls and firing the Load event.
        /// </summary>
        /// <param name="form">The form to be loaded.</param>
#if TargetF2
        public static void ExecuteLoad(Form form)
#else
        public static void ExecuteLoad(this Form form)
#endif
        {
            ExecuteLoad(form, true);
        }

        /// <summary>
        /// Executes the load of the form, loading the visual controls and firing the Load event.
        /// </summary>
        /// <param name="form">The form to be loaded.</param>
        /// <param name="executeEvents">Indicates if events must be thrown.</param>
#if TargetF2
        private static void ExecuteLoad(Form form, bool executeEvents)
#else
        private static void ExecuteLoad(this Form form, bool executeEvents)
#endif
        {
            if (!IsFormLoaded(form))
            {
                if (form.Controls.Count == 0)
                {
                    FieldInfo isInitializingComponent = form.GetType().GetField("isInitializingComponent", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    if (isInitializingComponent != null) isInitializingComponent.SetValue(form, true);
                    MethodInfo miInitialize = form.GetType().GetMethod("InitializeComponent", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    Debug.Assert(miInitialize != null, "InitializeComponent method is not found in form: " + form.Name);
                    if (miInitialize != null) miInitialize.Invoke(form, new object[] { });
                    MethodInfo miReLoadForm = form.GetType().GetMethod("ReLoadForm", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    if (miReLoadForm != null) miReLoadForm.Invoke(form, new object[] { true });
                    if (isInitializingComponent != null) isInitializingComponent.SetValue(form, false);
                }
                if (executeEvents)
                {
                    MethodInfo miOnLoad = form.GetType().GetMethod("OnLoad", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    Debug.Assert(miOnLoad != null, "OnLoad method is not found in form: " + form.Name);
                    if (miOnLoad != null) miOnLoad.Invoke(form, new object[] { new EventArgs() });
                }

                MethodInfo miLoadEvent = form.GetType().GetMethod(form.Name + "_Load", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                if (!IsFormLoaded(form) && (miLoadEvent == null || miLoadEvent.GetCustomAttributes(typeof(LoadAttribute), true).GetLength(0) == 0)) // Was not set loaded in Form_Load bc it is missing
                {
                    FieldInfo f = form.GetType().GetField("visualControls", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    SetFormLoaded(form, true, ((string[])f.GetValue(form)));
                }
            }
        }

        /// <summary>
        /// Executes the unload of the form, disposing the visual controls and firing the Closed event.
        /// </summary>
        /// <param name="form">The form to be loaded.</param>
        /// <param name="directFromEvent">Indicates if method is being invoked from Closed event directly.</param>
#if TargetF2
        public static void ExecuteUnLoad(Form form, bool directFromEvent)
#else
        public static void ExecuteUnLoad(this Form form, bool directFromEvent)
#endif
        {
            if (IsFormLoaded(form) && !hidingDialogForm)
            {
                bool cancel = false;
                if (!invokingClosingEvents)
                {
                    invokingClosingEvents = true;
                    MethodInfo miOnFormClosed = form.GetType().GetMethod("OnFormClosing", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    Debug.Assert(miOnFormClosed != null, "OnFormClosing method is not found in form: " + form.Name);
                    FormClosingEventArgs closingEvent = new FormClosingEventArgs(CloseReason.None, false);
                    if (miOnFormClosed != null) miOnFormClosed.Invoke(form, new object[] { closingEvent });
                    cancel = closingEvent.Cancel;
                    if (!cancel && !directFromEvent)
                    {
                        MethodInfo miOnClosed = form.GetType().GetMethod("OnClosing", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                        Debug.Assert(miOnClosed != null, "OnClosing method is not found in form: " + form.Name);
                        if (miOnClosed != null) miOnClosed.Invoke(form, new object[] { new CancelEventArgs() });
                    }
                    invokingClosingEvents = false;
                }
                if (!cancel)
                {
                    string[] visualControls = (formsLoaded.ContainsKey(form) ? formsLoaded[form] : null);
                    if (visualControls != null)
                    {
                        foreach (string visualCtrl in visualControls)
                        {
                            bool isField = true;
                            MemberInfo ctrl = form.GetType().GetField(visualCtrl, BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                            if (ctrl == null)
                            {
                                ctrl = form.GetType().GetProperty(visualCtrl, BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                                isField = false;
                            }
                            Debug.Assert(ctrl != null, "Control " + visualCtrl + " was not found in form: " + form.Name);
                            if (ctrl != null)
                            {
                                // TODO: Dispose is not found
                                MethodInfo miDispose = ctrl.GetType().GetMethod("Dispose", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                                if (miDispose != null) miDispose.Invoke(ctrl, new object[] { });

                                ManageSpecialControls(form, ctrl, isField);

                                if (isField)
                                    ((FieldInfo)ctrl).SetValue(form, null);
                                else
                                    ((PropertyInfo)ctrl).SetValue(form, null, null);
                            }
                        }
                    }
                    RemoveComponents(form);
                    ClearPropertyStoreCollecttion(form);
                    DisposeEvents(form);
                    RemoveOpenForms(form);
                    form.Hide();
                    SetFormLoaded(form, false);
                    if (dialogForms.Contains(form)) dialogForms.Remove(form);
                }
            }
            hidingDialogForm = false;
        }

        /// <summary>
        /// Executes the unload of the form, disposing the visual controls and firing the Closed event.
        /// </summary>
        /// <param name="form">The form to be loaded.</param>
#if TargetF2
        public static void ExecuteUnLoad(Form form)
#else
        public static void ExecuteUnLoad(this Form form)
#endif
        {
            ExecuteUnLoad(form, false);
        }

        /// <summary>
        /// Dispose attached events from Form.
        /// </summary>
        /// <param name="form">The form where the events are attached.</param>
#if TargetF2
        private static void RemoveComponents(Form form)
#else
        private static void RemoveComponents(this Form form)
#endif
        {
            FieldInfo components = form.GetType().GetField("components", BindingFlags.Instance | BindingFlags.NonPublic);
            Debug.Assert(components != null, "components field was not found in form: " + form.Name);
            if (components != null) components.SetValue(form, null);
            try { form.Controls.Clear(); }
            catch (Exception e) { Debug.Write("Error Removing Controls :" + e.Message); };

        }

        /// <summary>
        /// Dispose attached events from Form.
        /// </summary>
        /// <param name="form">The form where the events are attached.</param>
#if TargetF2
        private static void DisposeEvents(Form form)
#else
        private static void DisposeEvents(this Form form)
#endif
        {
            PropertyInfo miEvents = form.GetType().GetProperty("Events", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            if (miEvents != null)
            {
                EventHandlerList evHandlerList = (EventHandlerList)miEvents.GetGetMethod(true).Invoke(form, new object[] { });
                evHandlerList.Dispose();
            }
        }

        /// <summary>
        /// Removes Form from Application.OpenForms collection.
        /// </summary>
        /// <param name="form">The form to be removed.</param>
#if TargetF2
        private static void RemoveOpenForms(Form form)
#else
        private static void RemoveOpenForms(this Form form)
#endif
        {
            ReadOnlyCollectionBase col = Application.OpenForms;
            PropertyInfo list = col.GetType().GetProperty("InnerList", BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
            if (list != null)
            {
                ArrayList array = (ArrayList)list.GetValue(col, null);
                array.Remove(form);
            }
        }

        /// <summary>
        /// Clear some extra memory in forms, stored in Properties and objEntries variables.
        /// </summary>
        /// <param name="form">The form to be cleared.</param>
#if TargetF2
        private static void ClearPropertyStoreCollecttion(Form form)
#else
        private static void ClearPropertyStoreCollecttion(this Form form)
#endif
        {
            Form parentForm = form.MdiParent;
            PropertyInfo properties = form.GetType().GetProperty("Properties", BindingFlags.Instance | BindingFlags.NonPublic);
            if (properties != null)
            {
                object obj = properties.GetValue(form, null);
                if (obj != null)
                {
                    FieldInfo objEntries = obj.GetType().GetField("objEntries", BindingFlags.Instance | BindingFlags.NonPublic);
                    if (objEntries != null) objEntries.SetValue(obj, null);
                }
            }
            form.MdiParent = parentForm;
        }

        /// <summary>
        /// Controls some special circunstancies as disabling Timer.
        /// </summary>
        /// <param name="form">The form being managed.</param>
        /// <param name="ctrl">The control to be managed.</param>
        /// <param name="isField">Indicates if control is a field or property into the form.</param>
        private static void ManageSpecialControls(Form form, MemberInfo ctrl, bool isField)
        {
            Type memberType = (isField ? ((FieldInfo)ctrl).FieldType : ((PropertyInfo)ctrl).PropertyType);
            if (memberType == typeof(Timer))
            {
                Timer aTimer = null;
                if (isField)
                    aTimer = (Timer)((FieldInfo)ctrl).GetValue(form);
                else
                    aTimer = (Timer)((PropertyInfo)ctrl).GetValue(form, null);
                aTimer.Enabled = false;
            }

        }

        /// <summary>
        /// Executes the show for the form, starting to execute the load.
        /// </summary>
        /// <param name="form">The form to be shown.</param>
#if TargetF2
        public static void ExecuteShow(Form form)
#else
        public static void ExecuteShow(this Form form)
#endif
        {
            ExecuteLoad(form, false);
            form.Show();
        }

        /// <summary>
        /// Executes the show for the form, starting to execute the load.
        /// </summary>
        /// <param name="form">The form to be shown.</param>
        /// <param name="Modal">A Microsoft.VisualBasic.Compatibility.VB6.FormShowConstants enumeration that specifies modality.</param>
        /// <param name="OwnerForm">The owner parameter of the System.Windows.Form.ShowDialog() method.</param>
#if TargetF2
        public static void ExecuteShow(Form form, int Modal, Form OwnerForm)
#else
        public static void ExecuteShow(this Form form, int Modal, Form OwnerForm)
#endif
        {
            ExecuteLoad(form, false);
            Microsoft.VisualBasic.Compatibility.VB6.Support.ShowForm(form, Modal, OwnerForm);
        }

        /// <summary>
        /// Executes the show for the form, starting to execute the load.
        /// </summary>
        /// <param name="form">The form to be shown.</param>
        /// <returns>Returns the resultant DialogResult of showing the form.</returns>
#if TargetF2
        public static DialogResult ExecuteShowDialog(Form form)
#else
        public static DialogResult ExecuteShowDialog(this Form form)
#endif
        {
            ExecuteLoad(form, false);
            dialogForms.Add(form);
            return form.ShowDialog();
        }

        /// <summary>
        /// Executes the hide (close) for the form, starting to execute the load.
        /// </summary>
        /// <param name="form">The form to be hidden.</param>
#if TargetF2
        public static void ExecuteHide(Form form)
#else
        public static void ExecuteHide(this Form form)
#endif
        {
            ExecuteLoad(form, false);
            if (dialogForms.Contains(form))
            {
                dialogForms.Remove(form);
                hidingDialogForm = true;
            }
            form.Hide();
        }

        /// <summary>
        /// Indicates if form being unloaded was shown using ExecuteDialog. It must not be unloaded.
        /// </summary>
        /// <param name="form">The form to be requested.</param>
#if TargetF2
        public static bool IsHidingDialogForm(Form form)
#else
        public static bool IsHidingDialogForm(this Form form)
#endif
        {
            bool unloadingDiaglog = hidingDialogForm;
            hidingDialogForm = false;
            return unloadingDiaglog;
        }
    }
}