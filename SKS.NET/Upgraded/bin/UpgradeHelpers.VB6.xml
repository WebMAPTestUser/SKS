<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UpgradeHelpers.VB6</name>
    </assembly>
    <members>
        <member name="T:UpgradeHelpers.VB6.Activex.IComponentServerHelper">
            <summary>
            This interface is used for exposing the ComponsentServeHelper Class thru remoting
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.CreateInstance``1(System.Object,System.Boolean)">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="oldInstance">The instance being freed if it had a referenced instance</param>
            <param name="isExternal">Indicates if instance will be referenced externally</param>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.CreateInstance``1(System.Object)">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="oldInstance">The instance being freed if it had a referenced instance</param>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.CreateInstance``1">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process assuming that there was no previous instance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.DisposeInstance``1(``0)">
            <summary>
            Frees a component instance and checks if Domain/GlobalVars should be initialized
            </summary>
            <param name="instance">The instance to be freed</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.GetDefaultInstance``1">
            <summary>
            Gets the default instance for this type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.IComponentServerHelper.DisposeInstanceByUri(System.String)">
            <summary>
            @todo @developer review if we can merge it with the ReleaseCOM feature
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Activex.IComponentServerHelper.InstancesCount">
            <summary>
            Returns the number of instances managed by this CS
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.MakeNewInstanceDelegate">
            <summary>
            Classes migrated from an ActiveX-Dll or ActiveX-Exe have internal contructors. 
            This is done to make sure that this classes are not instantiated directly.
            Due to this restriction a method is added to the Factory to instantiate 
            classes and that method is "passed" to the ComponentServerImplementations with a delegate of this type.
            </summary>
            <param name="instanceType">The type of the instance you want</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerImplementationType">
            <summary>
            This enumeration is used to specify the kind of implementation that will be used
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerImplementationType.NoDomains">
            <summary>
            Indicates that the implementation used will run in the current domain
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerImplementationType.AppDomains">
            <summary>
            Indicates that the implementation will create new AppDomains to host new SingleUse ActiveX-Exe instances
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerImplementationType.Process">
            <summary>
            Indicates that the implementationwill create new a Process to host new SingleUse ActiveX-Exe instances
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.InitGlobalVarsDelegate">
            <summary>
            Delegate that points to a method, which function is to initialize the global vars to the corresponding module.
            This delegate should be registered (RegisterInitGlobalVarsDelegate) if UseDomain flag is Off
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentClassHelper">
            <summary>
            Marks a class like ComponentClassHelper type, it means this class could be instantiated via the ComponentServerHelper
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentClassHelper.RegisterInitGlobalVarsDelegates">
            <summary>
            Register init global variables delegates
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentSingleUseClassHelper">
            <summary>
            Marks a class like ComponentSingleUseClassHelper type, it means this class could be instantiated via the ComponentServerHelper
            and it behaves like a VB6 SingleUse class. It could be created in a new domain
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.GlbComponentSingleUseClassHelper">
            <summary>
            Marks a class like GlbComponentSingleUseClassHelper type, it means this class could be instantiated via the ComponentServerHelper
            and it behaves like a VB6 GlbSingleUse class. It could be created in a new domain
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerCodes">
            <summary>
            Codes used for ComponentServer manager implementations
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerFactory">
            <summary>
            This factory allows you to choose different 
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.Sponsor">
            <summary>
            Sponsor object used to ping the client from the server to identify remote intances that are no 
            longer needed
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.createdInNewProcess">
            <summary>
            This flag indicates if this factory was created in a Process started from the
            same assembly where the Class was defined
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.timer">
            <summary>
            This timer thread is used to run the LifeTimeCheck clean-up method
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.instanceHasBeenCreated">
            <summary>
            The CS has a worker thread that detects if the CS has no more instances and then kills
            this process. But this thread should not act, until at least one instance has been created.
            This is specially to make sure that it does not gets kill before time.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.deflist_handles">
            <summary>
            Holds a list of the default instances (Global) for each type
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.MakeNewInstance(System.Type)">
            <summary>
            Factories must implement a method that creates new instances.
            </summary>
            <param name="instanceType"></param>
            <returns>A newly created instance</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.InitializeLifetimeService">
            <summary>
            Makes the lifetime for this object unlimited, the component server implementation
            is in charge on managing instances lifetime
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.InitializationCode(System.Boolean)">
            <summary>
            We need to determine if this factory was instanciate from the same assembly that contains
            this factory or if it was instanciate from another assembly.
            This is important becuase it let us know it some Worker Thread must be instanciate to monitor
            ComponentServer 
            This constructor is used to allow to factory to know if it was instanciated 
            inside a new process
            </summary>
            <param name="wasCreatedInThisAssembly"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.#ctor">
            <summary>
            Default Factory Constructor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerFactory.component_server_removal_token">
            <summary>
            This token is used as a flag to indicate that this CS can be removed
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.ClearRemovalToken">
            <summary>
            Clears any remaining removal token
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.LifeTimeCheck(System.Object)">
            <summary>
            This method is called from a Timer Worker thread and it makes sure to remove 
            a CS if it was no more instances.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.InitHelper``1">
            <summary>
            Makes sure that the "helper" variable is initialized.
            </summary>
            <typeparam name="T">The type parameter is used, in case a remote factory is built, because the T type will be used to locate the Assembly that contains it</typeparam>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.CreateInstance``1(System.Object,System.Boolean)">
            <summary>
            Creates a new instance. A reference to an oldinstance can be passed in order to 
            release resources from the previous instance prior to the creation of a new one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldInstance">The instance to be release or null if there isn't any</param>
            <param name="isExternal">Indicates if instance will be referenced externally</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.CreateInstance``1(System.Object)">
            <summary>
            Creates a new instance. A reference to an oldinstance can be passed in order to 
            release resources from the previous instance prior to the creation of a new one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oldInstance">The instance to be release or null if there isn't any</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.CreateInstance``1">
            <summary>
            Creates a new instance
            </summary>
            <typeparam name="T">Type for new intance</typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.ResetFactory">
            <summary>
            This method is used to reset the underlying helper when there
            are no more instances
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.DisposeInstance``1(``0)">
            <summary>
            Releases the given instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns>A value from the ComponentServerCodes enumeration</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.GetDefaultInstance``1">
            <summary>
            Returns the DefaultInstance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.Finalize">
            <summary>
            Destructor for the class Factory
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.DisposeInstanceByUri(System.String)">
            <summary>
            This method is used to release remoting references. When an instance is created thru AppDomains\Process
            a background thread tracks all references and when references are garbage collected, they are released
            identified by the MarshalByRef uri
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.RegisterInitGlobalVarsDelegate(UpgradeHelpers.VB6.Activex.InitGlobalVarsDelegate)">
            <summary>
            Register delegates used for CompenentServer implementations that do not use domains or processes
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.RegisterClientIPCChannel">
            <summary>
            This function must be used in the main of projects that used ActiveX DLL or EXE projects.
            This function will open an unique client channel that is required for events, or callbacks.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.GetProcessInfoByPID(System.Int32,System.String@,System.String@)">
            <summary>
            Helper method used to get the username and domain for a process
            </summary>
            <param name="PID">process id</param>
            <param name="User">this parameter will hold the current user name</param>
            <param name="Domain">this parameter will hold the domain for the current user name</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.ServerMain(System.Type,System.String[])">
            <summary>
            This is generic main that is used for all ActiveX Exe projects. It contains the logic to 
            setup the comunication channels, and client yncronization
            </summary>
            <param name="factoryType"></param>
            <param name="args"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerFactory.FinishStartup(System.Type)">
            <summary>
            This method is added in the Main method for an activeX Exe
            This method sets a sync event that is used to make sure that a client will not a make
            a call to the server when it hasn't finish initializing
            </summary>
            <param name="factoryType"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Activex.ComponentServerFactory.Instance">
            <summary>
            Property to give access to a Factory singlenton
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Activex.ComponentServerFactory.ImplementationType">
            <summary>
            Indicates which implementation to use for this factory
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Activex.ComponentServerFactory.InstancesCount">
            <summary>
            Returns the number of instances managed by this Factory
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ProcessManager">
            <summary>
            When the user request to create a class that is inside an ActiveX project, it is necesary to perform several steps:
            1. Determine in which EXE is the class located
            2. Determine if the .EXE is already running
            3. Start a new process if it is necessary.
            This class encapsultes all this logic
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ProcessManager.LoadAllComponentInfo">
            <summary>
            Loads all .EXE in found in the search path and setups some metadata needed to
            determine the .EXE file that must be started as a new server
            The search path can be specified in the App.Config file.
            just add an entry like:
            <code>
            <configuration>
              <appSettings>
                <add key="PathForComponents" value="C:\TestInfo"/>
              </appSettings>
            </configuration>
            </code>
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ProcessManager.CurrentDomain_ReflectionOnlyAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            We must make sure that the Manager is able to load all required dependencies. 
            As an optimization, only reflection information is loaded. While the reflection information is loaded it
            might happen that some assemblies are not loaded. This method provides some simple aid to find reflection 
            information that was not available
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ProcessManager.GetFactory``1">
            <summary>
            Obtains the factory to instanciate classes migrated from an ActiveX-Dll or an ActiveX-Exe.
            This method will locate the .exe file that contains those classes.
            </summary>
            <typeparam name="T">A class is needed to determine which assembly contains it and start the new process</typeparam>
            <returns>A reference to the factory that can instanciate classes of T type</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ProcessManager.GetSemaphoreValue(System.String,System.Boolean)">
            <summary>
            Semaphores are used to syncronize processes and have a deterministed way of
            getting a named pipe name.
            This is mostly due to limitatios on the Remoting.
            </summary>
            <param name="default_namedpipe">Name for the semaphore</param>
            <param name="doNotIncrement">Indicates that you want to get the semaphone name but you dont want to modify it</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ProcessManager.StartProcess(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Starts the process and makes sure that it is syncronizeds
            </summary>
            <param name="pathForComponentEXE">Path for the .EXE file that will be started</param>
            <param name="processName">The process name is used for syncronization</param>
            <param name="semValue"> When a process is created a semaphore is used for syncronization issues between server and client. The semValue is then used to create a syncEvent</param>
            <param name="arguments"> Arguments to be passed to start the process</param>
            <returns>The Process that has just been started</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1">
            <summary>
            This is a base implementation for supporting the VB6 behaviour of classes contained inside ActiveX-Dll and ActiveX-exe projects.
            </summary>
            <typeparam name="X">This is the class that will be used to provide a .NET equivalent of process</typeparam>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.InitializeLifetimeService">
            <summary>
            Makes the lifetime for this object unlimited
            </summary>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.instances">
            <summary>
            Works like a references count, storing the all instances created for the component
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.useProcess">
            <summary>
            Indicates if ComponentServerHelper works using Processs or just a simple ClassFactory
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.mainProcess">
            <summary>
            The first and Main Process or Domain loaded
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.curProcess">
            <summary>
            The last Process or Domain loaded
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstanceInMainProcess``1">
            <summary>
            Creates an instance of T in Main Domain
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstanceInAvailableProcess``1">
            <summary>
            Searches a Domain without a specific class type (SingleUse/GlbSingleUse) where to create the type, else
            it is created in a new Domain
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstanceInNewProcess``1">
            <summary>
            Creates an instance of T in a New Domain
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstanceInProcess``1(`0)">
            <summary>
            Creates instance "inside" the given "Process" space.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="curProcess"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateNewProcess``1">
            <summary>
            Creates a new process in which a new instance of type T could be create and returns the process object for manipulation
            </summary>
            <typeparam name="T">Type of instance that needs a new process</typeparam>
            <returns>A "Process" object</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstanceNoProcess``1">
            <summary>
            Creates an instance of T in the addresses space of the main application
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.UpdateCurrentProcess">
            <summary>
            Updates the curProcess variable holding a reference to the current AppDomain/Process
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.RegisterInitGlobalVarsDelegate(UpgradeHelpers.VB6.Activex.InitGlobalVarsDelegate)">
            <summary>
            Registers a InitGlobalVarsDelegate to be invoked when all component references are free.
            This method is invoked to each created instance just if UseDomain is false.
            </summary>
            <param name="del">The delegate to be registered</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.GetProcessToCreate``1">
            <summary>
            Looks for a Process to create a specific (SingleUse/GlbSingleUse) type
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>The Process where to create the type or null if all Process have the specific type</returns>
            
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.FindInstance``1(``0)">
            <summary>
            Finds an instance in ComponentServer and returns it
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="instance">The instance to be found</param>
            <returns>The instance if it was found or a new instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.InstanceIsCreated(System.Object)">
            <summary>
            Looks for an instance in instances Dictionary
            </summary>
            <param name="instance">The instance to be found</param>
            <returns>True if instance is found</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.InstanceIsCreated(System.Object,`0@)">
            <summary>
            Looks for an instance in instances Dictionary
            </summary>
            <param name="instance">The instance to be found</param>
            <param name="theProcess">The process where the instance was found</param>
            <returns>True if instance is found</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.AddInstance(`0,System.Object,System.Boolean)">
            <summary>
            Adds the instance in the instances Dictionary related to its corresponding Process
            </summary>
            <param name="aProcess">The Process where the instance was created</param>
            <param name="instance">The instance to be added</param>
            <param name="isExternal">Indicates if instances is being referenced externally</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.RemoveInstance(System.Object)">
            <summary>
            Removes the instance from the instances Dictionary
            </summary>
            <param name="instance">The instance to be removed</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CleanChannelsInfo(`0)">
            <summary>
            @todo
            </summary>
            <param name="aProcess"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.RemoveInstanceFromProcess(System.Object,`0)">
            <summary>
            @todo
            </summary>
            <param name="instance"></param>
            <param name="aProcess"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.GetDefaultInstance``1">
            <summary>
            Global classes in VB6 are very similar to a default instance concept.
            So everytime the original code had a default instance it is change for a call to this method.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstance``1">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstance``1(System.Object,System.Boolean)">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="oldInstance">The instance being freed if it had a referenced instance</param>
            <param name="isExternal">Indicates if this instance will be referenced externally</param>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CreateInstance``1(System.Object)">
            <summary>
            Creates an instance of T in the corresponding space of memory or Process
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="oldInstance">The instance being freed if it had a referenced instance</param>
            <returns>An instance of type T</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.DisposeInstance``1(``0)">
            <summary>
            Frees a component instance and checks if Domain/GlobalVars should be initialized
            </summary>
            <param name="instance">The instance to be freed</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.CheckServerStatus">
            <summary>
            Checks if this server is still needed, if not, 
            this process is marked for elimination
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.DisposeInstanceByUri(System.String)">
            <summary>
            @todo
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.DestroyProcess(`0)">
            <summary>
            Kills a "Process" object
            </summary>
            <param name="aProcess">The "process" that will be destroyed</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.GetCurrentProcess">
            <summary>
            Returns the "Process" object where the code is currently running
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.InitializeGlobalVarsIfNeeded">
            <summary>
            One of the possible implementations for ActiveX-Dll and ActiveX-Exe can be to migrate the classes
            as close as posible to standard .NET classes. However the instancing behaviour of VB6 requires that when all instances
            of classes of an activex-exe are removed that global vars have to be reset to their original values.
            To reproduce that behaviour, a list of delegates can be kept to reset those variables.
            The default implementation does nothing of this.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.RegisterFactoryDelegate(UpgradeHelpers.VB6.Activex.MakeNewInstanceDelegate)">
            <summary>
            @TODO @remove
            </summary>
            <param name="theDelegate"></param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperBase`1.InstancesDictionary.instances">
            <summary>
            Works like a references count, storing the all instances created for the component
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation">
            <summary>
            This implementation extends the ComponentServerHelper using System.Diagnostics.Process to represent the "Process" concept.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.portForProcess">
            <summary>
            Keeps a map of the process Name + process.Id to the Guid that 
            identifies the IPC port to comunicate with the remoting process
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.#ctor(UpgradeHelpers.VB6.Activex.ComponentServerFactory)">
            <summary>
            Default contructor. Initializes several data tables, like instances, remoting ports, main and current process.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.DisposeInstance``1(``0)">
            <summary>
            Dispose an instance
            </summary>
            <typeparam name="T">Type of the instance to dispose</typeparam>
            <param name="instance">Instance to dispose</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.CreateInstanceInProcess``1(System.Diagnostics.Process)">
            <summary>
            Creates instance "inside" a Process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="curProcess"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.RemoveInstanceFromProcess(System.Object,System.Diagnostics.Process)">
            <summary>
            Removes an instance from an specific process
            </summary>
            <param name="instance">Instance to remove</param>
            <param name="aProcess">Process that we must contact to remove given instance</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.UpdateCurrentProcess">
            <summary>
            Updates the curProcess variable holding a reference to the current Process
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.CreateNewProcess``1">
            <summary>
            Creates a new process that will hold an instance of T type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.DestroyProcess(System.Diagnostics.Process)">
            <summary>
            @TODO
            </summary>
            <param name="mainProcess"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperProcessImplementation.GetCurrentProcess">
            <summary>
            @TODO
            </summary>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation">
            <summary>
            This implementation extends the ComponentServerHelper using AppDomain to represent the "Process" concept.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.UpdateCurrentProcess">
            <summary>
            Updates local variable setting the current Domain
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.initGlobalVarsDels">
            <summary>
            Contains the InitGlobalVarsDelegate's invoked when all references of this component were freed
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.InitializeGlobalVarsIfNeeded``1">
            <summary>
            Overrides base method providing an implementation that will reset global vars when needed.
            </summary>
            <typeparam name="AppDomain"></typeparam>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.RegisterInitGlobalVarsDelegate(UpgradeHelpers.VB6.Activex.InitGlobalVarsDelegate)">
            <summary>
            Registers a InitGlobalVarsDelegate to be invoked when all component references are freed.
            This method is invoked to each created instance just if UseDomain is false.
            </summary>
            <param name="del">The delegate to be registered</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.CreateInstanceInProcess``1(System.AppDomain)">
            <summary>
            Creates instance in the given domain and returns the unWrapped reference
            </summary>
            <param name="curDomain"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.CreateNewProcess``1">
            <summary>
            Creates a new AppDomain that can be used to hold new references of T Type
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A new AppDomain where new instances can be created</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.DestroyProcess(System.AppDomain)">
            <summary>
            @todo
            </summary>
            <param name="mainProcess"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.GetCurrentProcess">
            <summary>
            @todo
            </summary>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation._instance">
            <summary>
            Singleton storing the ComponentServerHelper instance
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.GetInstance(UpgradeHelpers.VB6.Activex.ComponentServerFactory)">
            <summary>
            Obtains the singleton instance of the ComponentServerHelper
            </summary>
            <returns>The singleton instance of the ComponentServerHelper</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.GetInstance(UpgradeHelpers.VB6.Activex.ComponentServerFactory,System.Boolean)">
            <summary>
            Obtains the singleton instance of the ComponentServerHelper
            </summary>
            <param name="useProcessValue">Indicates if the ComponentServerHelper should handle Processs or just works like a ClassFactory</param>
            <param name="factory">When this helper is created it requires a factory reference because factories are needed to create new instances of any time </param>
            <returns>The singleton instance of the ComponentServerHelper</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ComponentServerHelperAppDomainImplementation.RemoveInstanceFromProcess(System.Object,System.AppDomain)">
            <summary>
            @todo
            </summary>
            <param name="instance"></param>
            <param name="aDomain"></param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.ClientSponsor">
            <summary>
            Class used to ping the client that created instances of a Component Server.
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ClientSponsor.Ping">
            <summary>
            Pings the client to find out if it is still running. 
            </summary>
            <returns>Always returns true. 
            The client can be considered dead if a call to Ping throws a RemotingException.
            </returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.ClientSponsor.InitializeLifetimeService">
            <summary>
            Return null so the object's life will never expire
            </summary>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Activex.MSXMLHelper">
            <summary>
            This class implements support for common functionality provided by VB6 MSXML
            class members provide support to interact with an xml document
            setting or retrieving information to/from an xml document;
            applying specific transformation (XSLT) to an xml document.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.CommonTransformation(System.Xml.XmlNode,System.Xml.XmlNode,System.IO.Stream)">
            <summary>Transforms the XML data using the specified XSLT stylesheet, applies it using the provided memory stream.</summary>
            <param name="Node">The XmlNode that contains the XML data to be transformed.</param>
            <param name="Stylesheet">The XSLT stylesheet to be used.</param>
            <param name="theStream">The memory stream to be used.</param>
            <returns>Returns the string representation of the transformation.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.TransformNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>Transforms the XML data using the specified XSLT stylesheet.</summary>
            <param name="Node">The XmlNode that contains the XML data to be transformed.</param>
            <param name="Stylesheet">The XSLT stylesheet to be used.</param>
            <returns>Returns the string representation of the transformation.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.TransformNodeToObject(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>Transforms the XML data using the specified XSLT stylesheet.</summary>
            <param name="Node">The XmlNode that contains the XML data to be transformed.</param>
            <param name="Stylesheet">The XSLT stylesheet to be used.</param>
            <param name="Output">The XmlNode used to return the transformation.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.TransformNodeToObject(System.Xml.XmlNode,System.Xml.XmlNode,System.IO.Stream@)">
            <summary>Transforms the XML data using the specified XSLT stylesheet.</summary>
            <param name="Node">The XmlNode that contains the XML data to be transformed.</param>
            <param name="Stylesheet">The XSLT stylesheet to be used.</param>
            <param name="Output">The Stream used to return the transformation.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.GetNodeTypedValue(System.Xml.XmlNode)">
            <summary>Obtains a typed node value from the specified XmlNode.</summary>
            <param name="node">The XmlNode that contains the XML data.</param>
            <returns>Returns the typed node value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.SetNodeTypedValue(System.Xml.XmlNode@,System.Object)">
            <summary>Sets the specified XmlNode with the specified typed value.</summary>
            <param name="node">The XmlNode.</param>
            <param name="value">The typed node value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.SetDataType(System.Xml.XmlNode@,System.String)">
            <summary>Sets the specified data type value to the specified node.</summary>
            <param name="node">The XmlNode.</param>
            <param name="value">The data type.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Activex.MSXMLHelper.GetDataType(System.Xml.XmlNode)">
            <summary>Gets the specified data type value from the specified node.</summary>
            <param name="node">The XmlNode.</param>
            <returns>Returns the node data type value.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ActivateHelper">
            <summary>
            Holds the static field 'myActiveForm' to be used in Activate and Activated event declarations
            when MDI forms are being used in the original project.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ActivateHelper.myActiveForm">
            <summary>
            References the active form when MDI forms are being used to reproduce the same behavior as in VB6 in activation events.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.BarsNet">
            <summary>
            Control that shows a group of lines along the size of the control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.BarsNet.#ctor">
            <summary>
            Creates a new Bars control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.BarsNet.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control on the screen
            </summary>
            <param name="e">The context to paint</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.BarsNet.LineBorderStyle">
            <summary>
            The lines style.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.BarsNet.SpaceBetweenLines">
            <summary>
            Vertical separation space between the lines.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper">
            <summary>
            ComboBoxHelper adds functionality to .NET ComboBox using multiple columns;
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.AddItem(System.String)">
            <summary>
            Adds an item to the combo
            </summary>
            <param name="Item">value of item to add</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.AddItem(System.String,System.Int32)">
            <summary>
            Adds an item to the combo as index position
            </summary>
            <param name="Item">value of item to add</param>
            <param name="Index">Index position</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.RemoveItem(System.Int32)">
            <summary>
            Remove item as index specified
            </summary>
            <param name="index">index to be removed</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ListWidth">
            <summary>
            Gets or sets the width of the drop-down list in the combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Action">
            <summary>
             Sets or returns a value that designates an action, such as inserting a column or deleting a row.
            </summary> 
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Columns">
            <summary>
              Sets or returns the number of columns to display in a ComboBox.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Row">
            <summary>
            Sets or returns a row in an fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.InsertRow">
            <summary>
            Sets whether to insert a new item or row of text in the list of an fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Clicked">
            <summary>
            Handles if ComboBox was clicked.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColHide">
            <summary>
            Sets or returns whether to hide a column in a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Col">
            <summary>
            Sets or returns the index number of a column in an fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColWidth">
            <summary>
            Get/Set widths for each column to display
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColSortSeq">
            <summary>
            Sets or returns the order in which a column in a multiple-column fpCombo or fpList control is sorted.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColText">
            <summary>
            Sets or returns the selected row's column value displayed in a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnEdit">
            <summary>
            Sets or returns whether one column value or all column values are displayed in the edit field of a multiple-column fpCombo control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnSearch">
            <summary>
             Sets or returns the number of the column searched when searching a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnSeparatorChar">
            <summary>
            Sets or returns the character used to separate column values in a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScale">
            <summary>
            Sets or returns the measurement unit used to specify column and group widths in a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColSorted">
            <summary>
             Sets or returns the type of sort performed on a column in a multiple-column fpCombo or fpList control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ListCount">
            <summary>
            Return number of rows inside the Combo.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ListIndex">
            <summary>
            Get/Set List Index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Item(System.Int32)">
            <summary>
            Access Item inside ComboBox Items
            </summary>
            <param name="index">index to search</param>
            <returns>value inside the list</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchIndex">
            <summary>
            Search Index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchText">
            <summary>
            Search for text
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchMethod">
            <summary>
            Search Method
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Sorted">
            <summary>
            Sort for items in the Combo
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Comparer">
            <summary>
            Combo List comparer class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Comparer.#ctor(System.Char,System.Int32)">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Comparer.#ctor(System.Char,System.Int32[],UpgradeHelpers.VB6.Gui.ComboBoxHelper.SortedConstants[],System.Int32)">
            <summary>
            Comparer using the sorts by columns and specify method
            </summary>
            <param name="charSeparator">separator</param>
            <param name="sorts">list of columns to use for sorting</param>
            <param name="sorted">method on each column to sort</param>
            <param name="columns">number of columns in the list</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Comparer.Sorted">
            <summary>
            Sort direction
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ComboBoxHelper.Comparer.Column">
            <summary>
            Column to use for sorting or -1 to use whole row
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchMethodConstants">
            <summary>
            SearchMethod
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchMethodConstants.SearchMethodExactMatch">
            <summary>
            Exact Match
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchMethodConstants.SearchMethodGreaterOrEqual">
            <summary>
            Greater or Equal
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SearchMethodConstants.SearchMethodPartialMatch">
            <summary>
            Partial match
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SortedConstants">
            <summary>
            SortedConstants
            </summary>
            
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SortedConstants.SortedAscending">
            <summary>
            Sorted Ascending
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SortedConstants.SortedDescending">
            <summary>
            Sorted Descending
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.SortedConstants.SortedNone">
            <summary>
            Sorted None
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScaleConstants">
            <summary>
            ColumnWidthScaleConstants 
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScaleConstants.ColumnWidthScaleAvgCharWidth">
            <summary>
             Avg Char Width
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScaleConstants.ColumnWidthScaleMaxCharWidth">
            <summary>
             Max Char Width
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScaleConstants.ColumnWidthScalePixels">
            <summary>
            Pixels
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ColumnWidthScaleConstants.ColumnWidthScaleTwips">
            <summary>
            Twips
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants">
            <summary>
            Enum enumAction
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionClear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionClearSearchBuffer">
            <summary>
            Clear Search Buffer
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionCloneCol">
            <summary>
            Clone Col
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionDeleteCol">
            <summary>
            Delete Col
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionDeleteGroup">
            <summary>
            Delete Group
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionDeleteRow">
            <summary>
            Delete Row
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionDeselectAll">
            <summary>
            Deselect All
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionForceUpdate">
            <summary>
            Force Update
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionInsertCol">
            <summary>
            Insert Col
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionInsertGroup">
            <summary>
            Insert Group
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionSearch">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionSelectAll">
            <summary>
            Select All
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ComboBoxHelper.ActionConstants.ActionVirtualRefresh">
            <summary>
            Virtual Refresh
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.CommandButtonHelper">
            <summary>
            Extender Provider for handling CommandButton properties which are not present in .NET buttons.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor with container.
            </summary>
            <param name="container">The container where the button is included.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.CommandButtonHelper.objLockEvents">
            <summary>
            Variables for the management of the property DownPicture.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Styles">
            <summary>
            Variable for the management of the property Style.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetDisabledPicture(System.Windows.Forms.Button)">
            <summary>
            Instance - Gets the disabled picture bound to this button.
            </summary>
            <param name="button">The button bound to the disabled picture.</param>
            <returns>The image bound for disable picture of this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetDisabledPicture(System.Windows.Forms.Button,System.Drawing.Image)">
            <summary>
            Instance - Sets the disabled picture for a button.
            </summary>
            <param name="button">The button to bind the disabled picture.</param>
            <param name="image">The iamge to use as disable picture.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetDownPicture(System.Windows.Forms.Button)">
            <summary>
            Instance - Gets the down picture bound to this button.
            </summary>
            <param name="button">The button bound to the down picture.</param>
            <returns>The image bound for down picture of this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetDownPicture(System.Windows.Forms.Button,System.Drawing.Image)">
            <summary>
            Instance - Sets the down picture for a button.
            </summary>
            <param name="button">The button to bind the down picture.</param>
            <param name="image">The image to use as down picture.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetStyle(System.Windows.Forms.Button)">
            <summary>
            Instance - Gets the current value of the property Style.
            </summary>
            <param name="button">The button to get the property.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetStyle(System.Windows.Forms.Button,System.Int32)">
            <summary>
            Instance - Sets the value of the property Style.
            </summary>
            <param name="button">The button to set the property.</param>
            <param name="style">The style to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetMaskColor(System.Windows.Forms.Button)">
            <summary>
            Instance - Gets the property MaskColor for the button.
            </summary>
            <param name="button">The button.</param>
            <returns>The current MaskColor for this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetMaskColor(System.Windows.Forms.Button,System.Drawing.Color)">
            <summary>
            Instance - Sets the property MaskColor for the button.
            </summary>
            <param name="button">The button.</param>
            <param name="maskColor">The new value for MaskColor of this button.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetCorrectEventsBehavior(System.Windows.Forms.Button)">
            <summary>
            Gets property for CorrectEventsBehavior property.
            </summary>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetCorrectEventsBehavior(System.Windows.Forms.Button,System.Boolean)">
            <summary>
            Sets property for CorrectEventsBehavior property.
            </summary>
            <param name="btn"></param>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CheckForProperty(System.Windows.Forms.Button,UpgradeHelpers.VB6.Gui.CommandButtonHelper.newPropertiesEnum)">
            <summary>
            Check if the property 'newPropertiesEnum' is already defined for this button.
            </summary>
            <param name="btn">The button.</param>
            <param name="prop">newPropertiesEnum</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetDefaultValueForProperty(UpgradeHelpers.VB6.Gui.CommandButtonHelper.newPropertiesEnum)">
            <summary>
            Returns a default value for the specified property.
            </summary>
            <param name="prop">The property requesting a default value.</param>
            <returns>A default value casted as object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CheckNewProperties(System.Windows.Forms.Button)">
            <summary>
            Checks if the btn is controlled by the newProperties Dictionary.
            </summary>
            <param name="btn">The button</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetDisabledPictureProperty(System.Windows.Forms.Button)">
            <summary>
            Static - Gets the disabled picture bound to this button.
            </summary>
            <param name="button">The button bound to the disabled picture.</param>
            <returns>The image bound for disable picture of this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetDisabledPictureProperty(System.Windows.Forms.Button,System.Drawing.Image)">
            <summary>
            Static - Sets the disabled picture for a button.
            </summary>
            <param name="button">The button to bind the disabled picture.</param>
            <param name="image">The image to use as disable picture.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetDownPictureProperty(System.Windows.Forms.Button)">
            <summary>
            Static - Gets the down picture bound to this button.
            </summary>
            <param name="button">The button bound to the down picture.</param>
            <returns>The image bound for down picture of this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetDownPictureProperty(System.Windows.Forms.Button,System.Drawing.Image)">
            <summary>
            Static - Sets the down picture for a button.
            </summary>
            <param name="button">The button to bind the down picture.</param>
            <param name="image">The image to use as down picture.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetStyleProperty(System.Windows.Forms.Button)">
            <summary>
            Static - Gets the current value of the property Style.
            </summary>
            <param name="button">The button to get the property.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetStyleProperty(System.Windows.Forms.Button,System.Int32)">
            <summary>
            Static - Sets the value of the property Style.
            </summary>
            <param name="button">The button to set the property.</param>
            <param name="style">The style to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetStyleProperty(System.Boolean,System.Windows.Forms.Button,System.Int32)">
            <summary>
            Static - Sets the value of the property Style.
            </summary>
            <param name="DesignMode">To indicate if the operation is done in design mode.</param>
            <param name="button">The button to set the property.</param>
            <param name="style">The style to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.GetMaskColorProperty(System.Windows.Forms.Button)">
            <summary>
            Static - Gets the property MaskColor for the button.
            </summary>
            <param name="button">The button.</param>
            <returns>The current MaskColor for this button.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.SetMaskColorProperty(System.Windows.Forms.Button,System.Drawing.Color)">
            <summary>
            Static - Sets the property MaskColor for the button.
            </summary>
            <param name="button">The button.</param>
            <param name="maskColor">The new value for MaskColor of this button.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Button_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event management so when the style is set to 0 and the button has a graphic, 
            this is not displayed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Button_EnabledChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler to change the current button image when the button is enabled or disabled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Button_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler to change the current button image for the down picture.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Button_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler to change back to the original button image.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.BeginInit">
             <summary>
            Signals the object that initialization is starting.
             </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.EndInit">
             <summary>
            Signals the object that initialization is complete.
             </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CleanDeadReferences">
            <summary>
            It will clean the internal dictionaries from old references of buttons already disposed.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CorrectEventsBehavior">
            <summary>
            Deattach some events for the buttons in order to be managed internally.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.CorretEventsForButton(System.Windows.Forms.Button)">
            <summary>
            Patches the events for a specific button.
            </summary>
            <param name="btn"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Button_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Click event of a Button.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.InvokeEvents(System.Windows.Forms.Button,System.String,System.Object[])">
            <summary>
            Allows to invoke the patched events for a Button.
            </summary>
            <param name="source"></param>
            <param name="eventName"></param>
            <param name="args"></param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.CommandButtonHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.CommandButtonHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ContainerHelper">
            <summary>
            It is very common in VB6 to implement algorithms that tranverse the Controls collection
            for a Form or UserControl.
            During migration some issues appear in the target platform because the controls collection
            in .NET is not flat but hierarquical.
            This issue will break a lot of the original logic, that assumes that all controls present in the 
            Form or UserControl will be present in one big collection.
            This Helper Class provides several methods that allows to traverse the .NET components collections
            in an easy and direct way, just as it was possible in VB6.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.Controls(System.Windows.Forms.Control)">
            <summary>
            Returns the NestedControlEnumerator for the control
            </summary>
            <param name="control">used to get the NestedControlEnumerator</param>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ContainerHelper.EventSubscribersCache">
            <summary>
            A structure to store the list of events for an object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.GetEventSubscribers(System.Object,System.String)">
            <summary>
            Gets the delegates bound to an event in an object.
            </summary>
            <param name="Target">The object.</param>
            <param name="EventName">The event name.</param>
            <returns>Null if no delegates or event were found.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.AddListOfEventsToChache(System.Object,System.String,System.Delegate[])">
            <summary>
            Method to add a list of events to the cache.
            </summary>
            <param name="target">The object target to use as key.</param>
            <param name="EventName">The name of the event.</param>
            <param name="delList">The list of event handlers.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.Component_Disposed(System.Object,System.EventArgs)">
            <summary>
            Event handler release resources when a component is disposed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.GetControlIndex(System.Object)">
            <summary>
             This method is obsolete, use ControlArrayHelper instead.
            </summary>
            <param name="controlObject"></param>
            <returns></returns>
             <see cref="T:UpgradeHelpers.VB6.Gui.ControlArrayHelper"/>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.LoadControl(System.Windows.Forms.Form,System.String,System.Int32)">
            <summary>
             This method is obsolete, use ControlArrayHelper instead.
            </summary>
            <param name="formContainer"></param>
            <param name="controlName"></param>
            <param name="index"></param>
             <see cref="T:UpgradeHelpers.VB6.Gui.ControlArrayHelper"/>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.UnloadControl(System.Object)">
            <summary>
             This method is obsolete, use ControlArrayHelper instead.
            </summary>
            <param name="objectToUnload"></param>
             <see cref="T:UpgradeHelpers.VB6.Gui.ControlArrayHelper"/>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.UnloadControl(System.Windows.Forms.Form,System.String,System.Int32)">
            <summary>
             This method is obsolete, use ControlArrayHelper instead.
            </summary>
            <param name="formContainer"></param>
            <param name="controlName"></param>
            <param name="index"></param>
             <see cref="T:UpgradeHelpers.VB6.Gui.ControlArrayHelper"/>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray">
            <summary>
            .NET does not implement the VB6 concept of controls arrays.
            During migration these arrays are generated as Arrays of Controls, but
            these arrays are not Controls. So they are not present in the Controls collections of a Form or UserControl.
            So to perform things like: <br></br>
            <code>
            Form1.Controls("MyTextBoxControlArray")
            </code>
            A class that will be able to "wrap" the array of controls and make it "behave" like a Control.
            and gives access to those elements.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.controlArray">
            <summary>
            A reference to the actual array.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.#ctor(System.Windows.Forms.Control[])">
            <summary>
            Builds a ControlArray object that will "wrap" the specified array, to make it be "seen" as a Control.
            </summary>
            <param name="controlArray">The control array that will be wrapped.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.#ctor(System.Array)">
            <summary>
            Builds a ControlArray object that will "wrap" the specified array, to make it be "seen" as a Control.
            This overload is used when the Control Array has a different type. 
            Supported array types are:
            * Control
            * ToolStripItem
            * MenuStrip
            </summary>
            <exception cref="T:System.InvalidCastException">Thrown when an array with unsupported type is used.</exception>
            <param name="ctrlArray">The control array that will be wrapped.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.Item(System.Int32)">
            <summary>
            Returns the Control at the specified index position.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.Item(System.Double)">
            <summary>
            Returns the Control at the specified index position.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.ControlArray.Length">
            <summary>
            Returns the Length of the subyacent array.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl">
            <summary>
            VB6 Menus are migrated to classes of the ToolStripItems objects.
            .NET menus are not Controls like in VB6.
            To iterate thru the collection of menu items we must "wrap" all the items.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.menuItem">
            <summary>
            Internal reference to the menuItems or mainMenu.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.mainMenu">
            <summary>
            Variable to hold the reference to main menu element.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.op_Explicit(UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl)~System.Windows.Forms.MenuStrip">
            <summary>
            Overriding of casting operations.
            </summary>
            <param name="item"></param>
            <exception cref="T:System.Exception">Throw if the MenuStrip property is NULL.</exception>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.op_Explicit(UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl)~System.Windows.Forms.ToolStripItem">
            <summary>
            Implements a casting operator to unwrap the ToolStripItem.
            </summary>
            <exception cref="T:System.Exception">Throw if contained menuitem is null.</exception>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.op_Explicit(System.Windows.Forms.MenuStrip)~UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl">
            <summary>
            Implements a casting operator to wrap MenuStrip inside MenuItemControl instance.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.op_Explicit(System.Windows.Forms.ToolStripItem)~UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl">
            <summary>
            Implements a casting operator to wrap ToolStripItem inside a MenuItemControl instance.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.#ctor(System.Windows.Forms.MenuStrip)">
            <summary>
            Constructs a new instance wrapping a MenuStrip item inside of it.
            </summary>
            <param name="mainMenu">The MenuStrip item to wrap.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
            Constructs a new instance wrapping a ToolStripItem inside of it.
            </summary>
            <param name="menuItem">The ToolStripItem to wrap.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.InitializeProperties">
            <summary>
            Takes care of initialize some of the properties of the base control class with 
            the contained instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AddEventHandlers">
            <summary>
            Adds some eventHandlers of the base control class to track when some properties values 
            have been changed, specifically the Visible and Enable properties.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MenuItemControl_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Event Handler to handle changes to the visible property.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MenuItemControl_EnabledChanged(System.Object,System.EventArgs)">
            <summary>
            Event Handler to handle changes to the enable property.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BeginInvoke(System.Delegate)">
            <summary>
            sets the Begin Invoke method
            </summary>
            <param name="method">pointer to method to call</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            sets the Begin Invoke method
            </summary>
            <param name="method">pointer to method to call</param>
            <param name="args">array of parameters to use</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BringToFront">
            <summary>
            If the internal object is a MenuStrip, it calls the BringToFront method.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Contains(System.Windows.Forms.Control)">
            <summary>
            Not suppported.
            </summary>
            <param name="ctl"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Throws an exception indicating that it is not supported.</exception>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CreateControl">
            <summary>
            Creates Control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CreateGraphics">
            <summary>
            Creates Graphics
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            Do Drag and Drop use data object and effects
            </summary>
            <param name="data">data object</param>
            <param name="allowedEffects">DragDropEffects enum</param>
            <returns>Exception in case is not set the main menu or menu item</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Draws a bitmap in the Rectagle target position
            </summary>
            <param name="bitmap">pointer to bitmap</param>
            <param name="targetBounds">Rectangle position values</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.EndInvoke(System.IAsyncResult)">
            <summary>
            Call End Invoke method
            </summary>
            <param name="asyncResult">use the IAsyncResult parameter</param>
            <returns>returns object</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.FindForm">
            <summary>
            Finds the Form
            </summary>
            <returns>Form found</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Focus">
            <summary>
            Sets the Focus
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.FromChildHandle(System.IntPtr)">
            <summary>
            Retrieves the control that has the specific handle
            </summary>
            <param name="handle">The window handle (HWND) to search for</param>
            <returns>Control</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.FromHandle(System.IntPtr)">
            <summary>
            Returns the control that is associated to the specified handle
            </summary>
            <param name="handle">The window handle (HWND) to search for</param>
            <returns>Control</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.GetChildAtPoint(System.Drawing.Point)">
            <summary>
            It's not supported.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)">
            <summary>
            It's not supported
            </summary>
            <param name="pt"></param>
            <param name="skipValue"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.GetContainerControl">
            <summary>
            Gets Parent control
            </summary>
            <returns>Control</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.GetNextControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Gets Next or Back Control in the tab order
            </summary>
            <param name="ctl">Control to start the search</param>
            <param name="forward">Next or Back</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted
            </summary>
            <param name="proposedSize">custom size area</param>
            <returns>Returns size used</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Hide">
            <summary>
            Hides the control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate">
            <summary>
            Invalidates the specified region of the control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate(System.Boolean)">
            <summary>
            Invalidates the specified region of the control
            </summary>
            <param name="invalidateChildren">bool</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the control
            </summary>
            <param name="rc">Use Rectangle area</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate(System.Drawing.Region)">
            <summary>
            Invalidates the specified region of the control
            </summary>
            <param name="region">use the Region area</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the specified region of the control
            </summary>
            <param name="rc">use the Rectangle Area</param>
            <param name="invalidateChildren">invalidates children too?</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Invalidates the specified region of the control
            </summary>
            <param name="region">use the Region area</param>
            <param name="invalidateChildren">invalidates children too?</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invoke(System.Delegate)">
            <summary>
            Execute the specified delegate method
            </summary>
            <param name="method">a delegate method to call in the control context</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Invoke(System.Delegate,System.Object[])">
            <summary>
            Execute the specified method with the parameters
            </summary>
            <param name="method">a delegate method to call in the control context</param>
            <param name="args">use the array of arguments</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsKeyLocked(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyVal">Determines whether the CAPS LOCK, NUM LOCK or SCROLL LOCK key is in effect</param>
            <returns>true if is in effect</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsMnemonic(System.Char,System.String)">
            <summary>
            Is mnemonic the charcode for the control in the specified text
            </summary>
            <param name="charCode">char code to look up</param>
            <param name="text">specified text</param>
            <returns>true if is mnemonic</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PerformLayout">
            <summary>
            Force to perform layout logic and it's children too.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PerformLayout(System.Windows.Forms.Control,System.String)">
            <summary>
            Force to perform layout logic and it's children too.
            </summary>
            <param name="affectedControl">Control recently changed</param>
            <param name="affectedProperty">Name of the control</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PointToClient(System.Drawing.Point)">
            <summary>
            Computes the location of the specified screen
            </summary>
            <param name="p">Screen coordinate to convert</param>
            <returns>the new Point</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PointToScreen(System.Drawing.Point)">
            <summary>
            Computes the location of the specified screen
            </summary>
            <param name="p">Point to convert</param>
            <returns>new Point</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PreProcessControlMessage(System.Windows.Forms.Message@)">
            <summary>
            Preprocess the keyboard or input messages
            </summary>
            <param name="msg">string message to process</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Preprocess the keyboard or input messages
            </summary>
            <param name="msg">Message to process</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.RectangleToClient(System.Drawing.Rectangle)">
            <summary>
            Computes the Rectagle to Client of the specific location
            </summary>
            <param name="r">Rectangle location to convert</param>
            <returns>Converted Rectangle</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.RectangleToScreen(System.Drawing.Rectangle)">
            <summary>
            Computes the Rectagle to Client of the specific location
            </summary>
            <param name="r">Rectangle area to convert</param>
            <returns>Resulted Rectangle </returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Refresh">
            <summary>
            Invalidates and Redraw the control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetBackColor">
            <summary>
            It's not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetBindings">
            <summary>
            It's not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetCursor">
            <summary>
            Is not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetFont">
            <summary>
            It's not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetForeColor">
            <summary>
            Is not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetImeMode">
            <summary>
            Is not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetRightToLeft">
            <summary>
            It's not supported
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResetText">
            <summary>
            Sets default text to Text property
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResumeLayout">
            <summary>
            Resume usual layout logic
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ResumeLayout(System.Boolean)">
            <summary>
            Resume usual layout logic and performs pending request
            </summary>
            <param name="performLayout"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Scale(System.Single)">
            <summary>
            Scale the controls to ratio
            </summary>
            <param name="ratio"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Scale(System.Drawing.SizeF)">
            <summary>
            Scale the controls to size factor
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Scale(System.Single,System.Single)">
            <summary>
            Scale the controls to dx and dy size
            </summary>
            <param name="dx">x size</param>
            <param name="dy">y size</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Select">
            <summary>
            Activate the control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activates the next control
            </summary>
            <param name="ctl">the starting control to search</param>
            <param name="forward">is Forward or Backward?</param>
            <param name="tabStopOnly">use the Tab Stop?</param>
            <param name="nested">search in children?</param>
            <param name="wrap">go to first control and continue search?</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.SendToBack">
            <summary>
            Send the control back to zorder
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specific bounds for location and size
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <param name="width">width size</param>
            <param name="height">height size</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <param name="width">width size</param>
            <param name="height">height size</param>
            <param name="specified">Bounds specified, do a bitwise between specified and parameters</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Show">
            <summary>
            Displays the control to user
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.SuspendLayout">
            <summary>
            Temporary suspend the layout logic to user
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Update">
            <summary>
            Redraw the control to the invalidated areas
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ToolStripItemInstance">
            <summary>
            Returns the internal reference to the "wrapped" instance of a menuItem.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MenuStrip">
            <summary>
            Returns a reference to the MenuStrip that represent the main menu element.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsToolStripItem">
            <summary>
            Returns true if this wrapper contains a reference that is not null.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AccessibilityObject">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AccessibilityObject.
            </summary>
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AccessibleDefaultActionDescription">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AccessibleDefaultActionDescription.
            <seealso cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription"/>
            </summary>
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AccessibleDescription">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AccessibleDescription.
            <seealso cref="P:System.Windows.Forms.Control.AccessibleDescription"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AccessibleName">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AccessibleName.
            <seealso cref="P:System.Windows.Forms.Control.AccessibleName"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AccessibleRole">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AccessibleRole.
            <seealso cref="P:System.Windows.Forms.Control.AccessibleRole"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AllowDrop">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AllowDrop.
            <seealso cref="P:System.Windows.Forms.Control.AllowDrop"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Anchor">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Anchor.
            <seealso cref="P:System.Windows.Forms.Control.Anchor"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AutoScrollOffset">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AutoScrollOffset.
            <seealso cref="P:System.Windows.Forms.Control.AutoScrollOffset"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.AutoSize">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem AutoSize.
            <seealso cref="P:System.Windows.Forms.Control.AutoSize"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BackColor">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem BackColor.
            <seealso cref="P:System.Windows.Forms.Control.BackColor"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BackgroundImage">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem BackgroundImage.
            <seealso cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BackgroundImageLayout">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem BackgroundImageLayout.
            <seealso cref="P:System.Windows.Forms.Control.BackgroundImageLayout"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.BindingContext">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem BindingContext.
            <seealso cref="P:System.Windows.Forms.Control.BindingContext"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Bottom">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Bottom.
            <seealso cref="P:System.Windows.Forms.Control.Bottom"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Bounds">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Bounds.
            <seealso cref="P:System.Windows.Forms.Control.Bounds"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CanFocus">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem CanFocus.
            <seealso cref="P:System.Windows.Forms.Control.CanFocus"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CanSelect">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem CanSelect.
            <seealso cref="P:System.Windows.Forms.Control.CanSelect"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Capture">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Capture.
            <seealso cref="P:System.Windows.Forms.Control.Capture"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CausesValidation">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem CausesValidation.
            <seealso cref="P:System.Windows.Forms.Control.CausesValidation"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CheckForIllegalCrossThreadCalls">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem CheckForIllegalCrossThreadCalls.
            <seealso cref="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ClientRectangle">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem ClientRectangle.
            <seealso cref="P:System.Windows.Forms.Control.ClientRectangle"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ClientSize">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem ClientSize.
            <seealso cref="P:System.Windows.Forms.Control.ClientSize"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.CompanyName">
            <summary>
            Gives access to the internal MenuStrip CompanyName property.
            <seealso cref="P:System.Windows.Forms.Control.CompanyName"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ContainsFocus">
            <summary>
            Gives access to the internal MenuStrip ContainsFocus property.
            <seealso cref="P:System.Windows.Forms.Control.ContainsFocus"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ContextMenu">
            <summary>
            Gives access to the internal MenuStrip ContextMenu property.
            <seealso cref="P:System.Windows.Forms.Control.ContextMenu"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ContextMenuStrip">
            <summary>
            Gives access to the internal MenuStrip ContextMenuStrip property.
            <seealso cref="P:System.Windows.Forms.Control.ContextMenuStrip"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Controls">
            <summary>
            Returns a flat collection of Controls for a MenuStrip or a ToolStripItem or 
            null if the internal object is not set.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Created">
            <summary>
            Gives access to the internal MenuStrip Created property.
            <seealso cref="P:System.Windows.Forms.Control.ContextMenuStrip"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Cursor">
            <summary>
            Gives access to the internal MenuStrip Cursor property.
            <seealso cref="P:System.Windows.Forms.Control.ContextMenuStrip"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DataBindings">
            <summary>
            Gives access to the internal MenuStrip DataBindings property.
            <seealso cref="P:System.Windows.Forms.Control.DataBindings"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DefaultBackColor">
            <summary>
            Returns the DefaultBackColor for Controls.
            <seealso cref="P:System.Windows.Forms.Control.DefaultBackColor"/>
            </summary>            
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DefaultFont">
            <summary>
            Returns the DefaultBackColor for Controls.
            <seealso cref="P:System.Windows.Forms.Control.DefaultFont"/>
            </summary>            
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DefaultForeColor">
            <summary>
            Returns the DefaultBackColor for Controls.
            <seealso cref="P:System.Windows.Forms.Control.DefaultForeColor"/>
            </summary>            
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.DisplayRectangle">
            <summary>
            Gives access to the internal MenuStrip DisplayRectangle property.
            <seealso cref="P:System.Windows.Forms.Control.DisplayRectangle"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Disposing">
            <summary>
            Gives access to the internal MenuStrip Disposing property.
            <seealso cref="P:System.Windows.Forms.Control.Disposing"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Dock">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Dock property.
            <seealso cref="P:System.Windows.Forms.Control.Dock"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Enabled">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Enabled property.
            <seealso cref="P:System.Windows.Forms.Control.Dock"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Focused">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Focused property.
            <seealso cref="P:System.Windows.Forms.Control.Focused"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object does not support 
            the property or it is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Font">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Font property.
            <seealso cref="P:System.Windows.Forms.Control.Font"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ForeColor">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem ForeColor property.
            <seealso cref="P:System.Windows.Forms.Control.ForeColor"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Handle">
            <summary>
            Gets Window Handle
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.HasChildren">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.Exception">Throws an exception indicating that it is not supported.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Height">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Height property.
            <seealso cref="P:System.Windows.Forms.Control.Height"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ImeMode">
            <summary>
            Gives access to the internal MenuStrip ImeMode property.
            <seealso cref="P:System.Windows.Forms.Control.ImeMode"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.InvokeRequired">
            <summary>
            Gives access to the internal MenuStrip InvokeRequired property.
            <seealso cref="P:System.Windows.Forms.Control.InvokeRequired"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsAccessible">
            <summary>
            Gives access to the internal MenuStrip IsAccessible property.
            <seealso cref="P:System.Windows.Forms.Control.IsAccessible"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsDisposed">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem IsDisposed property.
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsHandleCreated">
            <summary>
            Gives access to the internal MenuStrip IsHandleCreated property.
            <seealso cref="P:System.Windows.Forms.Control.Height"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.IsMirrored">
            <summary>
            Gives access to the internal MenuStrip IsMirrored property.
            <seealso cref="P:System.Windows.Forms.Control.Height"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>            
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.LayoutEngine">
            <summary>
            Gives access to the internal MenuStrip LayoutEngine property.
            <seealso cref="P:System.Windows.Forms.Control.Height"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>            
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Left">
            <summary>
            Gives access to the internal MenuStrip Left property.
            <seealso cref="P:System.Windows.Forms.Control.Left"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Location">
            <summary>
            Gives access to the internal MenuStrip Location property.
            <seealso cref="P:System.Windows.Forms.Control.Location"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Margin">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Margin property.
            <seealso cref="P:System.Windows.Forms.Control.Margin"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MaximumSize">
            <summary>
            Gives access to the internal MenuStrip MaximunSize property.
            <seealso cref="P:System.Windows.Forms.Control.MaximumSize"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MinimumSize">
            <summary>
            Gives access to the internal MenuStrip MinimumSize property.
            <seealso cref="P:System.Windows.Forms.Control.MinimumSize"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ModifierKeys">
            <summary>
            Gets the value for modifier key (Ctrl, Shift and Alt)
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MouseButtons">
            <summary>
            Gets which Mouse button is pressed
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.MousePosition">
            <summary>
            Gets the Point position of the mouse
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Name">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Name property.
            <seealso cref="P:System.Windows.Forms.Control.Name"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Padding">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Padding property.
            <seealso cref="P:System.Windows.Forms.Control.Padding"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Parent">
            <summary>
            Gives access to the internal MenuStrip Parent property.
            <seealso cref="P:System.Windows.Forms.Control.Parent"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.PreferredSize">
            <summary>
            Gives access to the internal MenuStrip PreferredSize property.
            <seealso cref="P:System.Windows.Forms.Control.PreferredSize"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ProductName">
            <summary>
            Gives access to the internal MenuStrip ProductName property.
            <seealso cref="P:System.Windows.Forms.Control.ProductName"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.ProductVersion">
            <summary>
            Gives access to the internal MenuStrip ProductVersion property.
            <seealso cref="P:System.Windows.Forms.Control.ProductVersion"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.RecreatingHandle">
            <summary>
            Gives access to the internal MenuStrip RecreatingHandle property.
            <seealso cref="P:System.Windows.Forms.Control.RecreatingHandle"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Region">
            <summary>
            Gives access to the internal MenuStrip Region property.
            <seealso cref="P:System.Windows.Forms.Control.Region"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Right">
            <summary>
            Gives access to the internal MenuStrip Right property.
            <seealso cref="P:System.Windows.Forms.Control.Right"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.RightToLeft">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem RightToLeft property.
            <seealso cref="P:System.Windows.Forms.Control.RightToLeft"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Site">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Site property.
            <seealso cref="P:System.Windows.Forms.Control.Site"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Size">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Size property.
            <seealso cref="P:System.Windows.Forms.Control.Size"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.TabIndex">
            <summary>
            Gives access to the internal MenuStrip TabIndex property.
            <seealso cref="P:System.Windows.Forms.Control.TabIndex"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.TabStop">
            <summary>
            Gives access to the internal MenuStrip TabStop property.
            <seealso cref="P:System.Windows.Forms.Control.TabStop"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Tag">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Tag property.
            <seealso cref="P:System.Windows.Forms.Control.Tag"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Text">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Text property.
            <seealso cref="P:System.Windows.Forms.Control.Text"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Top">
            <summary>
            Gives access to the internal MenuStrip Top property.
            <seealso cref="P:System.Windows.Forms.Control.Top"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.TopLevelControl">
            <summary>
            Gives access to the internal MenuStrip TopLevelControl property.
            <seealso cref="P:System.Windows.Forms.Control.TopLevelControl"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.UseWaitCursor">
            <summary>
            Gives access to the internal MenuStrip UseWaitCursor property.
            <seealso cref="P:System.Windows.Forms.Control.Left"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set or 
            if the internal object does not support the property.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Visible">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Visible property.
            <seealso cref="P:System.Windows.Forms.Control.Visible"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.Width">
            <summary>
            Gives access to the internal MenuStrip or ToolStripItem Width property.
            <seealso cref="P:System.Windows.Forms.Control.Width"/>
            </summary>            
            <exception cref="T:System.Exception">Thrown if the internal object is not set.</exception>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemControl.WindowTarget">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.Exception">Throws an exception indicating that 
            it is not a supported property.</exception>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection">
            <summary>
            Menu Items Collection
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.#ctor(System.Windows.Forms.MenuStrip)">
            <summary>
            Constructor Menu Items Collection
            </summary>
            <param name="owner">Use the menu system for a form</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
            Constructor Menu Items Collection
            </summary>
            <param name="owner">adds the ToolstripItem</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Add(System.Windows.Forms.Control)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.AddRange(System.Windows.Forms.Control[])">
            <summary>
            Not supported.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Clear">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Contains(System.Windows.Forms.Control)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.ContainsKey(System.String)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Find(System.String,System.Boolean)">
            <summary>
            Not supported.
            </summary>
            <param name="key"></param>
            <param name="searchAllChildren"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.GetChildIndex(System.Windows.Forms.Control)">
            <summary>
            Not supported.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Not supported.
            </summary>
            <param name="child"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.System#Collections#Generic#IEnumerable{System#Windows#Forms#Control}#GetEnumerator">
            <summary>
            Returns the instance collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.GetEnumerator">
            <summary>
            Retruns the Enumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.IndexOf(System.Windows.Forms.Control)">
            <summary>
            Not supported.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.IndexOfKey(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Remove(System.Windows.Forms.Control)">
            <summary>
            It's Not supported.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.RemoveAt(System.Int32)">
            <summary>
            It's Not supported.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.RemoveByKey(System.String)">
            <summary>
            It's Not supported.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="child"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Dispose">
            <summary>
            Disposes the intance
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Dispose(System.Boolean)">
            <summary>
            Disposes the instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.MoveNext">
            <summary>
            Advance to next control in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Reset">
            <summary>
            internal enumerator is set to empty
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Owner">
            <summary>
            Overwriting for inherited members ControlCollection
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Item(System.Int32)">
            <summary>
            Array access using an index
            </summary>
            <param name="index">index position</param>
            <returns>Control at index position</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Item(System.String)">
            <summary>
            Array access using key string
            </summary>
            <param name="key">string name of the control</param>
            <returns>Control indexed with key name</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.System#Collections#Generic#IEnumerator{System#Windows#Forms#Control}#Current">
            <summary>
            Current element in the collection as a control
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ContainerHelper.MenuItemsCollection.Current">
            <summary>
            Current element in the collection as an object
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.NestedControlEnumerator">
            <summary>
            To flatten the .NET controls collection and expose all controls in a 1-dimensional array, this 
            IEnumerator implementation is provided that enumerates the controls contained
            by the given control and all their children too.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.currentNestedEnumerator">
            <summary>
            Fields to use with the IEnumerator.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.control">
            <summary>
            Reference to the control at was used to create this enumerator.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an enumerator to transverse thru the control and all its children components.
            </summary>
            <param name="control">The root component to start the iteration.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.#ctor(System.Windows.Forms.MenuStrip)">
            <summary>
            Creates an enumerator to transverse thru a MenuStrip and all its children components.
            </summary>
            <param name="menu">The menu strip component where the control enumeration will start.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.#ctor(System.Windows.Forms.ToolStripItem)">
            <summary>
            Creates an enumerator to transverse thru a ToolStripItem and all its children components.
            </summary>
            <param name="menuItem">The ToolStripItem component where the control enumeration will start.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Dispose">
            <summary>
            Disposes the intance
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes the instance
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.MoveNext">
            <summary>
            Move to next Control in the collection.
            </summary>
            <returns>False if it is at the end of the collection, True otherwise.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Reset">
            <summary>
            Clears all internal structures, reset the enumerator to the initial state.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.System#Collections#Generic#IEnumerable{System#Windows#Forms#Control}#GetEnumerator">
            <summary>
            Generics implementation to return an IEnumerator for Control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.GetEnumerator">
            <summary>
            Provides an IEnumerator implementation.
            </summary>
            <returns>A collection reference that can be use to enumerate.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.RemoveAt(System.Int32)">
            <summary>
            Removes the Control element at the specified position.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.GetNestedControls">
            <summary>
            
            </summary>
            <returns>A HashTable mapping controls name to the control reference.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.GetIndexedNestedControls">
            <summary>
            
            </summary>
            <returns>Provides a list of all Controls in the collection.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.GetControls">
            <summary>
            
            </summary>
            <returns>Provides a list of all Controls in the collection.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.System#Collections#Generic#IEnumerator{System#Windows#Forms#Control}#Current">
            <summary>
            Properties and methods related with IEnumerator and IEnumerable.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Current">
            <summary>
            Returns the current control in the enumeration.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Item(System.String)">
            <summary>
            Returns the control in the collection with the specified name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Item(System.Int32)">
            <summary>
            Returns the control in the collection at the specified index.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.NestedControlEnumerator.Count">
            <summary>
            Returns the number of Controls in the colletion.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ControlArrayHelper">
            <summary>
            This class provides helper methods to deal with VB6 Control arrays.  The two main features are dinamic
            loading/unloading of a component into a control array and getting the index of a control inside a control array.
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.GetControlIndex(System.Object)">
            <summary>
            Gets the index of a control when it is part of a control array.
            </summary>
            <param name="controlObject">The Control from which we should find the index.</param>
            <returns>The index found.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.LoadControl(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>
            Dinamically loads a control into a form, the control belongs to a control array in VB6.
            </summary>
            <param name="controlContainer">The control container where the control array is declared.</param>
            <param name="controlName">The name of the control to be loaded.</param>
            <param name="index">The index where the control should be loaded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.UnloadControl(System.Object)">
            <summary>
            Unloads dinamically a control from a form, the control belongs to a control array in VB6.
            </summary>
            <param name="objectToUnload">The control to unload.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.UnloadControl(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>
            Dinamically unloads a control from a form, the control belongs to a control array in VB6.
            </summary>
            <param name="controlContainer">The Control container where the control array is declared.</param>
            <param name="controlName">The name of the control to be unloaded.</param>
            <param name="index">The index where the control should be unloaded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.GetControlIndex(System.Object,System.String@)">
            <summary>
            Gets the index of a control when it is part of a control array.
            </summary>
            <param name="controlObject">The Control from which we should find the index.</param>
            <param name="arrayName">The name of the array if one is found.</param>
            <returns>The index found or -1 if no index found for this control or control is not an array.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.CleanEventHandlers(System.Object,System.Object)">
            <summary>
            Cleans the event handlers bound to a control.
            </summary>
            <param name="controlToUnload">Control to clean up.</param>
            <param name="baseObject">Used to get delegates from the control to unload</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.FindBaseObject(System.Array)">
            <summary>
            Gets the first element in the array that is different from null.
            </summary>
            <param name="controlArray">The control Array.</param>
            <returns>Null if no element is found.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.CloneObject(System.Object)">
            <summary>
            Creates a copy of the baseControl.
            </summary>
            <param name="baseControl">The base control to use as template.</param>
            <returns>A copy or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.DoExtraBindings(System.Object,System.Object)">
            <summary>
            Performs extra bindings or property set when cloning an object.<para/>
            This methods does component type specific settings.
            </summary>
            <param name="baseControl">The base control used to create a new cloned one.</param>
            <param name="result">the clone object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.AddCloneToContainer(System.Object,System.Object)">
            <summary>
            Checks if the base object is a Control and then adds the clone to the base object
            parent.
            </summary>
            <param name="baseObject">The object used as base to clone</param>
            <param name="clone">The cloned object</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.GetPropertiesToCopy(System.Object)">
            <summary>
            Creates a list of the properties to be copied from the base control.
            </summary>
            <param name="baseControl">The control used as template.</param>
            <returns>A list of the propertie's values indexed by its name.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlArrayHelper.GetOwnerForm(System.Object)">
            <summary>
            Gets the form owner of a control. Currently only those inherithing from Control or
            Menus are supported, ContextMenus are not supported.
            </summary>
            <param name="controlObject">The control.</param>
            <returns>Null if it couldn't be retrieve.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ControlHelper">
            <summary>
            Implements several contol-related functionalities which were present in VB6 and are not in .NET.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetWindowRect(System.Runtime.InteropServices.HandleRef,UpgradeHelpers.VB6.Gui.ControlHelper.RECT@)">
            <summary>
            External API to Get Window Rect from user32.dll
            </summary>
            <param name="hWnd">handler pointer</param>
            <param name="rect">RECT structure output</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetWindow(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            External API to Get Window from user32.dll
            </summary>
            <param name="hWnd">handler to get</param>
            <param name="uCmd">int cmd</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.IsWindowVisible(System.Runtime.InteropServices.HandleRef)">
            <summary>
            External API to get if Is Window Visible from user32.dll
            </summary>
            <param name="hWnd">window handler</param>
            <returns>returs true if is visible</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.printHash">
            <summary>
            This hash has a map of control to ControlGraphics structures.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setDrawWidth(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets DrawWidth extended property.
            </summary>
            <param name="mControl">The control whose DrawWidth will be set.</param>
            <param name="val">The new DrawWidth value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setDrawWidth(System.Windows.Forms.Control,System.Double)">
            <summary>
            Sets DrawWidth extended property.
            </summary>
            <param name="mControl">The control whose DrawWidth will be set.</param>
            <param name="val">The new DrawWidth value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.getDrawWidth(System.Windows.Forms.Control)">
            <summary>
            Obtains the DrawWidth value for a given control.
            </summary>
            <param name="mControl">The control whose DrawWidth value will be obtained.</param>
            <returns>The DrawWidth value for the given control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setCurrentX(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets CurrentX extended property.
            </summary>
            <param name="mControl">The control whose CurrentX will be set.</param>
            <param name="val">The new CurrentX value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setCurrentX(System.Windows.Forms.Control,System.Double)">
            <summary>
            Sets CurrentX extended property.
            </summary>
            <param name="mControl">The control whose CurrentX will be set.</param>
            <param name="val">The new CurrentX value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.getCurrentX(System.Windows.Forms.Control)">
            <summary>
            Obtains the CurrentX value for a given control.
            </summary>
            <param name="mControl">The control whose CurrentX value will be obtained.</param>
            <returns>The CurrentX value for the given control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setCurrentY(System.Windows.Forms.Control,System.Double)">
            <summary>
            Sets CurrentY extended property.
            </summary>
            <param name="mControl">The control whose CurrentY will be set.</param>
            <param name="val">The new CurrentY value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.setCurrentY(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets CurrentY extended property.
            </summary>
            <param name="mControl">The control whose CurrentY will be set.</param>
            <param name="val">The new CurrentY value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.getCurrentY(System.Windows.Forms.Control)">
            <summary>
            Obtains the CurrentY value for a given control.
            </summary>
            <param name="mControl">The control whose CurrentY value will be obtained.</param>
            <returns>The CurrentY value for the given control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Print(System.Windows.Forms.Control,System.Object[])">
            <summary>
            Prints the given parameters inside the specified control.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="parameters">The elements to be printed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Line(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x1">The x value for the starting point.</param>
            <param name="y1">The y value for the starting point.</param>
            <param name="x2">The x value for the ending point.</param>
            <param name="y2">The y value for the ending point.</param>
            <param name="olecolor">The desired line color</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Line(System.Windows.Forms.Control,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws a line inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x1">The x value for the starting point.</param>
            <param name="y1">The y value for the starting point.</param>
            <param name="x2">The x value for the ending point.</param>
            <param name="y2">The y value for the ending point.</param>
            <param name="olecolor">The desired line color.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Line(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a line inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x1">The x value for the starting point.</param>
            <param name="y1">The y value for the starting point.</param>
            <param name="x2">The x value for the ending point.</param>
            <param name="y2">The y value for the ending point.</param>
            <param name="color">The desired line color.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Circle(System.Windows.Forms.Control,System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Draws a circle inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x">The x value for the center point.</param>
            <param name="y">The y value for the center point.</param>
            <param name="radius">The circle radius value.</param>
            <param name="olecolor">The desired circle color.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Circle(System.Windows.Forms.Control,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws a circle inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x">The x value for the center point.</param>
            <param name="y">The y value for the center point.</param>
            <param name="radius">The circle radius value.</param>
            <param name="olecolor">The desired circle color.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Circle(System.Windows.Forms.Control,System.Int32,System.Int32,System.Double,System.Drawing.Color)">
            <summary>
            Draws a circle inside the given control with the specified parameters.
            </summary>
            <param name="mControl">The control to print in.</param>
            <param name="x">The x value for the center point.</param>
            <param name="y">The y value for the center point.</param>
            <param name="radius">The circle radius value.</param>
            <param name="color">The desired circle color.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.Cls(System.Windows.Forms.Control)">
            <summary>
            Clears the graphics for the given control.
            </summary>
            <param name="mControl">The control to be cleared.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.TextHeight(System.Windows.Forms.Control,System.String)">
            <summary>
            Function created to return the TextHeight of a control.
            Use this function for controls, when TextHeight applies to the print object use 
            PrinterHelper.TextHeight instead.
            </summary>
            <param name="con">The control.</param>
            <param name="str">The string to use in the calculus.</param>
            <returns>The text height required to print the str in the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.TextWidth(System.Windows.Forms.Control,System.String)">
            <summary>
            Function created to return the TextWidth of a control.
            Use this function for controls, when TextWidth applies to the print object use 
            PrinterHelper.TextWidth instead.
            </summary>
            <param name="con">The control.</param>
            <param name="str">The string to use in the calculus.</param>
            <returns>The text width required to print the str in the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetEnabled(System.Windows.Forms.Control)">
            <summary>
            Support method to return the Enabled state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.SetEnabled(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Support method to set the Enabled state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <param name="value">set the bool value to Enabled property</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetVisible(System.Windows.Forms.Control)">
            <summary>
            Support method to return the Visible state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.SetVisible(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Support method to set the Visible state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <param name="value">set the Visible property to the control</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetTag(System.Windows.Forms.Control)">
            <summary>
            Support method to return the Tag state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.SetTag(System.Windows.Forms.Control,System.String)">
            <summary>
            Support method to set the Tag state of a control for special cases like 
            when a "ForEach control in Form.Control" is used.
            </summary>
            <param name="ctrl">The source control.</param>
            <param name="value">set the Tag value to the control</param>
            <returns>The state of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.IsControlPartiallyObscured(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control is not completely visible given a window that 
            its partially or completely hiding it.
            </summary>
            <param name="ctrl">The source control.</param>
            <returns>True if the control is partially or completely hidden by a window.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.IsControlObscured(System.Windows.Forms.Control)">
            <summary>
            Returns true if another window is completely hidding this control.
            </summary>
            <param name="ctrl">The source control.</param>
            <returns>True if the control is hidden by a window.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.GetVisibilityRegionsForControl(System.Windows.Forms.Control,System.Drawing.Region@,System.Drawing.Region@)">
            <summary>
            Given a control returns the region of the control, also it returs the region of the control 
            that is not obscured by another window.
            </summary>
            <param name="ctrl">The sources control.</param>
            <param name="controlRegion">The region of the control.</param>
            <param name="notObscuredControlRegion">The region not obscured by another windows.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.EventsDisabled">
            <summary>
            To store temporarely removed events from controls.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.DisableControlEvents(System.Windows.Forms.Control,System.String)">
            <summary>
            Remove the event handlers for a control (Disable).
            </summary>
            <param name="ctrl">The control.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.EnableControlEvents(System.Windows.Forms.Control,System.String)">
            <summary>
            Append the event handlers previously removed for a control (Enable).
            </summary>
            <param name="ctrl">The control.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ControlHelper.RECT">
            <summary>
            Internal RECT structure.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.left">
            <summary>
            left value
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.top">
            <summary>
            top value
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.right">
            <summary>
            right value
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.bottom">
            <summary>
            bottom value
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor, set the left,top,right,bottom values
            </summary>
            <param name="left">left position value</param>
            <param name="top">top position value</param>
            <param name="right">right position value</param>
            <param name="bottom">bottom position value</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.#ctor(System.Drawing.Rectangle)">
            <summary>
            Constructor using the a Rectangle values
            </summary>
            <param name="r">Rectangle variable to get the position values</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a RECT structure from a x, y position and width, height values
            </summary>
            <param name="x">x position</param>
            <param name="y">y position</param>
            <param name="width">width value</param>
            <param name="height">height value</param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ControlHelper.RECT.Size">
            <summary>
            Gets the Size structure from internal values
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics">
            <summary>
            Print, Cls, Line operations work using some values like
            CurrentX, CurrentY, and DrawWidth.
            For that reason this values must be keep associated with the control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.Cls">
            <summary>
            Clears the control from any previous drawings.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.DrawImage(System.Int32,System.Int32,System.String)">
            <summary>
            Draws an image with its actual size.
            </summary>
            <param name="x">X coordinate position.</param>
            <param name="y">Y coordinate position.</param>
            <param name="filename">Filename for the image to draw.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.DrawImage(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Draws an image with the specified size.
            </summary>
            <param name="x">X coordinate position.</param>
            <param name="y">Y coordinate position.</param>
            <param name="width">Width for the image.</param>
            <param name="height">Height for the image.</param>
            <param name="filename">Filename for the image to draw.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.Circle(System.Int32,System.Int32,System.Double,System.Drawing.Color)">
            <summary>
            Draws a circle with the specified color.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="radius"></param>
            <param name="color"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a line with the specified points and color.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.Print(System.Object[])">
            <summary>
            Prints the specified parameters in the control.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ControlHelper.ControlGraphics.mControl_Disposed(System.Object,System.EventArgs)">
            <summary>
            This is used to handle the dispose event of the associated control
            to make sure that the hash table is removed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper">
            <summary>
            Class provided to recreate a DataEnvironment as a DataSet in .NET (Migration from ADODB to ADO.NET).
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.RefreshDataEnvironment">
            <summary>
            Refresh all the data and tables represented by the connections and commands added to this instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.AddConnection(System.String,System.String)">
            <summary>
            Add a connection to the DataEnvironmentNETHelper.
            </summary>
            <param name="connectionName">The name of the connection.</param>
            <param name="connectionString">The connection string to establish the connection.</param>
            <returns>A DEConnectionHelper representing the Connection just added.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.AddCommand(System.String,System.String,System.String)">
            <summary>
            Adds a command to the DataEnvironmentNETHelper.
            </summary>
            <param name="connnectionName">The name of the connection to execute the command.</param>
            <param name="commandName">The name of the command.</param>
            <param name="commandText">The command text to execute.</param>
            <returns>A DECommandHelper instance representing the Command just added.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.CloseOpenedConnections">
            <summary>
            Close all connections opened after the invocations of CheckIfConnectionIsOpened.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.CheckIfConnectionIsOpened(System.String)">
            <summary>
            Verifies and if necessary open the connection associated with a command.
            </summary>
            <param name="cmdName">The command name.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.Dispose(System.Boolean)">
            <summary>
            Release unmanaged resources from memory
            </summary>
            <param name="Disposing">To Release unmanaged and managed resources</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.DEConnectionHelper">
            <summary>
            Helper class created to represent a connection within a DataEnvironmentNETHelper.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataEnvironmentNETHelper.DECommandHelper">
            <summary>
            Helper class created to represent a command within a DataEnvironmentNETHelper.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper">
            <summary>
            Class DataHelper, inherits from UserControl, ISupportInitialize and IExtenderProvider.
            Used to Connecto to Access or by DSN to any DB.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper._BoundControls">
            <summary>
            Collection of controls bound so far.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper._ControlsPendingToBind">
            <summary>
            List of controls pending to be bound when a recordset is available.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OnReposition">
            <summary>
            On Reposition event
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            On Validating Event, using the Validating EventHandler
            parameters int and by ref Action and Save.
            </summary>
            <param name="Action">Action value to be returned.</param>
            <param name="Save">Save value to be returned.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.OnInitialization">
            <summary>
            OnInitialization state variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BeginInit">
            <summary>
            BeginInit, sets the OnInitialization state to true.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.EndInit">
            <summary>
            EndInit, sets the OnInitialization state to false. Refreshes the Connection Info.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.#ctor">
            <summary>
            Constructor, initialize controls and sets the style to Selectable in false.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Finalize">
            <summary>
            Destructor, Unbinds used controls and clean the lists.  
            In the case there is a Recordset used will be disposed.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ListOfExtendedControls">
            <summary>
            Prevents multiple properties for the controls when 
            several instances of this type are present in the form.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.CanExtend(System.Object)">
            <summary>
            Returns true if the control will expose the property, only one instance of the property 
            will be added to a control no matter how many instances of this ExtenderProvider are 
            added to the form.
            </summary>
            <param name="ctrl">Control to check.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.GetDataHelperBinding(System.Windows.Forms.Control)">
            <summary>
            Gets method of the property to be added. A custom designer has been added.
            </summary>
            <param name="ctrl">Control to check.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.SetDataHelperBinding(System.Windows.Forms.Control,UpgradeHelpers.VB6.Gui.DataHelperBindingInfo)">
            <summary>
            Sets method of the property to be added.
            </summary>
            <param name="ctrl">Control to process.</param>
            <param name="value">Helper to bind.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.getDefaultDataHelperBindingInfo(System.Windows.Forms.Control)">
            <summary>
            Returns a default DataHelperBindingInfo class based on the control.
            </summary>
            <param name="ctrl">Control to process.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.CheckControlsPendingToBind">
            <summary>
            Bind all controls found in the collection ControlsPendingToBind.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.TemporallyUnBindControls">
            <summary>
            UnBind all controls and leave them in the list of ControlsPendingToBind.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.b_first_Click(System.Object,System.EventArgs)">
            <summary>
            Internal method to move first.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.b_prev_Click(System.Object,System.EventArgs)">
            <summary>
            Internal method to move back.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.b_next_Click(System.Object,System.EventArgs)">
            <summary>
            Internal method to move next.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.b_last_Click(System.Object,System.EventArgs)">
            <summary>
            Internal method to move last.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ValidateButtonStatus">
            <summary>
            To decide if a button should be enabled/disabled.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.UpdateConnectionInfo">
            <summary>
            Try to update the information to connect to the database based on the values of the properties:
                - Connect
                - DatabaseName
                - RecordSource
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.UpdateConnectionInfo_Access">
            <summary>
            Try to update the information to connect to an Access database based 
            on the values of the properties:
                - DatabaseName
                - RecordSource
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.UpdateConnectionThroughDSN">
            <summary>
            Try to update the information to connect to a database using DSN as is done 
            by the MSRDC Control using the following properties:
                - Datasourcename
                - Username
                - Password
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RefreshResultSet">
            <summary>
            It will try to recreate the resultset based on the values of the properties:
            - ConnnectionString
            - SqlSelectQuery
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindControl(System.Windows.Forms.Control)">
            <summary>
            BindControl when only has a control parameter.
            </summary>
            <param name="ctrl">Control to process.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindControl(System.Windows.Forms.Control,System.String)">
            <summary>
            BindControl with Control and Column name, 
            then is called the BindControl with propertyName "Text"
            </summary>
            <param name="ctrl">Control to bind.</param>
            <param name="columnName">Column name.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindControl(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            BindControl when has the Control, the property name and the column name.
            </summary>
            <param name="ctrl">Control to process.</param>
            <param name="propertyName">Property name.</param>
            <param name="columnName">Column name.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindControl(System.Windows.Forms.ListBox,System.String,System.String)">
            <summary>
            BindControl using a ListBox, columnValue and column Display.
            </summary>
            <param name="ctrl">Control to process.</param>
            <param name="colValue">String column value.</param>
            <param name="colDisplay">String column display.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindControl(System.Windows.Forms.ComboBox,System.String,System.String)">
            <summary>
            BindCntrol using a ComboBox, columnValue and ColumnDisplay.
            </summary>
            <param name="ctrl">Control to process.</param>
            <param name="colValue">String column value.</param>
            <param name="colDisplay">String column to display.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.UnBindControl(System.Windows.Forms.Control)">
            <summary>
            UnbindControl, removes the Control.
            </summary>
            <param name="Ctrl">Control to process.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.InternalUnbindControl(System.Windows.Forms.Control)">
            <summary>
            Internal UnbindControl to remove the control.
            </summary>
            <param name="Ctrl">Control to process.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindC1TrueDBGrid(System.Windows.Forms.Control)">
            <summary>
            Function created to bind a C1TrueDBGrid to this DataHelper.
            </summary>
            <param name="ctrl">The C1TrueDBGrid control.</param>
            <returns>The index in the list of controls bound so far.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.C1TrueDBGrid_Updated(System.Object,System.EventArgs)">
            <summary>
            Event handler to force updates for the C1TrueDBGrid.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_onAfterMove(System.Object,System.EventArgs)">
            <summary>
            Event for Recordset On After Move.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_onAfterQuery(System.Object,System.EventArgs)">
            <summary>
            Event for Recordset On After Query.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.newRow">
            <summary>
            To flag that a new row has been added.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_AddNewRecord(System.Object,UpgradeHelpers.VB6.Gui.DataHelper.AddNewRowEventArgs)">
            <summary>
            A signal sent by the recordset that a new row should be added to the BindingContext.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">AddNewRowEventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_CancelCurrentEdit(System.Object,System.EventArgs)">
            <summary>
            A signal sent by the recordset that the new record addes should be deleted from 
            the BindingContext.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_EndCurrentEdit(System.Object,System.EventArgs)">
            <summary>
            A signal sent by the recordset that the changes of the new row should be applied.
            </summary>
            <param name="sender">Object sent.</param>
            <param name="e">EventArgs sent.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindingContext_onCurrentChanged(System.Object,System.EventArgs)">
            <summary>
            BindingContext On Current Changed.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Recordset_Validating(System.Object,UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventArgs)">
            <summary>
            Recordset Validating event.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">DataHelper.ValidatingEventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.SetInsertQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Method to set the insert query to use, this allows the user to override 
            the query that is generated by default
            </summary>
            <param name="InsertQuery">Query to use to insert values. It can include parameters.</param>
            <param name="parameters">Information of the parameters to set when the Command is created.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.SetUpdateQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Method to set the update query to use, this allows the user to 
            override the query that is generated by default.
            </summary>
            <param name="UpdateQuery">Query to use to update values. It can include parameters.</param>
            <param name="parameters">Information of the parameters to set when the Command is created.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.SetDeleteQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Method to set the delete query to use, this allows the user to 
            override the query that is generated by default.
            </summary>
            <param name="DeleteQuery">Query to use to delete values. It can include parameters.</param>
            <param name="parameters">Information of the parameters to set when the Command is created.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.IgnoreChangeInPosition">
            <summary>
            ReBind function to set position for RecordSet.DataSet.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.BindDataSet">
            <summary>
            BindDataSet unbinds DataSet and sets the CurrentChanged Event Handler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.UnBindDataSet">
            <summary>
            UnBindDataSet removes the CurrentChanged Event Handler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Refresh">
            <summary>
            Refreshes the ResultSet.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.Reposition">
            <summary>
            On Reposition Event, using the Reposition EventHandler.
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.Validating">
            <summary>
            ValidatingEventHandler holds the event declaration.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Text">
            <summary>
            Text Property, used to set the Caption.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.EmulationType">
            <summary>
            Emulation Type Property.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Connect">
            <summary>
            Connect Property, used to set the Caption.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DatabaseName">
            <summary>
            DatabaseName: Returns/sets the name and location of the source of data for a Data control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DefaultCursorType">
            <summary>
            DefaultCursorType: Get/Set the Default Cursor Type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DefaultType">
            <summary>
            DefaultType Get/Set the Default/Set originally is 2.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Exclusive">
            <summary>
            Exclusive: Get/Set the Exclusive value, default is false.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Options">
            <summary>
            Options: Get/Set Options value, default is 0.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ReadOnly">
            <summary>
            ReadOnly: Get/Set ReadOnly value, default is false.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetType">
            <summary>
            RecordsetType: Get/Set Recordset Type value, default is 1.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordSource">
            <summary>
            RecordSource: Returns/sets the underlying table, SQL Statement, or 
            QueryDef object for a Data control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.BackColor">
            <summary>
            BackColor: Get/Set Back Color.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Appearance">
            <summary>
            Appearance: Get/Set Appearance value, default is 0. If is set to 0, 
            BorderStyle is FixedSingle.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Font">
            <summary>
            Font: Get/Set Font value for caption.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ForeColor">
            <summary>
            ForeColor: Get/Set ForeColor value for caption.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriver">
            <summary>
            CursorDriver: Get/Set CursorDriver value, default is CursorDriverEnum.rdUseIfNeeded, 
            the property is integer but is mapped to the internal var to the specific enum.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.BOFAction">
            <summary>
            BOFAction: Get/Set BOFAction value, default is BOFActionEnum.rdMoveFirst. 
            When is set if value is 0, the internal var will be rdMoveFirst, otherwise is rdBOF.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.EOFAction">
            <summary>
            EOFAction: Get/Set EOFAction, default is EOFActionEnum.rdMoveLast. 
            When is set the value is mapped to the specific enum value.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.LockType">
            <summary>
            LockType: Get/Set LockType value, default is LockTypeEnum.rdConcurRowver. 
            When is set the int value is mapped to the specific enum value in LockTypeEnum.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.QueryType">
            <summary>
            QueryType: Get/Set QueryType value, default is 0. 
            No matter what value is sent, will be set to 0.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Prompt">
            <summary>
            Prompt: Get/Set Prompt value, default is PromptEnum.rdDriverCompleteRequired. 
            When is set the int value is mapped to the PromptEnum value.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.QueryTimeout">
            <summary>
            QueryTimeOut: Get/Set Query time out value, default is 30.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RowsetSize">
            <summary>
            RowsetSize: Get/Set Rowset size, default is 100.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.LoginTimeout">
            <summary>
            LoginTimeout: Get/Set Login time out value, default is 15.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.KeysetSize">
            <summary>
            KeysetSize: Get/Set Key set size value, default is 0.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.MaxRows">
            <summary>
            MaxRows: Get/Set Max rows value, default is 0.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ErrorThreshold">
            <summary>
            ErrorThreshold: Get/Set Error Threshold value, default is -1.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.BatchSize">
            <summary>
            BatchSize: Get/Set Batch size value, default is 15.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DataSourceName">
            <summary>
            DataSourceName: Returns/sets RemoteData control's data source name. 
            Updates ConnectionInfo after is set.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.UserName">
            <summary>
            UserName: Get/Set User name id. Updates connection info when is set.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Password">
            <summary>
            Password: Get/Set Password value. Updates connection info when is set.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.LogMessages">
            <summary>
            LogMessages: Get/Set LogMessages string.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Caption">
            <summary>
            Caption: Determines RemoteData control's caption.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Enabled">
            <summary>
            Enabled: Get/Set Enabled value, default is true. Used to control the enabling of the control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.Recordset">
            <summary>
            RecordSet: Used to set the RecordSet, default is null.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ConnectionString">
            <summary>
            Properties to change the way the recorset is connected to a datasource and the query
            that is used to retrieve the data.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.SqlSelectQuery">
            <summary>
            SqlSelectQuery: Get/Set Sql Select Query value. default is empty.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.UnBindActionEnum">
            <summary>
            Enum to indicate how a control should be unbind from the datasource.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.EmulationTypeEnum">
            <summary>
            Enum to indicate which component is being emulated.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.EmulationTypeEnum.VBData">
            <summary>
            VB Data
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.EmulationTypeEnum.MSRDC">
            <summary>
            MS RDC
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriverEnum">
            <summary>
            Enum for the property CursorDriver [MSRDC].
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriverEnum.rdUseIfNeeded">
            <summary>
            Use if needed
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriverEnum.rdUseOdbc">
            <summary>
            Use Odbc
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriverEnum.rdUseServer">
            <summary>
            Use Server
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.CursorDriverEnum.rdUseClientBatch">
            <summary>
            Client Batch
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.BOFActionEnum">
            <summary>
            Enum for the property BOFAction.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.BOFActionEnum.rdMoveFirst">
            <summary>
            Move First
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.BOFActionEnum.rdBOF">
            <summary>
            Moves to Begin of File
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.EOFActionEnum">
            <summary>
            Enum for the property EOFAction.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.EOFActionEnum.rdMoveLast">
            <summary>
            Move to Last
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.EOFActionEnum.rdEOF">
            <summary>
            Moves to End of File
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.EOFActionEnum.rdAddNew">
            <summary>
            Add New
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum">
            <summary>
            Enum for the property LockType.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum.rdConcurReadOnly">
            <summary>
            Read Only
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum.rdConcurLock">
            <summary>
            Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum.rdConcurRowver">
            <summary>
            Row Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum.rdConcurValues">
            <summary>
            Value Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.LockTypeEnum.rdConcurBatch">
            <summary>
            Batch Lock
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.PromptEnum">
            <summary>
            Enum for the property Prompt.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.PromptEnum.rdDriverPrompt">
            <summary>
            Driver
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.PromptEnum.rdDriverNoPrompt">
            <summary>
            No Prompt
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.PromptEnum.rdDriverComplete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.PromptEnum.rdDriverCompleteRequired">
            <summary>
            Complete Required
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum">
            <summary>
            Enum for the Validate Events.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionCancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionMoveFirst">
            <summary>
            Move First
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionMovePrevious">
            <summary>
            Move Previous
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionMoveNext">
            <summary>
            Move Next
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionMoveLast">
            <summary>
            Move Last
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionAddNew">
            <summary>
            Add New
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionUpdate">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionDelete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionFind">
            <summary>
            Find
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionBookmark">
            <summary>
            BookMark
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionClose">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum.vbDataActionUnload">
            <summary>
            Unload
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.ControlUnbindingInformation">
            <summary>
            Class to store information about how a member for a control should be unbind from the datasource.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ControlUnbindingInformation._UnBindFunctionParameters">
            <summary>
            Property UnbindFunctionParameters is a list that holds the unbind parameters.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ControlUnbindingInformation.#ctor(System.String,UpgradeHelpers.VB6.Gui.DataHelper.UnBindActionEnum)">
            <summary>
            Constructor that Sets the internal variables.
            </summary>
            <param name="Member">set the internal member</param>
            <param name="UnBindAction">set the internal UnbindAction value</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ControlUnbindingInformation.#ctor(System.String,UpgradeHelpers.VB6.Gui.DataHelper.UnBindActionEnum,System.Object[])">
            <summary>
                Constructor that set the internal variables and adds a range of UnbindFunctionParameters
            </summary>
            <param name="Member">Sets the internal member value.</param>
            <param name="UnBindAction">Sets the internal UnbindAction value.</param>
            <param name="UnBindFunctionParameters">Adds a UnbindFunctionsParameters.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.ControlBindingInformation">
            <summary>
            Class to store information for a control about how the binding was invoked by the user and 
            how the members should be unbind.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ControlBindingInformation._BindingParameters">
            <summary>
            This contains the list of the parameters originally sent by the user code to bind 
            the control, using these and the control type it is possible to figure out which 
            BindControl function was/should be used.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ControlBindingInformation._UnBindingMemberInformation">
            <summary>
            This contains the list of members that should be used to unbind this control and 
            how the unbinding should be done.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ControlBindingInformation.#ctor(System.Object[])">
            <summary>
            Add Invocation Parameters to Binding Invocation Parameters List
            done
            </summary>
            <param name="invocationParameters">Invocation parameters object array.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventHandler">
            <summary>
            Delegate ValidatingEventHandler, used to process event ValidatingEventHandler.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">ValidatingEventArgs to process.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventArgs">
            <summary>
            Class ValidatingEventArgs, used to process event ValidatingEventHandler parameters.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor ValidatingEventArgs, recive Action and Save.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventArgs.Action">
            <summary>
            Integer Property Action.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ValidatingEventArgs.Save">
            <summary>
            Integer Property Save.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.AddNewRowEventHandler">
            <summary>
            Delegate AddNewRow EventHandler, used to process event ValidatingEventHandler.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.AddNewRowEventArgs">
            <summary>
            Class AddNewRow Event Args, used to process parameters for AddNewRowEventHandler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.AddNewRowEventArgs.#ctor">
            <summary>
            Constructor for AddNewRowEventArgs, do not set anything.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.AddNewRowEventArgs.NewRow">
            <summary>
            Boolean Property NewRow.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo">
            <summary>
            Type to pass parameter information for the update queries.
            This is provided just in case that the CreateAdapter 
            method can't create update queries by default, so 
            methods will be provided for the user to specify them directly.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.#ctor(System.String,System.Data.DbType,System.String)">
            <summary>
            Constructor to set the internal parameters.
            </summary>
            <param name="ParameterName">string</param>
            <param name="dbType">DbType</param>
            <param name="SourceColumn">string</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructor to set internal parameters, int size is not used.
            </summary>
            <param name="ParameterName">String.</param>
            <param name="dbType">DbType.</param>
            <param name="size">Int not used.</param>
            <param name="SourceColumn">String.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.getOleDbParameter">
            <summary>
            Returns this instance as a OleDbParameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.getOdbcParameter">
            <summary>
            Returns this instance as a OleDbParameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.DbType">
            <summary>
            DbType: Get/Set the DBType also sets the OdbcType depending on value to set.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.Direction">
            <summary>
            ParameterDirection: Get/Set ParameterDirection value, 
            default value is ParameterDirection.Input.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.IsNullable">
            <summary>
            IsNullable: Get/Set IsNullable value, default is true.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.ParameterName">
            <summary>
            ParameterName: Get/Set Parameter name value, default is empty.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.SourceColumn">
            <summary>
            SourceColumn: Get/Set Source column value, default is empty.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.SourceVersion">
            <summary>
            SourceVersion: Get/Set Source version value, default is DataRowVersion.Default.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.Value">
            <summary>
            Value: Get/Set Value object, default is null.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo.SourceColumnNullMapping">
            <summary>
            SourceColumnNullMapping: Get/Set Source column null mapping value, default is false.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass">
            <summary>
            Definition of the generic interface used as recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MoveFirst">
            <summary>
            Moves to First Record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MoveLast(System.Int32)">
            <summary>
            Moves to Last Record
            </summary>
            <param name="Options">specify option in the move</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MoveLast(System.Object)">
            <summary>
            Moves to Last Record with options
            </summary>
            <param name="Options">specifying an object of options</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MoveLast">
            <summary>
            Moves to Last Record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MoveNext">
            <summary>
            Moves Next
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.MovePrevious">
            <summary>
            Moves previous
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.AddNew">
            <summary>
            Add new record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Delete">
            <summary>
            Delete record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Edit">
            <summary>
            Edit record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Update">
            <summary>
            Updates record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Update(System.Int32,System.Boolean)">
            <summary>
            Updates record with type and persistent
            </summary>
            <param name="UpdateType">kind of update</param>
            <param name="Force">is forced or not</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Dispose">
            <summary>
            Disposes internal objects
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.CloseRecordSet">
            <summary>
            Close internal recordset
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Connection(System.String)">
            <summary>
            Sets the Connection String and connects
            </summary>
            <param name="constr"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Connection">
            <summary>
            Connects using the internal connection string
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Clone">
            <summary>
            Clones the internal Recordset class
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.FindFirst(System.String,System.Object)">
            <summary>
            Finds first record using the column name and object criteria
            </summary>
            <param name="columnName">column name</param>
            <param name="criteria">object criteria</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.FindLast(System.String,System.Object)">
            <summary>
            Finds Last record using column name and object criteria
            </summary>
            <param name="columnName">column name</param>
            <param name="criteria">object criteria</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.FindPrevious(System.String,System.Object)">
            <summary>
            Finds Previous, uses the actual position and get the previous record matching the criteria
            </summary>
            <param name="columnName">Column name</param>
            <param name="criteria">object criteria</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.FindNext(System.String,System.Object)">
            <summary>
            Finds next, uses the actual position and get the next record matching the criteria
            </summary>
            <param name="columnName">Column name</param>
            <param name="criteria">object criteria</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Refresh">
            <summary>
            Refreshes the internal data record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Requery">
            <summary>
            Query the database and refill the internal data set
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Cancel">
            <summary>
            Cancel operations
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Close">
            <summary>
            Close the internal recordset
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.SetInsertQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Sets the internal Insert query specifying the parameters
            </summary>
            <param name="InsertQuery">query string</param>
            <param name="parameters">list of DBParameterInfo parameters</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.SetUpdateQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Sets the internal Update query specifying the parameters
            </summary>
            <param name="UpdateQuery">query string</param>
            <param name="parameters">list of DBParameterInfo parameters</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.SetDeleteQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Sets the internal Delete query specifying the parameters
            </summary>
            <param name="DeleteQuery">query string</param>
            <param name="parameters">list of DBParameterInfo parameters</param>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.AfterQuery">
            <summary>
            After query event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.AfterMove">
            <summary>
            After move event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Validating">
            <summary>
            Validating event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.AddNewRecord">
            <summary>
            Add new row event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.CancelCurrentEdit">
            <summary>
            Cancel current edit event
            </summary>
        </member>
        <member name="E:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.EndCurrentEdit">
            <summary>
            End current edit event
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RP">
            <summary>
            Gets the Record Position
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RP_CanMoveNext">
            <summary>
            Can move next?
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RP_CanMovePrevious">
            <summary>
            Can move previous?
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RecordSource">
            <summary>
            Returns the Record Source query
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.NoMatch">
            <summary>
            Return no match state
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.AbsolutePosition">
            <summary>
            Get/Set the position in the data set
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.BOF">
            <summary>
            Return the Begin of File state
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.EOF">
            <summary>
            Return the End of File state
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Item(System.String)">
            <summary>
            Access the dataset fields as an array using field name
            </summary>
            <param name="columnName">Field name</param>
            <returns>Object with field information</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Item(System.Int32)">
            <summary>
            Access the dataset fields as an array using an index
            </summary>
            <param name="columnIndex">column index</param>
            <returns>Object with field information</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RecordsFound">
            <summary>
            Gets the number of records found using the actual query string
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.RecordCount">
            <summary>
            Gets the number of records in the dataset
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.IsLoadingFinnished">
            <summary>
            Gets Loading Finished state
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Fields">
            <summary>
            Returns the internal Fields Class
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.SqlQuery">
            <summary>
            Returns the internal Query String
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Bookmark">
            <summary>
            Gets the Bookmark data row 
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.DataSet">
            <summary>
            Gets the Data Set
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass.Name">
            <summary>
            Gets the Name of the Data Set
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass">
            <summary>
            Implementation of RecordsetClass using OleDb.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_CanMoveAtPosition(System.Int32)">
            <summary>
            RP_CanMoveAtPosition: Can move to specific position.
            </summary>
            <param name="position">Int position</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_MoveFirst">
            <summary>
            RP_MoveFirst: move to first position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_MoveLast">
            <summary>
            RP_MoveLast: if can move to last, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_MoveNext">
            <summary>
            RP_MoveNext: if can move next, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_MovePrevious">
            <summary>
            RP_MovePrevious: if can move previous, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_MoveAtPosition(System.Int32)">
            <summary>
            RP_MoveAtPosition: if can move to a specific position then move it.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_Reset">
            <summary>
            RP_Reset: sets the current position to -1.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnAfterQuery">
            <summary>
            OnAfterQuery event calls the AfterQuery delegate asigned if not is null.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnAfterMove">
            <summary>
            OnAfterMove event calls the AfterMove delegate asigned if not is null.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            OnValidating event calls the Validating delegate is not is null.
            </summary>
            <param name="Action">Int returned.</param>
            <param name="Save">Int returned.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnAddNewRecord(System.Data.DataRow@)">
            <summary>
            OnAddNewRecord calls the AddNewRecord delegate in case is not null, and 
            also assigns the NewRow value.
            </summary>
            <param name="NewRow"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnCancelCurrentEdit">
            <summary>
            OnCancelCurrentEdit calls the CancelCurrentEdit delegate in case is not null.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OnEndCurrentEdit">
            <summary>
            OnEndCurrentEdit calls the EndCurrentEdit delegate in case is not null.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.ValidateNewAction(UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum,System.Int32)">
            <summary>
            Validates the Action to take considering the original action.
            </summary>
            <param name="oldAction">The original Action.</param>
            <param name="Action">The new Action to take.</param>
            <returns>The new action that should be taken.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.#ctor">
            <summary>
            Constructor initialize variables.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.#ctor(System.String)">
            <summary>
            Initialize variables and sets the connection string.
            </summary>
            <param name="connString">string</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.#ctor(System.String,System.String)">
            <summary>
            Initialize variables and sets the connectionstring and select query string.
            </summary>
            <param name="connString">Connection String.</param>
            <param name="sqlSelectString">Query String.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.SetInitialPosition">
            <summary>
            Sets the Initial Position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CheckUpdateCommandsFromMetaData">
            <summary>
            Check if it is possible to create the update commands using meta data.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CreateDeleteCommandFromMetaData">
            <summary>
            Builds sql statement from metadata to delete data.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CreateInsertCommandFromMetaData">
            <summary>
            Builds sql insert statement from metadata.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CreateUpdateCommandFromMetaData">
            <summary>
            Builds sql update statement from metadata.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.getDBType(System.Type)">
            <summary>
            Gets DBType from a .NET Type.
            </summary>
            <param name="type">Type.</param>
            <returns>DBType.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Finalize">
            <summary>
            Destructor, close the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.MoveFirst">
            <summary>
            Methods to move the current record set.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.MoveNext">
            <summary>
            MoveNext.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.MovePrevious">
            <summary>
            MovePrevious.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.DiscardAddNewChanges">
            <summary>
            The Data Control discard changes made by AddNew if 
            any operation moves to another record
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.AddNew">
            <summary>
            AddNew data.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.NewRow_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            event NewRow_ColumnChanged.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">DataColumnChangeEventArgs.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Delete">
            <summary>
            Delete Record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Edit">
            <summary>
            Edit Record. Not implemented already.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Update">
            <summary>
            Updates Record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Update(System.Int32,System.Boolean)">
            <summary>
            Updates Data, by now only UpdateType in 1 is supported.
            </summary>
            <param name="UpdateType">Int Update Type.</param>
            <param name="Force">Boolean force, not used.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CreateAdapter(System.String,System.Data.OleDb.OleDbConnection)">
            <summary>
            Creates an Adapter using a query and an the connection.
            </summary>
            <param name="query">Query string.</param>
            <param name="con">OleDbConnection connection.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Dispose">
            <summary>
            Disposes the class and close the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.CloseRecordSet">
            <summary>
            Close the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Connection(System.String)">
            <summary>
            Sets the ConnectionString to the dbConnection.
            </summary>
            <param name="constr">Connection String</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Connection">
            <summary>
            Sets the connection if the connection string is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OpenRecordSet">
            <summary>
            Opens the recordset if the SqlQuery is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.OpenRecordSet(System.String)">
            <summary>
            Opens the recordset using the SQLstr value.
            </summary>
            <param name="SQLstr">Query string.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Clone">
            <summary>
            Returns an instance of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.FindFirst(System.String,System.Object)">
            <summary>
            Method to Find using a column name and a criteria of search.
            </summary>
            <param name="columnName">Column name to use.</param>
            <param name="criteria">Criteria object to use.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.FindLast(System.String,System.Object)">
            <summary>
            Method FindLast finds the last row matching the criteria, using the column name.
            </summary>
            <param name="columnName">Column name string.</param>
            <param name="criteria">Criteria Object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.FindPrevious(System.String,System.Object)">
            <summary>
            Finds Previous method search back from the actual position using 
            the column name and criteria.
            </summary>
            <param name="columnName">Column name string.</param>
            <param name="criteria">Criteria object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.FindNext(System.String,System.Object)">
            <summary>
            Finds next method search for the next record from the actual position using 
            the column name and criteria.
            </summary>
            <param name="columnName"></param>
            <param name="criteria"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Refresh">
            <summary>
            Requerys the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Requery">
            <summary>
            Requery using the internal query string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Requery(System.String)">
            <summary>
            Performs the query and fills the internal data structures.
            </summary>
            <param name="SQLstr"></param>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass._BOF">
            <summary>
            BOF: Get the BOF state.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass._EOF">
            <summary>
            EOF: Get the EOF state.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.ValidateCurrentPosition">
            <summary>
            Validates that current postion is not a EOF, BOF and not a new row.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.getTableName(System.String)">
            <summary>
            Try to find the name of the table from the select query.
            </summary>
            <param name="sqlSelectQuery">The query to parse.</param>
            <returns>The name of the table or empty string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.SetInsertQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Methods to override the commands created by default to update the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.SetUpdateQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Sets the UpdateQuery in the adapter.
            </summary>
            <param name="UpdateQuery">Query String.</param>
            <param name="parameters">DBParameterInfo List.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.SetDeleteQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Sets the Delete Query in the adapter.
            </summary>
            <param name="DeleteQuery">Query String.</param>
            <param name="parameters">DbParameterInfo List.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.MoveLast(System.Object)">
            <summary>
            Move to Last Record.
            </summary>
            <param name="Options">only used when is Type.Missing.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Cancel">
            <summary>
            Cancel. Not implemented.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Close">
            <summary>
            Close. Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP">
            <summary>
            RP: Record Position.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_CanMoveFirst">
            <summary>
            RP_CanMoveFirst: Record can move first.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_CanMoveLast">
            <summary>
            RP_CanMoveLast: Record can move last.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_CanMoveNext">
            <summary>
            RP_CanMoveNext: Record can move next.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RP_CanMovePrevious">
            <summary>
            RP_CanMovePrevious: Record can move previous.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RecordSource">
            <summary>
            Returns the internal query string
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.NoMatch">
            <summary>
            NoMatch: get if record is found.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.AbsolutePosition">
            <summary>
            AbsolutePosition: Get/Set Absolute position value.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Item(System.String)">
            <summary>
            Helps to access the value from a column table as an array.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Item(System.Int32)">
            <summary>
            Access the table by a column index.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RecordsFound">
            <summary>
            RecordsFound: Get the state for found records.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.RecordCount">
            <summary>
            RecourdCount: Get the rows count.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.IsLoadingFinnished">
            <summary>
            IsLoadingfinnished: Get the operation finished state.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Fields">
            <summary>
            Fields: Get the FieldsClass internal instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.SqlQuery">
            <summary>
            SqlQuery: Get/Set the query string and sets the TableName.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Bookmark">
            <summary>
            Bookmark: Get/Set the BookMark.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.DataSet">
            <summary>
            DataSet: Get the internal DataSet.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.OleDbRecordsetClass.Name">
            <summary>
            Name: Get the internal query.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass">
            <summary>
            Implementation of RecordsetClass using ODBC.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_CanMoveAtPosition(System.Int32)">
            <summary>
            RP_CanMoveAtPosition: Check if possible to move to a specific position.
            </summary>
            <param name="position">Int position.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_MoveFirst">
            <summary>
            RP_MoveFirst: if can move to first position, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_MoveLast">
            <summary>
            RP_MoveLast: if can move to last position, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_MoveNext">
            <summary>
            RP_MoveNext: if can move to next position, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_MovePrevious">
            <summary>
            RP_MovePrevious: if can move to previous position, move it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_MoveAtPosition(System.Int32)">
            <summary>
            RP_MoveAtPosition: if can move to a specific position, move it.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_Reset">
            <summary>
            RP_Reset: Reset the position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnAfterQuery">
            <summary>
            OnAfterQuery: if delegate AfterQuery is not null, call it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnAfterMove">
            <summary>
            OnAfterMove: if delegate AfterMove is not null, call it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnValidating(System.Int32@,System.Int32@)">
            <summary>
            OnValidating: if delegate Validating is not null, 
            creates the ValidatingEventArgs using parameters and call the delegate.
            </summary>
            <param name="Action">Int Action returned.</param>
            <param name="Save">Int Save returned.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnAddNewRecord(System.Data.DataRow@)">
            <summary>
            OnAddNewRecord: if delegate AddNewRecord is not null, 
            creates the AddNewRowEventArgs, call the delegate and return the NewRow.
            </summary>
            <param name="NewRow"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnCancelCurrentEdit">
            <summary>
            OnCancelCurrentEdit: if delegate CancelCurrentEdit is not null, call it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OnEndCurrentEdit">
            <summary>
            OnEdnCurrentEdit: if delegate EndCurrentEdit is not null, call it.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.ValidateNewAction(UpgradeHelpers.VB6.Gui.DataHelper.DataValidateEnum,System.Int32)">
            <summary>
            Validates the Action to take considering the original action.
            </summary>
            <param name="oldAction">The original Action.</param>
            <param name="Action">The new Action to take.</param>
            <returns>The new action that should be taken.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.#ctor">
            <summary>
            ODBCRecordsetClass Constructor: initialize internal variables.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.#ctor(System.String)">
            <summary>
            ODBCRecordsetClass Constructor: initialize internal variables, 
            the connection is initialized using the connection string.
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.#ctor(System.String,System.String)">
            <summary>
            ODBCRecordsetClass Constructor: initialize internal variables, 
            the connection is initialized using the connection string, and 
            the query uses the sqlSelectString.
            </summary>
            <param name="connString"></param>
            <param name="sqlSelectString"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.SetInitialPosition">
            <summary>
            Sets Initial Position, and move to first position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CheckUpdateCommandsFromMetaData">
            <summary>
            Check if it is possible to create the update commands using meta data.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CreateDeleteCommandFromMetaData">
            <summary>
            Creates a SQL delete query string from metadata.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CreateInsertCommandFromMetaData">
            <summary>
            Creates a SQL insert query string from metadata.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CreateUpdateCommandFromMetaData">
            <summary>
            Creates a SQL update query string from metadata.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.getDBType(System.Type)">
            <summary>
            getDBType: Return DbType map from type.Name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MoveFirst">
            <summary>
            Moves to First Position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MoveLast(System.Int32)">
            <summary>
            Moves to Last Position, parameter Options must be 0 by now.
            </summary>
            <param name="Options">int</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MoveLast">
            <summary>
            Moves to Last Position.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MoveNext">
            <summary>
            Moves to next record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MovePrevious">
            <summary>
            Moves to Previous record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.AddNew">
            <summary>
            Add New Record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Delete">
            <summary>
            Delete actual record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Edit">
            <summary>
            Edit Record. Not Implemented already.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Update">
            <summary>
            Updates actual record.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.NewRow_ColumnChanged(System.Object,System.Data.DataColumnChangeEventArgs)">
            <summary>
            Event New Row Column Changed change internal status.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Update(System.Int32,System.Boolean)">
            <summary>
            Updates Record, UpdateType must be 1, Force is not used by now.
            </summary>
            <param name="UpdateType">Int UpdateType.</param>
            <param name="Force">Bool Force.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CreateAdapter(System.String,System.Data.Odbc.OdbcConnection)">
            <summary>
            Creates the Odbc Data Adapter using the query string and OdbcConnection.
            </summary>
            <param name="query">String.</param>
            <param name="con">OdbcConnection.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Dispose">
            <summary>
            Disposes the class and call to close the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.CloseRecordSet">
            <summary>
            Close the RecordSet.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Connection(System.String)">
            <summary>
            Opens the Connection using the connection string.
            </summary>
            <param name="constr">String.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Connection">
            <summary>
            Opens the connection if there is a ConnectionString already assigned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OpenRecordSet">
            <summary>
            Opens the Recordset if the internal query string is assigned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.OpenRecordSet(System.String)">
            <summary>
            Opens the RecordSet using the SQLstr parameter.
            </summary>
            <param name="SQLstr"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Clone">
            <summary>
            Returns and instance of OleDbRecordsetClass using 
            the actual connection string and SqlQuery.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.FindFirst(System.String,System.Object)">
            <summary>
            Finds the First record using the column name and the criteria.
            </summary>
            <param name="columnName">String column name.</param>
            <param name="criteria">Criteria object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.FindLast(System.String,System.Object)">
            <summary>
            Finds last record using the column name and criteria.
            </summary>
            <param name="columnName">String column name.</param>
            <param name="criteria">Criteria object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.FindPrevious(System.String,System.Object)">
            <summary>
            Finds previous record using the column name and criteria.
            </summary>
            <param name="columnName">String column name.</param>
            <param name="criteria">Criteria object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.FindNext(System.String,System.Object)">
            <summary>
            Finds the next record matching the criteria using the column name.
            </summary>
            <param name="columnName">String column name.</param>
            <param name="criteria">Criteria object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Refresh">
            <summary>
            Calls the requery method.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Requery">
            <summary>
            Calls the Requery with the actual SqlQuery string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Requery(System.String)">
            <summary>
            Fills the internal adapter with the internal query.
            </summary>
            <param name="SQLstr"></param>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass._BOF">
            <summary>
            BOF: Get BOF state.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass._EOF">
            <summary>
            EOF: Get EOF state.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.ValidateCurrentPosition">
            <summary>
            Validates that current postion is not a EOF, BOF and not a new row.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.getTableName(System.String)">
            <summary>
            Tries to find the name of the table from the select query.
            </summary>
            <param name="sqlSelectQuery">The query to parse.</param>
            <returns>The name of the table or empty string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.SetInsertQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Methods to override the commands created by default to update the recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.SetUpdateQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Method to set the update query to use, this allows the user to 
            override the query that is generated by default.
            </summary>
            <param name="UpdateQuery">Query to use to update values. It can include parameters.</param>
            <param name="parameters">Information of the parameters to set when the Command is created.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.SetDeleteQuery(System.String,System.Collections.Generic.List{UpgradeHelpers.VB6.Gui.DataHelper.DBParameterInfo})">
            <summary>
            Method to set the delete query to use, this allows the user to 
            override the query that is generated by default.
            </summary>
            <param name="DeleteQuery">Query to use to delete values. It can include parameters.</param>
            <param name="parameters">Information of the parameters to set when the Command is created.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.MoveLast(System.Object)">
            <summary>
            Moves to Last Record.
            </summary>
            <param name="Options">only used when is Type.Missing</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Cancel">
            <summary>
            Cancel. Not implemented.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Close">
            <summary>
            Close. Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP">
            <summary>
            RP: Get Record Position.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_CanMoveFirst">
            <summary>
            RP_CanMoveFirst: Get if there are records so is possible to move first.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_CanMoveLast">
            <summary>
            RP_CanMoveLast: Get if there are records so is possible to move last.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_CanMoveNext">
            <summary>
            RP_CanMoveNext: Check if is possible to move next.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RP_CanMovePrevious">
            <summary>
            RP_CanMovePrevious: Check if is possible to move back.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RecordSource">
            <summary>
            RecordSource: Get the SqlQuery string.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.NoMatch">
            <summary>
            NoMatch: Get the found state.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.AbsolutePosition">
            <summary>
            AbsolutePosition: Get/Set AbsolutePosition value.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Item(System.String)">
            <summary>
            Helps to access the value from a column table as an array.
            </summary>
            <param name="columnName">String.</param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Item(System.Int32)">
            <summary>
            Helps to access the value as an index column.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RecordsFound">
            <summary>
            RecordsFound: Get the state for found records.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.RecordCount">
            <summary>
            RecourdCount: Get the rows count.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.IsLoadingFinnished">
            <summary>
            IsLoadingfinnished: Get the operation finished state.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Fields">
            <summary>
            Fields: Get the FieldsClass internal instance.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.SqlQuery">
            <summary>
            SqlQuery: Get/Set the query string and sets the TableName.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Bookmark">
            <summary>
            Bookmark: Get/Set the BookMark.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.DataSet">
            <summary>
            DataSet: Get the internal DataSet.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.ODBCRecordsetClass.Name">
            <summary>
            Name: Get the internal query.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass">
            <summary>
            Class used for the DAO.Fields handling.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Field">
            <summary>
            internal Field Class
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.#ctor(UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass)">
            <summary>
            Constructor. Initialize Recordset.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Append(System.Object)">
            <summary>
            Append is not implemented.
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Refresh">
            <summary>
            Refresh is not implemented.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Delete(System.String)">
            <summary>
            Delete is not implemented.
            </summary>
            <param name="Name"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Item(System.String)">
            <summary>
            Returns the Field Class, accessed by the columnname.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Item(System.Int32)">
            <summary>
            Returns the Field Class, accessed by the column index.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldsClass.Count">
            <summary>
            Count: Get the column count.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass">
            <summary>
            Class used for the DAO.Field handling, is more for mapping purposes.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.#ctor(System.Data.DataColumn,UpgradeHelpers.VB6.Gui.DataHelper.RecordsetClass)">
            <sumary>
            Constructor, Initialize internal variables.
            </sumary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.AppendChunk(System.Object)">
            <summary>
            AppendChunk is not implemented.
            </summary>
            <param name="Val"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.CreateProperty">
            <summary>
            CreateProperty is not implemented.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.GetChunk(System.Int64,System.Int64)">
            <summary>
            GetChunk is not implemented.
            </summary>
            <param name="Offset"></param>
            <param name="Bytes"></param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Value">
            <summary>
            Value: Get/Set RecordSet[Field.Ordinal].
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.AllowZeroLength">
            <summary>
            AllowZeroLength: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Attributes">
            <summary>
            Attributes: Not Implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.CollatingOrder">
            <summary>
            CollatingOrder: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.DataUpdatable">
            <summary>
            DataUpdatable: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.DefaultValue">
            <summary>
            DefaultValue: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.FieldSize">
            <summary>
            FieldSize: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.ForeignName">
            <summary>
            ForeignName: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Name">
            <summary>
            Name: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.OrdinalPosition">
            <summary>
            OrdinalPosition: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.OriginalValue">
            <summary>
            OriginalValue: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Required">
            <summary>
            Required: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Size">
            <summary>
            Size: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.SourceField">
            <summary>
            SourceField: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.SourceTable">
            <summary>
            SourceTable: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.Type">
            <summary>
            Type: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.ValidateOnSet">
            <summary>
            ValidateOnSet: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.ValidationRule">
            <summary>
            ValidationRule: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.ValidationText">
            <summary>
            ValidationText: Not implemented.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelper.FieldClass.VisibleValue">
            <summary>
            VisibleValue: Not implemented.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelperDesignerEditor">
            <summary>
            Class to implement the custom editor of the property DataHelperBinding, inherits UITypeEditor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Informs what will be the type of designer to be used, in this case it will be modal.
            </summary>
            <param name="context">System.ComponentModel.ITypeDescriptorContext.</param>
            <returns>UITypeEditorEditStyle.Modal.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Takes care of displaying the modal window to edit the current value. 
            For this property it will use an  instance of DataHelperBindingInfo 
            to exchange the information.
            </summary>
            <param name="context">ITypeDescriptorContext.</param>
            <param name="provider">IServiceProvider.</param>
            <param name="value">Object.</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelperBindingInfo">
            <summary>
            Class to store information about what datahelper is going to be used to bind and 
            what extra parameters are required.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperBindingInfo.#ctor(UpgradeHelpers.VB6.Gui.DataHelper,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Constructor.
            </summary>
            <param name="bindingControl">DataHelper.</param>
            <param name="bindingParameters">List of parameters.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelperBindingInfo.BindingControl">
            <summary>
            The DataHelper control that will be used to bind the control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.DataHelperBindingInfo.BindingParameters">
            <summary>
            The list of parameters that should be provided. 
            This list plus the type of the control being binding will be used 
            to determinate what BindControl function will be invoked.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelperBindingInfoConverter">
            <summary>
            Class to execute conversion between DataHelperBindingInfo type and other types so 
            it can be serialized and displayed in the property grid of the designer.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperBindingInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            To what types can DataHelperBindingInfo be converted.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperBindingInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            From what types can DataHelperBindingInfo be converted.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperBindingInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Executes the convertion.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView">
            <summary>
            DataHelperDesignerModalView inherits Form.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView._dataHelperBindingInfo">
            <summary>
            Instance to store the information on how to bind the control to the datahelper control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.#ctor(UpgradeHelpers.VB6.Gui.DataHelperBindingInfo,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Constructor of the Modal View window to edit the value of the property. 
            It receives the current instance (if one is set) and 
            the context so it can obtain extra information.
            </summary>
            <param name="dataHelperBindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.LoadListOfDataHelpers">
            <summary>
            Loads the list of DataHelpers found in the form.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.InitPropertyGrid">
            <summary>
            Loads the Grid with the list of properties that should be set based on the control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.DHComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Check if the Ok button can be enabled.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.dbGridProperties_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Check if the Ok button can be enabled.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.dbGridProperties_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Check if the Ok button can be enabled.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.ValidateRequiredInfo">
            <summary>
            Validate if all information required is available.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.DataHelperDesignerModalView_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            To update the information edited so far if the Ok button has been set.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.cmdClean_Click(System.Object,System.EventArgs)">
            <summary>
            cmdClean Click, Cleans the values in ComboBox and Grid.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">EventArgs.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.DataHelperDesignerModalView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.FontHelper">
            <summary>
            The FontHelper provides functionality for Fonts.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FontHelper.Change(System.Drawing.Font,System.String,System.Nullable{System.Single},System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Gets a copy of the font, changing selected attributes.
            </summary>
            <param name="font">The font that will serve as a base for the copy.</param>
            <param name="name">The font name</param>
            <param name="size">The font size</param>
            <param name="gdiCharSet">The gdiCharSet to use</param>
            <param name="bold">Indicate if the font will be bold</param>
            <param name="italic">Indicate if the font will be italic</param>
            <param name="underline">Indicate if the font will be underlined</param>
            <param name="strikeout">Indicate if the font will be strikeout</param>
            <returns>A copy of the font, with selected attributes changed.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.FormHelper">
            <summary>
            The FormHelper provides some functionality for Forms, like printing forms.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintForm(System.Windows.Forms.Form)">
            <summary>
            Prints the form layout.
            </summary>
            <param name="mform">The form to be printed.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass">
            <summary>
            Helper class to prepare a Form to be printed.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass._frm">
            <summary>
            The Form to be printed.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.printDocument1">
            <summary>
            The PrintDocument where to print the Form.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.printPreviewDialog1">
            <summary>
            The Dialog of PrintPreview.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.#ctor">
            <summary>
            Constructor of PrintFormClass.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructor of PrintFormClass.
            </summary>
            <param name="frm">The form to be printed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.Print">
            <summary>
            Prints the form.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.Print(System.Windows.Forms.Form)">
            <summary>
            Prints the form.
            </summary>
            <param name="frm">The form to be printed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.PrintPreview(System.Windows.Forms.Form)">
            <summary>
            Prints a preview of the form.
            </summary>
            <param name="frm">The form to be printed.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.imagen">
            <summary>
            The Form represented as a Bitmap.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.CapturarPantalla(System.Windows.Forms.Form)">
            <summary>
            Draws the Form into a Bitmap.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormHelper.PrintFormClass.printDocument1_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            PrintPage event of a PrintFocument.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The PrintPage event arguments.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.FormsHelper">
            <summary>
            The FormHelper contains the missing functionality upgrading VB6.Forms to System.Windows.Forms,
            mainly the simulation of Load/Unload functionality provided by VB6 but differently in .NET.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormsHelper.formsLoaded">
            <summary>
            Dictionary that contains the forms already loaded, in addition contains the list of visual controls
            for each forms (to be disposed in case of unload).
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.FormsHelper.dialogForms">
            <summary>
            Contains all forms being displayed via ShowDialog.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.IsFormLoaded(System.Windows.Forms.Form)">
            <summary>
            Indicates if a form is already loaded into memory.
            </summary>
            <param name="form">The form to check if it is loaded.</param>
            <returns>Returns true if the form is already loaded or false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.SetFormLoaded(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Sets a flag indicating if this form is being loaded or unloaded.
            </summary>
            <param name="form">The form to set as loaded or unloaded.</param>
            <param name="value">True if the form is being loaded or false if it is being unloaded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.SetFormLoaded(System.Windows.Forms.Form,System.Boolean,System.String[])">
            <summary>
            Sets a flag indicating if this form is being loaded or unloaded.
            </summary>
            <param name="form">The form to set as loaded or unloaded.</param>
            <param name="value">True if the form is being loaded or false if it is being unloaded.</param>
            <param name="visualControls">Array of strings containing the names of the visual controls in the form.
            Theorically, these controls must be passed when the form is being loaded, to be used when the form is unloaded./// </param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteLoad(System.Windows.Forms.Form)">
            <summary>
            Executes the load of the form, loading the visual controls and firing the Load event.
            </summary>
            <param name="form">The form to be loaded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteLoad(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Executes the load of the form, loading the visual controls and firing the Load event.
            </summary>
            <param name="form">The form to be loaded.</param>
            <param name="executeEvents">Indicates if events must be thrown.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteUnLoad(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Executes the unload of the form, disposing the visual controls and firing the Closed event.
            </summary>
            <param name="form">The form to be loaded.</param>
            <param name="directFromEvent">Indicates if method is being invoked from Closed event directly.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteUnLoad(System.Windows.Forms.Form)">
            <summary>
            Executes the unload of the form, disposing the visual controls and firing the Closed event.
            </summary>
            <param name="form">The form to be loaded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.RemoveComponents(System.Windows.Forms.Form)">
            <summary>
            Dispose attached events from Form.
            </summary>
            <param name="form">The form where the events are attached.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.DisposeEvents(System.Windows.Forms.Form)">
            <summary>
            Dispose attached events from Form.
            </summary>
            <param name="form">The form where the events are attached.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.RemoveOpenForms(System.Windows.Forms.Form)">
            <summary>
            Removes Form from Application.OpenForms collection.
            </summary>
            <param name="form">The form to be removed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ClearPropertyStoreCollecttion(System.Windows.Forms.Form)">
            <summary>
            Clear some extra memory in forms, stored in Properties and objEntries variables.
            </summary>
            <param name="form">The form to be cleared.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ManageSpecialControls(System.Windows.Forms.Form,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Controls some special circunstancies as disabling Timer.
            </summary>
            <param name="form">The form being managed.</param>
            <param name="ctrl">The control to be managed.</param>
            <param name="isField">Indicates if control is a field or property into the form.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteShow(System.Windows.Forms.Form)">
            <summary>
            Executes the show for the form, starting to execute the load.
            </summary>
            <param name="form">The form to be shown.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteShow(System.Windows.Forms.Form,System.Int32,System.Windows.Forms.Form)">
            <summary>
            Executes the show for the form, starting to execute the load.
            </summary>
            <param name="form">The form to be shown.</param>
            <param name="Modal">A Microsoft.VisualBasic.Compatibility.VB6.FormShowConstants enumeration that specifies modality.</param>
            <param name="OwnerForm">The owner parameter of the System.Windows.Form.ShowDialog() method.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteShowDialog(System.Windows.Forms.Form)">
            <summary>
            Executes the show for the form, starting to execute the load.
            </summary>
            <param name="form">The form to be shown.</param>
            <returns>Returns the resultant DialogResult of showing the form.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.ExecuteHide(System.Windows.Forms.Form)">
            <summary>
            Executes the hide (close) for the form, starting to execute the load.
            </summary>
            <param name="form">The form to be hidden.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.FormsHelper.IsHidingDialogForm(System.Windows.Forms.Form)">
            <summary>
            Indicates if form being unloaded was shown using ExecuteDialog. It must not be unloaded.
            </summary>
            <param name="form">The form to be requested.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.FormsHelper.LoadAttribute">
            <summary>
            Attibute used as a flag to mark the Form_Load method as generated by VBUC.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ImageListHelper">
            <summary>
            Control created to convert the images of a VB6 ImageList into an internal .NET ImageList.
            This control can be used in design time or runtime
                - Design Time: Add the control to the form with the VB6 ImageList, 
                  use the property VB6ImageList to indicate the name of the VB6 ImageList and 
                  use the property NETImageList to access the .NET ImageList with the images migrated
                - Runtime: Creates an instance of this control and use the method LoadVB6ImageList 
                  with a VB6 ImageList as parameter to migrate it in runtime, again, 
                  use the property NETImageList to access the .NET ImageList with the images migrated
            note:
                Some images may not be converted into the .NET ImageList so in such cases 
                a default error image is used, the workaround is to change the original image 
                in the VB6 ImageList to another format.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.DestroyIcon(System.IntPtr)">
            <summary>
            DestroyIcon external function from user32.dll.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.#ctor">
            <summary>
            Constructor for ImageListHelper.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ImageListHelper.internalImageListInitialized">
            <summary>
            Indicates if the ImageList has been loaded and initialized.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ImageListHelper._VB6ImageList">
            <summary>
            Stores the VB6 ImageList control name, this property should be used only in design time.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.LoadVB6ImageListFromControlName(System.String)">
            <summary>
            Tries to find the form containing this instance and loads the image list of VB6.
            </summary>
            <param name="VB6ImageListName">The name of the VB6 ImageList.</param>
            <returns>True if image list was sucessfully loaded.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.LoadVB6ImageList(System.Object)">
            <summary>
            Loads the VB6ImageList into the internal instance of the .NET imagelist.
            </summary>
            <param name="VB6ImageListControl">The original VB6 ImageList.</param>
            <returns>True if image list was sucessfully loaded.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.LoadImages(System.Object)">
            <summary>
            Loads the list of images from the original VB6 ImageList to the new .NET ImageList.
            </summary>
            <param name="VB6ImageList">The original VB6 ImageList.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.LoadBasicProperties(System.Object)">
            <summary>
            Loads the basic properties of the VB6 ImageList into the new .NET ImageList, 
            like Height and Width.
            </summary>
            <param name="VB6ImageList">The original VB6 ImageList.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.IsValid(System.Object)">
            <summary>
            Validates that the object is a VB6 ImageList.
            </summary>
            <param name="ctrl">The original VB6 ImageList.</param>
            <returns>True if this object represents a VB6 ImageList.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.ImageListHelper_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Event handled to ensure that the control is only visible in design time.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ImageListHelper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ImageListHelper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ImageListHelper.internalImageList">
            <summary> 
            Stores VB6 image list into a .NET image list
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ImageListHelper.errorImageList">
            <summary> 
            Stores VB6 error image list into a .NET image list
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ImageListHelper.NETImageList">
            <summary>
            Returns a .NET version of the VB6 ImageList.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ImageListHelper.VB6ImageList">
            <summary>
            Returns the VB6 ImageList control name.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.Line3D">
            <summary>
            Print a 3D line on the center of the longest part of the control
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Line3D.#ctor">
            <summary>
            Creates a new Line3D
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Line3D.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control on the screen
            </summary>
            <param name="e">The context to paint</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Line3D.LineBorderStyle">
            <summary>
            The line style.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.LineHeader">
            <summary>
            Control that displays a label followed by a line until the end of the control size.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.LineHeader.#ctor">
            <summary>
            Creates a new LineHeader control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.LineHeader.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control on the screen
            </summary>
            <param name="e">The context to paint</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.LineHeader.SpaceBetweenTextAndLine">
            <summary>
            Separation between the label and the header line.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.LineHeader.LineBorderStyle">
            <summary>
            Style of the header line.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListBoxHelper">
            <summary>
            Extender that adds support to special functionality in ListBoxes, 
            for example the properties SelectionMode and Selected.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">The container where to add the controls.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListBoxHelper.selectedIndexList">
            <summary>
            Contains the current selected indexes in the ListBox.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.CanExtend(System.Object)">
            <summary>
            Determinate which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.GetSelectionMode(System.Windows.Forms.ListBox)">
            <summary>
            Returns the current value of SelectionMode provided by this control. 
            It happens to be the same value of the ListBox control.
            </summary>
            <param name="lstBox">The control to get the SelectionMode.</param>
            <returns>The current SelectionMode assigned to the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.SetSelectionMode(System.Windows.Forms.ListBox,System.Windows.Forms.SelectionMode)">
            <summary>
            Sets the SelectionMode for a control.
            </summary>
            <param name="lstBox">The control to set the SelectionMode.</param>
            <param name="mode">The selection mode to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.ListBox_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            For MultiExtended and MultiSimple selection modes we will draw the items ourselves 
            to keep track of which item has the focus.
            </summary>
            <param name="sender">The ListBox raising the event.</param>
            <param name="e">The DrawItemEventArgs for the current item to draw.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.GetSelectedIndex(System.Windows.Forms.ListBox)">
            <summary>
            Function to get the selected index of a ListBox. It depends on the selection mode property.
            </summary>
            <param name="lstBox">The listbox to return the SelectedIndex.</param>
            <returns>The current selected index for a list box or in the case of 
            SelectionMode = [MultiExtended|MultiSimple] it might throw an exception 
            if a ListBoxHelper component hasn't been added to the form with 
            the ListBox (The ListBoxHelper component will provide an extra 
            property to set SelectionMode).
            </returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.SetSelectedIndex(System.Windows.Forms.ListBox,System.Int32)">
            <summary>
            Function to set the selected index of a ListBox. Its behavior depends on 
            the selection mode property.
            </summary>
            <param name="lstBox">The listbox to set the SelectedIndex.</param>
            <param name="SelectedIndex">The value to be set.</param>
            <returns>Returns the selectedIndex after the operation.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.GetSelected(System.Windows.Forms.ListBox,System.Int32)">
            <summary>
             Returns a value indicating whether the specified item is selected.
            </summary>
            <param name="lstBox">The listbox to test.</param>
            <param name="index">The index of the item to query if it is selected.</param>
            <returns>True if the item is selected.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.SetSelected(System.Windows.Forms.ListBox,System.Int32,System.Boolean)">
            <summary>
            Selects or clears the selection for the specified item in a System.Windows.Forms.ListBox.
            </summary>
            <param name="lstBox">The listbox parent.</param>
            <param name="index">The index of the item.</param>
            <param name="value">The value to set to selected property.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListBoxHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListBoxHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListControlHelper">
            <summary>
            Extender that adds support to special functionality in ComboBoxes and ListBoxes, 
            mainly related to ItemData.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">The container where to add the controls.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListControlHelper.OnInitialization">
            <summary>
            Indicates if EndInit hasn't been executed yet after a BeginInit.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.BeginInit">
            <summary>
            Implements BeginInit Method from ISupportInitialize. 
            Sets ListControl status to OnInitialization.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.EndInit">
            <summary>
            Implements EndInit Method from ISupportInitialize. 
            Sets ListControl status to Not OnInitialization.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.RefreshItemsData">
            <summary>
            Updates the list of items data of the controls in runtime after the EndInit has been invoked.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListControlHelper.ItemsData">
            <summary>
            Stores the ItemsData for each control temporarely during design time.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.GetItemData(System.Windows.Forms.ListControl)">
            <summary>
            Gets the ItemData property of a specific list control.
            </summary>
            <param name="lstControl">The list control to test.</param>
            <returns>Returns an int array with the item data list of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.GetItemData(System.Windows.Forms.ComboBox)">
            <summary>
            Gets the ItemData property of a specific list control. 
            This specific function applies just for a ComboBox control.
            </summary>
            <param name="lstControl">The list control to test.</param>
            <returns>Returns an int array with the item data list of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.GetItemData(System.Windows.Forms.ListBox)">
            <summary>
            Gets the ItemData property of a specific list control. 
            This specific function applies just for a ListBox control.
            </summary>
            <param name="lstControl">The list control to test.</param>
            <returns>Returns an int array with the item data list of the control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.SetItemData(System.Windows.Forms.ListControl,System.Int32[])">
            <summary>
            Sets the ItemData property of a specific list control.
            </summary>
            <param name="lstControl">The list control.</param>
            <param name="itemsData">The Item data list to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.SetItemData(System.Windows.Forms.ComboBox,System.Int32[])">
            <summary>
            Sets the ItemData property of a specific list control.
            This specific function applies just for a ComboBox control.
            </summary>
            <param name="lstControl">The list control.</param>
            <param name="itemsData">The Item data list to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.SetItemData(System.Windows.Forms.ListBox,System.Int32[])">
            <summary>
            Sets the ItemData property of a specific list control.
            This specific function applies just for a ListBox control.
            </summary>
            <param name="lstControl">The list control.</param>
            <param name="itemsData">The Item data list to set.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListControlHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControlHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListControl_Extenders">
            <summary>
            Static class that contains a List control extender methods
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.GetListItem(System.Windows.Forms.ListControl,System.Int32)">
            <summary>
            Gets the list item.
            </summary>
            <param name="lstControl">The List control instance.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.SetListItem(System.Windows.Forms.ListControl,System.Int32,System.String)">
            <summary>
            Sets the list item.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.GetItemData(System.Windows.Forms.ListControl,System.Int32)">
            <summary>
            Gets the item data.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.SetItemData(System.Windows.Forms.ListControl,System.Int32,System.Int32)">
            <summary>
            Sets the item data.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.Clear(System.Windows.Forms.ListControl)">
            <summary>
            Adds the item.
            </summary>
            <param name="lstControl">The list control instance.</param>		
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.AddItem(System.Windows.Forms.ListControl,System.String,System.Int32)">
            <summary>
            Adds the item
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="value">The value.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.AddItem(System.Windows.Forms.ListControl,System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.GetNewIndex(System.Windows.Forms.ListControl)">
            <summary>
            Gets the new index.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListControl_Extenders.RemoveItem(System.Windows.Forms.ListControl,System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="lstControl">The list control instance.</param>
            <param name="index">The index.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewHelper">
            <summary>
            Extender that adds support to special functionality in ListView controls.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.OnInitialization">
            <summary>
            Indicates if EndInit hasn't been executed yet after a BeginInit.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.objLockEvents">
            <summary>
            Events to be locked during several processes.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.EventsToCorrect">
            <summary>
            List of events to be corrected for this provider.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.EventsPatched">
            <summary>
            List of events to be patched for this provider.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.newProperties">
            <summary>
            List of properties and values that are supplied by this Helper.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.PendingListIconsToProcess">
            <summary>
            Keeps a list of Icons set for different properties.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">The container where to add the controls.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSorted(System.Windows.Forms.ListView)">
            <summary>
            Gets the Sorted property for a ListView.
            </summary>
            <param name="lView">The ListView to be test.</param>
            <returns>True elements are ordered, otherwise false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSorted(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets the Sorted property for a ListView.
            </summary>
            <param name="lView">The ListView to be set.</param>
            <param name="value">Indicates if values in ListView must be ordered or not.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSortKey(System.Windows.Forms.ListView)">
            <summary>
            Gets SortKey property for a ListView.
            </summary>
            <param name="lView">The ListView to be test.</param>
            <returns>The current SortKey value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortKey(System.Windows.Forms.ListView,System.Int32)">
            <summary>
            Sets SortKey property for a ListView.
            </summary>
            <param name="lView">The ListView to be set.</param>
            <param name="value">The new sortkey value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSortOrder(System.Windows.Forms.ListView)">
            <summary>
            Gets SortOrder property for a ListView.
            </summary>
            <param name="lView">The ListView to be test.</param>
            <returns>Indicates if values of ListView are ordered ascending or descending.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortOrder(System.Windows.Forms.ListView,System.Windows.Forms.SortOrder)">
            <summary>
            Sets SortOrder property for a ListView.
            </summary>
            <param name="lView">The ListView to be set.</param>
            <param name="value">The new SortOrder value indicating the kind of ordering for the ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetCorrectEventsBehavior(System.Windows.Forms.ListView)">
            <summary>
            Gets CorrectEventsBehavior property for a ListView.
            </summary>
            <param name="lView">The ListView to be test.</param>
            <returns>If events must be corrected or not.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetCorrectEventsBehavior(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets CorrectEventsBehavior property for a ListView.
            </summary>
            <param name="lView">The ListView to be set.</param>
            <param name="value">The new value indicating if events must be corrected.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetItemClickMethod(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the method to be invoked when the item click is fired, 
            this is a custom event that will be handled internally.
            </summary>
            <param name="lView">The listView to get the property.</param>
            <returns>The name of the method which will be invoked when the event should be fired,
             it should receive a ListViewItem item as parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetItemClickMethod(System.Windows.Forms.ListView,System.String)">
            <summary>
            Sets the name of the method to be invoked when the item click is fired, 
            this is a custom event that will be handled internally.
            </summary>
            <param name="lView">The listView to set the property.</param>
            <param name="value">The name of the method which will be invoked when 
            the event should be fired, it should receive a ListViewItem item as parameter.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetLargeIcons(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 ListView in the form to use for the list of large icons.
            </summary>
            <param name="lView">The ListView where to find the name.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetLargeIcons(System.Windows.Forms.ListView,System.String)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of large icons.
            </summary>
            <param name="lView">The ListView where to set the name.</param>
            <param name="value">The new name of the VB6 ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSmallIcons(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 listview in the form to use for the list of small icons.
            </summary>
            <param name="lView">The ListView where to find the name.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSmallIcons(System.Windows.Forms.ListView,System.String)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of small icons.
            </summary>
            <param name="lView">The ListView where to set the name.</param>
            <param name="value">The new name of the VB6 ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetColumnHeaderIcons(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 ListView in the form to use for the column headers icons.
            </summary>
            <param name="lView">The ListView where to find the name.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetColumnHeaderIcons(System.Windows.Forms.ListView,System.String)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the column headers icons.
            </summary>
            <param name="lView">>The ListView where to set the name.</param>
            <param name="value">The name of the VB6 ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSortedProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets static property for Sorted property.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The Sorted value in the ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortedProperty(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets static property for Sorted property.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new Sorted value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSortKeyProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets static property for SortKey property.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The SortKey value in the ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortKeyProperty(System.Windows.Forms.ListView,System.Int32)">
            <summary>
            Sets static property for SortKey property.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new SortKey value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortKeyProperty(System.Windows.Forms.ListView,System.Int32,System.Boolean)">
            <summary>
            Sets static property for SortKey property.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new SortKey value.</param>
            <param name="onDesignMode">Indicates if design mode is currently active.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSortOrderProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets static property for SortOrder property.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The SortOrder value in the ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortOrderProperty(System.Windows.Forms.ListView,System.Windows.Forms.SortOrder)">
            <summary>
            Sets static property for SortOrder property.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new SortOrder value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSortOrderProperty(System.Windows.Forms.ListView,System.Windows.Forms.SortOrder,System.Boolean)">
            <summary>
            Sets static property for SortOrder property.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new SortOrder value.</param>
            <param name="onDesignMode">Indicates if design mode is currently active.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetLargeIconsProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 ListView in the form to use for the list of large icons.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetLargeIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of large icons.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new name for the VB6 ListView.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetLargeIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of large icons.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new name for the VB6 ListView.</param>
            <param name="delayProcessing">Delays the processing of the property to after the EndInit.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetSmallIconsProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 ListView in the form to use for the list of small icons.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSmallIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of small icons.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new name for the VB6 ListView.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetSmallIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the list of small icons.
            </summary>
            <param name="lView">The ListView to set.</param>
            <param name="value">The new value for the property.</param>
            <param name="delayProcessing">Delays the processing of the property to after the EndInit</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetColumnHeaderIconsProperty(System.Windows.Forms.ListView)">
            <summary>
            Gets the name of the VB6 ListView in the form to use for the column headers.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The name of the VB6 ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetColumnHeaderIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean)">
            <summary>
            Sets the name of the VB6 ListView in the form to use for the column headers
            </summary>
            <param name="lView">The ListView to set</param>
            <param name="value">The name for VB6 ListView</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetColumnHeaderIconsProperty(System.Windows.Forms.ListView,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the name of the VB6 listview in the form to use for the column headers.
            </summary>
            <param name="lView">The ListView to set</param>
            <param name="value">The new value for the property.</param>
            <param name="delayProcessing">Delays the processing of the property to after the EndInit.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetColumnHeaderItemIconProperty(System.Windows.Forms.ColumnHeader)">
            <summary>
            Gets the Icon property of a ColumnHeader.
            </summary>
            <param name="cHeader">The source ColumnHeader.</param>
            <returns>The key|index of the Icon for the ColumnHeader.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetColumnHeaderItemIconProperty(System.Windows.Forms.ColumnHeader,System.Object)">
            <summary>
            Sets the Icon property of a ColumnHeader.
            </summary>
            <param name="cHeader">The source ColumnHeader.</param>
            <param name="value">The new key|index of the Icon for the ColumnHeader.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListItemIconProperty(System.Windows.Forms.ListViewItem)">
            <summary>
            Gets the Icon property of a ListItem (Key|Index to use for LargeIcons).
            </summary>
            <param name="lItem">The source ListItem.</param>
            <returns>The Key|Index of the Icon to use when LargeIcons are shown.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetListItemIconProperty(System.Windows.Forms.ListViewItem,System.Object)">
            <summary>
            Sets the Icon property of a ListItem (Key|Index to use for LargeIcons).
            </summary>
            <param name="lItem">The source ListItem.</param>
            <param name="value">The new Key|Index of the Icon to use when LargeIcons are shown.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListItemSmallIconProperty(System.Windows.Forms.ListViewItem)">
            <summary>
            Gets the SmallIcon property of a ListItem (Key|Index to use for SmallIcons).
            </summary>
            <param name="lItem">The source ListItem.</param>
            <returns>The Key|Index of the SmallIcon to use when SmallIcons are shown.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SetListItemSmallIconProperty(System.Windows.Forms.ListViewItem,System.Object)">
            <summary>
            Sets the SmallIcon property of a ListItem (Key|Index to use for SmallIcons).
            </summary>
            <param name="lItem">The source ListItem.</param>
            <param name="value">The new Key|Index of the SmallIcon to use when SmallIcons are shown.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.AddListItemSmallIconProperty(System.Windows.Forms.ListViewItem,System.Object)">
            <summary>
            Sets the SmallIcon property of a ListItem, it works as SetListItemSmallIconProperty does 
            but the ListItem is returned so it can be used in the normal upgrade of the functions 
            ListView.Add and ListView.Insert.
            </summary>
            <param name="lItem">The ListItem source.</param>
            <param name="value"></param>
            <returns>The resultant ListView item.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.PatchDrawItemEvents(System.Windows.Forms.ListView)">
            <summary>
            In order to handle the property SmallIcons of a ListItem some Draw events must be handled.
            </summary>
            <param name="lView">The ListView source.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListViewSubItem(System.Windows.Forms.ListViewItem,System.Int32)">
            <summary>
            Returns a subItem from a ListView item.
            </summary>
            <param name="lItem">The parent item.</param>
            <param name="index">The index of the item that has to be returned.</param>
            <returns>The found ListViewSubItem.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListViewSubItem(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListView,System.Int32)">
            <summary>
            Returns a subItem from a ListView item.
            </summary>
            <param name="lItem">The parent item</param>
            <param name="parentListView">The parent ListView that will contain the ListView item.</param>
            <param name="index">The index of the item that has to be returned.</param>
            <returns>The found ListViewSubItem.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListViewColumnLeftProperty(System.Windows.Forms.ListView,System.Windows.Forms.ColumnHeader)">
            <summary>
            Returns the left property for a column.
            </summary>
            <param name="lView">The ListView containing the column.</param>
            <param name="column">The Column to test.</param>
            <returns>The left value of the column.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetListViewColumnLeftProperty(System.Windows.Forms.ListView.ColumnHeaderCollection,System.Int32)">
            <summary>
            Returns the left property for a column.
            </summary>
            <param name="columns">The ListView columns</param>
            <param name="columnIndex">The Column to test.</param>
            <returns>The left value of the column.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CheckForProperty(System.Windows.Forms.ListView,UpgradeHelpers.VB6.Gui.ListViewHelper.newPropertiesEnum)">
            <summary>
            Check if the property 'newPropertiesEnum' is already defined for this list view.
            </summary>
            <param name="lView">The list view to test.</param>
            <param name="prop">The new PropertiesEnum.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CheckNewProperties(System.Windows.Forms.ListView)">
            <summary>
            Checks if the lView is controlled by the newProperties Dictionary.
            </summary>
            <param name="lView">The ListView to test.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetDefaultValueForProperty(UpgradeHelpers.VB6.Gui.ListViewHelper.newPropertiesEnum)">
            <summary>
            Returns a default value for the specified property.
            </summary>
            <param name="prop">The property requesting a default value.</param>
            <returns>A default value casted as object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetCustomListItemComparer(System.Windows.Forms.ListView)">
            <summary>
            Gets the Custom List Item Comparer for a ListView.
            </summary>
            <param name="lView">The ListView to test.</param>
            <returns>The custom comparer for the ListView.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.SyncSortedProperty(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            The value for Sorted depends in the value of the property Sorting, so 
            whenever you set Sorted it syncs to Sorting.
            </summary>
            <param name="lView">The ListView to sync.</param>
            <param name="res">Indicates if sort must be done.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ProcessIconListsProperties">
            <summary>
            Loads the .NET ImageLists to be used for ListViews from the VB6 ImageLists.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ProcessColumnHeaderIconsProperty(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Process the Column Header Icons property for a ListView.
            </summary>
            <param name="lView">The ListView to set the property.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CleanColumnHeaderItemIconProperty(System.Windows.Forms.ListView)">
            <summary>
            Cleans the values for the ColumHeaderItemIcon of each ColumnHeader in the ListView.
            </summary>
            <param name="lView">The parent ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ProcessSmallIconsProperty(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Process the small icons property for a ListView.
            </summary>
            <param name="lView">The ListView to set the property.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ProcessLargeIconsProperty(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Process the large icons property for a ListView.
            </summary>
            <param name="lView">The ListView to set the property.</param>
            <param name="onDesignMode">Is Design Mode</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetImageListHelper(System.Windows.Forms.ListView,System.String,System.Boolean)">
            <summary>
            Returns a ImageListHelper created based on a VB6 ImageList (name).
            </summary>
            <param name="lView">The ListView is used to get access to 
            the original VB6 ImageList based on its name.</param>
            <param name="VB6ImageListName">The name of the VB6 Image List.</param>
            <param name="onDesignMode">Is Design Mode?</param>
            <returns>An instance of a ImageListHelper.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.GetImageListHelper(System.Object)">
            <summary>
            Returns a ImageListHelper created based on a VB6 ImageList object.
            </summary>
            <param name="VB6ImageList">The VB6 Imagelist object.</param>
            <returns>An instance of a ImageListHelper.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CleanDeadReferences">
            <summary>
            Cleans the public dictionaries from old references of ListViews alreay disposed.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CorrectEventsBehavior">
            <summary>
            Deattach some events for the ListViews in order to be managed internally. 
            It means to replace the current behaviour.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.PatchItemClickEvent(System.Windows.Forms.ListView)">
            <summary>
            Patchs the custom event ItemClick for a listView.
            </summary>
            <param name="lView">The source ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.CorrectEventsForListView(System.Windows.Forms.ListView)">
            <summary>
            Patches the events for a specific ListView.
            </summary>
            <param name="lView">The source ListView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.InvokeEvents(System.Windows.Forms.ListView,System.String,System.Object[])">
            <summary>
            Allows to invoke the patched events for a ListView.
            </summary>
            <param name="source">The source ListView.</param>
            <param name="eventName">The name of the event to be invoked.</param>
            <param name="args">The args of the event to be used in the invokation.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_Disposed(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Disposed event of a ListView so we can clean it from EventsPatched.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ManuallyRemoveFromPatchedEvents(System.Windows.Forms.ListView)">
            <summary>
            </summary>
            <param name="lView"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event handler for the MouseUp event of a ListView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Click event of a ListView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Double Click event of a ListView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event handler for the Key Up event of a ListView.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The key event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_DrawItem(System.Object,System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            Event handler for the DrawItem event of a ListView, 
            required to manage the property SmallIcon of the ListItems.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The DrawListView event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_DrawSubItem(System.Object,System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            Event handler for the DrawSubItem event of a ListView, 
            required in order to process the property 
            listviewSubItem.UseItemStyleForSubItems when it is set to false.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The DrawListViewSubItem event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.DrawSubItemIcon(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Int32,System.Drawing.Image)">
            <summary>
            Method to draw the icon on the subitem 
            </summary>
            <param name="e">The event arguments</param>
            <param name="x">The x coordinate </param>
            <param name="image">The image to be drawn</param>
            <returns>The x position after the drawing action</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_DrawColumnHeader(System.Object,System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            Event handler for the DrawColumnHeader event of a ListView, 
            required to manage the property SmallIcon of the ListItems.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.DrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs,System.Windows.Forms.ColumnHeader,System.Drawing.Image)">
            <summary>
            Takes care of drawing a column header using an image.
            </summary>
            <param name="e">The DrawListViewColumnHeader event arguments.</param>
            <param name="colH">The ColumnHeader to be drawn.</param>
            <param name="img">The Image where to draw the column.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewHelper.ListView_ItemClickDelegate">
            <summary>
            Delegate for ItemClick event.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewHelper.newPropertiesEnum">
            <summary>
            Enum to handle the different properties and custom behaviors supplied by this Helper.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewHelper.IMessageFilterImplementer">
            <summary>
            Class provided to patch some events that require to catch the messages from windows
            like DoubleClick event for a ListView.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.IMessageFilterImplementer.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Catches the DoubleClick Windows Message.
            </summary>
            <param name="m">The Windows Message.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer">
            <summary>
            Custom class to do the comparison of columns of a ListView.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer._Sorted">
            <summary>
            Stores if ListView is sorted.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer._SortKey">
            <summary>
            Stores the SortKey value for the ListView.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer._SortOrder">
            <summary>
            Stores the SortOrder value for the ListView.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Does the comparison between two ListView items.
            </summary>
            <param name="x">A ListView item to be compared.</param>
            <param name="y">A ListView item to be compared.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer.Sorted">
            <summary>
            Indicates if ListView is sorted.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer.SortKey">
            <summary>
            Indicates the SortKey value for the ListView.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ListViewHelper.ListViewItemComparer.SortOrder">
            <summary>
            Indicates the SortOrder value for the ListView.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ListViewExtensions">
            <summary>
            Class To Extend ListViewItems
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ListViewExtensions.SelectedItem(System.Windows.Forms.ListView)">
            <summary>
            Get the actual selected item
            </summary>
            <param name="list">ListView to check on</param>
            <returns>ListViewItem selected</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MenuHelper">
            <summary>
            Extender that adds support to special functionality of the menus in .NET.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MenuHelper.CheckDropDownBehavior">
            <summary>
            List of menus that has a CheckDropDown behaviour.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="container">The container where to add the controls.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.GetCheckDropDownBehavior(System.Windows.Forms.MenuStrip)">
            <summary>
            Gets the current value for the property CheckDropDownBehavior for a Main Menu.
            </summary>
            <param name="mainMenu">The MainMenu to consult for its property value.</param>
            <returns>The current stored value or false.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.SetCheckDropDownBehavior(System.Windows.Forms.MenuStrip,System.Boolean)">
            <summary>
            Sets the value for the property CheckDropDownBehavior for a Main Menu.
            </summary>
            <param name="mainMenu">The MainMenu to set the value.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.ToolStripItem_ItemRemoved(System.Object,System.Windows.Forms.ToolStripItemEventArgs)">
            <summary>
            This event handler is included just in case that a new menuItem is removed in runtime, 
            so it should be included in the RemoveCheckDropDownBehavior.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The ToolStripItem event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.ToolStripItem_ItemAdded(System.Object,System.Windows.Forms.ToolStripItemEventArgs)">
            <summary>
            This event handler is included just in case that a new menuItem is added in runtime, 
            so it should be included in the AddCheckDropDownBehavior.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The ToolStripItem event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.RemoveCheckDropDownBehavior(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Removes the event handler used to check for the correct dropdown behavior.
            </summary>
            <param name="menuItem">The menuItem to remove the event handlers.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.AddCheckDropDownBehavior(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Adds the proper event handler to check for the correct dropdown behavior.
            </summary>
            <param name="menuItem">The menuItem to set the event handlers.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.ToolStripDropDownItem_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Event handler included to manage propertly the case where any parent is disabled so 
            it shouldn't be displayed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The Cancel event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.HasParentMenuDisabled(System.Windows.Forms.ToolStripItem,System.Boolean)">
            <summary>
            Finds out if the parent menu is disabled.
            </summary>
            <param name="menu">The child menu</param>
            <param name="recursive">A flag to look into the parent's parent and so on.</param>
            <returns>True if the menu parent is disabled, if the flag recursive is set then it will
            return true if any parent menu is disabled, otherwise it returns false.
            </returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.HasParentMenuDisabled(System.Windows.Forms.ToolStripItem)">
            <summary>
            Finds out if the parent menu is disabled.
            </summary>
            <param name="menu">The child menu.</param>
            <returns>True if any parent menu is disabled, otherwise it returns false.
            </returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MenuHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MenuHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MSDataGridHelper">
            <summary>
            Implements functionality in the MSDataGrid which was available in VB6 and is not in .NET.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor with container.
            </summary>
            <param name="container">The container where the button is included.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.CheckIfIsAMSDataGrid(System.Object)">
            <summary>
            Checks if the instance represents a MSDataGrid.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.GetSplits(System.Object)">
            <summary>
            Returns the property Splits of the object if it is a MSDataGrid.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.GetColumns(System.Object)">
            <summary>
            Returns the property Columns of the object if it is a MSDataGrid.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.GetGridLayout(System.Object)">
            <summary>
            Allows to have access to the grid layout in design time.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.SetGridLayout(System.Object,UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo)">
            <summary>
            Sets a grid layout to a given grid.
            </summary>
            <param name="grid">The grid to set the grid layout to.</param>
            <param name="value">The new grid layout.</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MSDataGridHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerEditor">
            <summary>
            Class to implement the custom editor of the property GridLayout.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Informs what will be the type of designer to be used, in this case it will be modal.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Takes care of displaying the modal window to edit the current value.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo">
            <summary>
            Represents the grid layout for a MSDataGrid.  
            Stores and exposes the required properties to model the grid layout.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo.#ctor(UpgradeHelpers.VB6.Gui.Splits,UpgradeHelpers.VB6.Gui.Columns,System.String)">
            <summary>
            Constructor method. Builds an instance of MSDataGridHelperLayoutInfo with 
            the specified values for its properties.
            </summary>
            <param name="gridSplits">GridSplits property value.</param>
            <param name="gridColumns">GridColumns property value.</param>
            <param name="lastUpdate">LastUpdate property value.</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo.GridSplits">
            <summary>
            Obtains the GridSplits property.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo.GridColumns">
            <summary>
            Obtains the GridColumns property.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo.LastUpdate">
            <summary>
            Obtains the LastUpdate property.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfoConverter">
            <summary>
            Class to execute conversion between MSDataGridHelperLayoutInfo type and 
            other types so it can be serialized and displayed in the property grid of the designer.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, 
            using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to 
            the type of this converter, using the specified context. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified 
            context and culture information. 
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If nullNothingnullptra null reference 
            (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView">
            <summary>
            A designer form to edit splits and columns for a MSDataGridHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.#ctor(UpgradeHelpers.VB6.Gui.MSDataGridHelperLayoutInfo)">
            <summary>
            Builds an instance of MSDataGridHelperDesignerModalView with 
            the specified grid layout information object.
            </summary>
            <param name="gridInfo">A MSDataGridHelperLayoutInfo containing the grid layout information 
            for the new instance.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.MSDataGridHelperDesignerModalView_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event by updating the splits and columns contained in the grid.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.UpdatesTreeView">
            <summary>
            Updates the information contained in the treeview to represent the list of splits and columns.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.TriesToUpdateLastSelectedNode">
            <summary>
            Tries to select a node that was previously selected before the UpdatesTreeView.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.AddColumnList(UpgradeHelpers.VB6.Gui.Split,System.Windows.Forms.TreeNode)">
            <summary>
            Adds the columns within a split.
            </summary>
            <param name="split"></param>
            <param name="trNode"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.GetSplitColumnTextRepresentation(System.Object)">
            <summary>
            Returns a textual representation of the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.trvLayout_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            When a node has been selected.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.UpdateInformation(System.Windows.Forms.TreeNode)">
            <summary>
            Takes care of updating the information displayed for the current selected split or column, 
            also corrects the state of the edition buttons.
            </summary>
            <param name="treeNode"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.CleanInformation">
            <summary>
            Cleans the information displayed as no split or column is selected, 
            also corrects the state of the edition buttons.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.GetSelectedSplitColumn(System.Windows.Forms.TreeNode)">
            <summary>
            Obtains a reference to the current split or column selected in the treeview.
            </summary>
            <param name="treeNode"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.cmdAddSplit_Click(System.Object,System.EventArgs)">
            <summary>
            Takes care of adding a new split.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.cmdAddColumn_Click(System.Object,System.EventArgs)">
            <summary>
            Takes care of adding a new column.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.cmdDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Takes care of deleting the current selected split or column.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.propGrid_PropertyValueChanged(System.Object,System.Windows.Forms.PropertyValueChangedEventArgs)">
            <summary>
            Updates the text for a node in the treenode when a property is updated.
            </summary>
            <param name="s"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.trvLayout_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            To manage the delete keyword.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.MSDataGridHelperDesignerModalView.gridInfo">
            <summary>
            Returns the grid layout information object.
            </summary>
            <returns>A MSDataGridHelperLayoutInfo containing the grid layout information for this object.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.Splits">
            <summary>
            Imports the original MSDataGrid Splits interface.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Splits.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Splits.Add(System.Int16)">
            <summary>
            Add object
            </summary>
            <param name="Index">index position to add to</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Splits.Remove(System.Object)">
            <summary>
            Remove Object
            </summary>
            <param name="Index">index position to remove from</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Splits.Count">
            <summary>
            Object Count
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Splits.Item(System.Object)">
            <summary>
            Array Access
            </summary>
            <param name="Index">index to access</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.Split">
            <summary>
            Imports the original MSDataGrid Split interface.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Split.ClearSelCols">
            <summary>
            Clear Selected Columns
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.AllowFocus">
            <summary>
            Allow Focus
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.AllowRowSizing">
            <summary>
            Allow Row Sizing
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.AllowSizing">
            <summary>
            Allow Sizing
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.CurrentCellVisible">
            <summary>
            Current Cell Visible
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.FirstRow">
            <summary>
            First Row
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.Index">
            <summary>
            Actual Index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.LeftCol">
            <summary>
            Left Column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.Locked">
            <summary>
            Is Locked?
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.MarqueeStyle">
            <summary>
            Marquee Style
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.RecordSelectors">
            <summary>
            Record Selectors
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.ScrollBars">
            <summary>
            ScrollBars
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.ScrollGroup">
            <summary>
            ScrollGroup
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.SelEndCol">
            <summary>
            Select End Column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.SelStartCol">
            <summary>
            Select Start Column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.Size">
            <summary>
            Size object
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.SizeMode">
            <summary>
            Size Mode
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Split.Columns">
            <summary>
            Return Columns Object
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.Columns">
            <summary>
            Imports the original MSDataGrid Columns interface.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Columns.GetEnumerator">
            <summary>
            Get Enumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Columns.Add(System.Int16)">
            <summary>
            Add Column
            </summary>
            <param name="Index">at index</param>
            <returns>Column Object</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Columns.Remove(System.Object)">
            <summary>
            Remove Column
            </summary>
            <param name="Index">at index</param>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Columns.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Columns.Item(System.Object)">
            <summary>
            Array Access
            </summary>
            <param name="Index">array position</param>
            <returns>Column Object</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.Column">
            <summary>
            Imports the original MSDataGrid Column interface.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Column.CellText(System.Object)">
            <summary>
            CellText
            </summary>
            <param name="Bookmark">object</param>
            <returns>string value</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.Column.CellValue(System.Object)">
            <summary>
            CellValue
            </summary>
            <param name="Bookmark">object to Bookmark</param>
            <returns>cell object</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Alignment">
            <summary>
            Alignment
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.AllowSizing">
            <summary>
            Allow Sizing
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Button">
            <summary>
            is Button?
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Caption">
            <summary>
            Caption
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.ColIndex">
            <summary>
            Column Index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.DataChanged">
            <summary>
            Data changed
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.DataField">
            <summary>
            DataField
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.DividerStyle">
            <summary>
            DividerStyle
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Locked">
            <summary>
            is Locked?
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.NumberFormat">
            <summary>
            Number Format
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.WrapText">
            <summary>
            WrapText
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.Column.DataFormat">
            <summary>
            DataFormat
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.AlignmentConstants">
            <summary>
            Imports the original MSDataGrid AlignmentConstants enumeration.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.AlignmentConstants.dbgLeft">
            <summary>
            Left Alignment
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.AlignmentConstants.dbgRight">
            <summary>
            Right Alignment
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.AlignmentConstants.dbgCenter">
            <summary>
            Center Alignment
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.AlignmentConstants.dbgGeneral">
            <summary>
            General Alignment
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.DividerStyleConstants">
            <summary>
            Imports the original MSDataGrid DividerStyleConstants enumeration.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgNoDividers">
            <summary>
            No Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgBlackLine">
            <summary>
            Black Line Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgDarkGrayLine">
            <summary>
            Gray Line Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgRaised">
            <summary>
            Raised Line Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgInset">
            <summary>
            Inset Line Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgUseForeColor">
            <summary>
            Use ForeColor Line Divider
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.DividerStyleConstants.dbgLightGrayLine">
            <summary>
            LightGray Line Divider
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants">
            <summary>
            Imports the original MSDataGrid MarqueeStyleConstants enumeration.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgDottedCellBorder">
            <summary>
            Dotted Cell Border
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgSolidCellBorder">
            <summary>
            Solid border
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgHighlightCell">
            <summary>
            High light cell
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgHighlightRow">
            <summary>
            High Light Row
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgHighlightRowRaiseCell">
            <summary>
            High light Row Raised
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgNoMarquee">
            <summary>
            No marquee
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.MarqueeStyleConstants.dbgFloatingEditor">
            <summary>
            Floating editor
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ScrollBarsConstants">
            <summary>
            Imports the original MSDataGrid ScrollBarsConstants enumeration.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ScrollBarsConstants.dbgNone">
            <summary>
            None
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ScrollBarsConstants.dbgHorizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ScrollBarsConstants.dbgVertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ScrollBarsConstants.dbgBoth">
            <summary>
            Vertical and Horizontal
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ScrollBarsConstants.dbgAutomatic">
            <summary>
            Automatic
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.SplitSizeModeConstants">
            <summary>
            Imports the original MSDataGrid SplitSizeModeConstants enumeration.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SplitSizeModeConstants.dbgScalable">
            <summary>
            Scalable
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SplitSizeModeConstants.dbgExact">
            <summary>
            Exact
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.PictureBoxHelper">
            <summary>
            Helper to support painting in controls/forms.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
            <param name="X2">This argument is discarded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
            <param name="X2">This argument is discarded.</param>
            <param name="Y2">This argument is discarded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
            <param name="X2">This argument is discarded.</param>
            <param name="Y2">This argument is discarded.</param>
            <param name="Width2">This argument is discarded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
            <param name="X2">This argument is discarded.</param>
            <param name="Y2">This argument is discarded.</param>
            <param name="Width2">This argument is discarded.</param>
            <param name="Height2">This argument is discarded.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.PictureBoxHelper.PaintPicture(System.Windows.Forms.PictureBox,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Paints an Image in the specified position and size.
            </summary>
            <param name="mpicture">The control where to paint.</param>
            <param name="Picture">The image to paint.</param>
            <param name="X1">The position in the X axis.</param>
            <param name="Y1">The position in the Y axis.</param>
            <param name="Width1">The width used to paint the image.</param>
            <param name="Height1">The height used to paint the image.</param>
            <param name="X2">This argument is discarded.</param>
            <param name="Y2">This argument is discarded.</param>
            <param name="Width2">This argument is discarded.</param>
            <param name="Height2">This argument is discarded.</param>
            <param name="Opcode">This argument is discarded.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ShapeHelper">
            <summary>
            Helper to support VB6 Shape controls.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._BackColor">
            <summary>
            Stores the BackColor property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper.sBrush">
            <summary>
            Brush used to paint the Shape control.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._BackStyle">
            <summary>
            Stores the BackStyle property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper.sPen">
            <summary>
            Pen used to paint the Shape Control.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._BorderColor">
            <summary>
            Stores the BorderColor property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._BorderStyle">
            <summary>
            Stores the BorderStyle property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._BorderWidth">
            <summary>
            Stores the BorderWidth property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._FillColor">
            <summary>
            Stores FillColor property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._FillStyle">
            <summary>
            Stores FillStyle property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._Shape">
            <summary>
            Stores the Shape property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper._RoundPercent">
            <summary>
            Stores the RoundPercent property.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.ShapeHelper_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Manages the paint event of the Shape control.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The Paint event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.ShapeHelper_Resize(System.Object,System.EventArgs)">
            <summary>
            Manages the Resize event to force the repaint.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawRoundSquare(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a round square.
            </summary>
            <param name="clientRectangle"></param>
            <param name="g"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawRoundRectangle(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a round rectangle.
            </summary>
            <param name="clientRectangle">The region where to draw.</param>
            <param name="g">The GDI used to draw the rectangle.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawCircle(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a circle.
            </summary>
            <param name="clientRectangle">The region where to draw.</param>
            <param name="g">The GDI used to draw the rectangle.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawOval(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws an oval.
            </summary>
            <param name="clientRectangle">The region where to draw.</param>
            <param name="g">The GDI used to draw the rectangle.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawSquare(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a square.
            </summary>
            <param name="clientRectangle">The region where to draw.</param>
            <param name="g">The GDI used to draw the rectangle.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.DrawRectangle(System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="clientRectangle">The region where to draw.</param>
            <param name="g">The GDI used to draw the rectangle.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriding OnPaintBackground method from UserControl.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.ShapeHelper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.ShapeHelper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.BackColor">
            <summary>
            Backgorund Color to display text and graphics.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.BackStyle">
            <summary>
            Indicates whether a Label or the background of a Shape is transparent or opaque.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.BorderColor">
            <summary>
            Color of the Shape border.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.BorderStyle">
            <summary>
            Border style of the Shape control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.BorderWidth">
            <summary>
            Width of the Shape border.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.FillColor">
            <summary>
            Color to fill in Shape control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.FillStyle">
            <summary>
            FillStyle in Shape control.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.Shape">
            <summary>
            The kind of Shape.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.RoundPercent">
            <summary>
            Adds a property to specify the percent used to 
            round the corners in round rectangles and round squares.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Gui.ShapeHelper.CreateParams">
            <summary>
            Overrinding CreateParams method from UserControl.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ShapeHelper.ShapesEnum">
            <summary>
            Enums for the shapes values.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ShapeHelper.BackStyleEnum">
            <summary>
            BackStyle enum.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.ShapeHelper.FillStyleEnum">
            <summary>
            Enums for FillStyle.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.SSTabHelper">
            <summary>
            Class created to add support to functionality lost in TabControls.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.TabsDisabled">
            <summary>
            Only the list of disabled tabs will be contained here.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.TabsVisible">
            <summary>
            Stores the visible status of each of the tabs of a tabcontrol.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.FormsWithTabsControlsUsingMnemonic">
            <summary>
            Controls when a tabControl should have its UseMnemonic property set.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ControlOfCustomDrawingMode">
            <summary>
            Controls which tabControls are drawing its text using custom drawing mode.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.DelayedSetUseMnemonic">
            <summary>
            Delays the set of the UseMnemonic property after the control has been properly initialized.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.OnInitialization">
            <summary>
            Indicates if EndInit hasn't been executed yet after a BeginInit.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.CanExtend(System.Object)">
            <summary>
            Determinates which controls can use these extra properties.
            </summary>
            <param name="extender">The object to test.</param>
            <returns>True if the object can extend the properties.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.BeginInit">
            <summary>
            Method BeginInit to implement inherited from ISupportInitialize.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.EndInit">
            <summary>
            Method EndInit to implement inherited from ISupportInitialize.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Class constructor.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetActiveTabFontStyle(System.Windows.Forms.TabControl)">
            <summary>
            Gets the value for the property ActiveTabFontStyle.
            </summary>
            <param name="tabControl">The tab control to test.</param>
            <returns>The current value for ActiveTabFontStyle property.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetActiveTabFontStyle(System.Windows.Forms.TabControl,UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum)">
            <summary>
            Sets the value for the property ActiveTabFontStyle.
            </summary>
            <param name="tabControl">The tab control to set.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.Static_GetActiveTabFontStyle(System.Windows.Forms.TabControl)">
            <summary>
            Gets the value for the property ActiveTabFontStyle.
            </summary>
            <param name="tabControl">The tab control to test.</param>
            <returns>The current value for ActiveTabFontStyle property.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.Static_SetActiveTabFontStyle(System.Windows.Forms.TabControl,UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum)">
            <summary>
            Sets the value for the property ActiveTabFontStyle.
            </summary>
            <param name="tabControl">The tab control to set.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetUseMnemonic(System.Windows.Forms.TabControl)">
            <summary>
            Adds the property UseMnemonic to the TabControls.
            </summary>
            <param name="tabControl">The TabControl to enable the property.</param>
            <returns>True if the TabControls have to set the UseMnemonic property set.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.Static_GetUseMnemonic(System.Windows.Forms.TabControl)">
            <summary>
            The static implmentation of GetUseMnemonic for internal use.
            </summary>
            <param name="tabControl">The TabControl to enable the property.</param>
            <returns>True if the TabControls have to set the UseMnemonic property set.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetUseMnemonic(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Adds the property UseMnemonic to the TabControls.
            </summary>
            <param name="tabControl">The TabControl to enable the property.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.Static_SetUseMnemonic(System.Windows.Forms.TabControl,System.Boolean,System.Boolean)">
            <summary>
            The static implementation of SetUseMnemonic, for internal use.
            </summary>
            <param name="tabControl">The TabControl to enable the property.</param>
            <param name="value">The value to be set.</param>
            <param name="OnInitialization"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.ProcessDelayedUseMnemonic(System.Windows.Forms.TabControl)">
            <summary>
            Process a UseMnemonic property for a tabControl when this was delayed.
            </summary>
            <param name="tabControl">The TabControl to process.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.TabControl_ParentForm_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the KeyDown event in the parent form so we can emulate the UseMnemonic property.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The Key event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.FindTabPageToHandleMnemonic(System.Windows.Forms.TabControl,System.Char)">
            <summary>
            Finds the TabPage that can respond to the mnemonic character 'character' within TabControl.
            </summary>
            <param name="tabCtrl">The parent TabControl.</param>
            <param name="character">The character to test.</param>
            <returns>Null if no tab page is found, otherwise the tab page is returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.ListOfTabPagesWithMnemonics(System.Windows.Forms.TabControl)">
            <summary>
            Returns a list of the tabpages for the tabControl with a Mnemonic set.
            </summary>
            <param name="tabCtrl">The TabControl parent.</param>
            <returns>A list, only valid tabPages are returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.CanProcessMnemonic(System.Windows.Forms.Control)">
            <summary>
            Checks if the control can process Mnemonics.
            </summary>
            <param name="ctrl">The control to test.</param>
            <returns>True if the control can process Mnemonics.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetTabEnabled(System.Windows.Forms.TabControl,System.Int32,System.Boolean)">
            <summary>
            Enables/Disables a Tab.
            </summary>
            <param name="TabCtrl">The TabCtrl to be enabled.</param>
            <param name="index">The TabControl index.</param>
            <param name="value">Indicates if enable/disable TabControl.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetCustomDrawingMode(System.Windows.Forms.TabControl,UpgradeHelpers.VB6.Gui.SSTabHelper.newPropertiesEnum,System.Boolean)">
            <summary>
            Sets the tabControl to use the custom drawing mode, 
            if the mode or the eventhandler have already been set then
            they are not set again.
            </summary>
            <param name="tabControl">The tabControl to set its custom value.</param>
            <param name="property">A custom behaviour value.</param>
            <param name="value">True if the custom drawing mode has to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.TabCtrl_EnabledChanged(System.Object,System.EventArgs)">
            <summary>
            Forces to redraw the tabs when the tab control has been enabled/disabled.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabEnabled(System.Windows.Forms.TabControl,System.Int32)">
            <summary>
            Gets the current status of a tab into a tabcontrol.
            </summary>
            <param name="TabCtrl">The tab control to test.</param>
            <param name="index">The tab index.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabEnabled(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage)">
            <summary>
            Indicates whether the given TabPage is currently enabled.
            </summary>
            <param name="tabControl">The <c>TabControl</c> object owning the given TabPage.</param>
            <param name="page">The <c>TabPage</c> object to test for.</param>
            <returns><c>true</c> if the tab is currently enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetPageIndex(System.Windows.Forms.TabControl,System.Windows.Forms.TabPage)">
            <summary>
            Gets the index of <c>page</c> in <c>tabControl</c> but considering already hidden tabpages.
            This method is different from calling <c>tabControl.TabPages.IndexOf</c> 
            due to the <c>SetVisible</c> implementation which removes
            tabs instead of hide them.
            </summary>
            <param name="tabControl">The TabControl object owning the page to test for.</param>
            <param name="page">The TabPage object to get index for.</param>
            <returns>The index page.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.TabControl_Selecting(System.Object,System.Windows.Forms.TabControlCancelEventArgs)">
            <summary>
            Avoids to select tabs disabled.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The TabControlCancel event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.TabControl_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Paints the gray disable font.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The DrawItem event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetModifiedFont(System.Drawing.Font,UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum)">
            <summary>
            Returns a modified font based on the property value.
            </summary>
            <param name="tabFont">The base font.</param>
            <param name="activeTabEnum">The enum specifying how to change it.</param>
            <returns>A new font modified.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetSelectedTabIndex(System.Windows.Forms.TabControl)">
            <summary>
            Used instead of SelectedIndex when SetTabVisible has been used previously in the TabCtrl.
            Using SetTabVisible in a TabCtrl may return incorrect values in TabCtrl.SelectedIndex.
            </summary>
            <param name="TabCtrl">The Tab Control to test.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetSelectedTabIndex(System.Windows.Forms.TabControl,System.Int32)">
            <summary>
            Used instead of SelectedIndex when SetTabVisible has been used previously in the TabCtrl.
            Using SetTabVisible in a TabCtrl may return incorrect values in TabCtrl.SelectedIndex.
            </summary>
            <param name="TabCtrl">The Tab Control to test.</param>
            <param name="index">The Tab index.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetTabVisible(System.Windows.Forms.TabControl,System.Int32,System.Boolean)">
            <summary>
            Sets the current visible status of a tab into a tabcontrol.
            </summary>
            <param name="TabCtrl">The Tab Control to set.</param>
            <param name="index">The Tab index.</param>
            <param name="value">The Visible value being set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.ReleaseResources(System.Windows.Forms.Form)">
            <summary>
            When the form dies the TabControls should be released
            </summary>
            <param name="form">The Form</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.UpdateTabsVisible(System.Windows.Forms.TabControl)">
            <summary>
            Internal function to update the TabsVisible for the TabCtrl.
            </summary>
            <param name="TabCtrl">The Tab Control to update.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabVisible(System.Windows.Forms.TabControl,System.Int32)">
            <summary>
            Sets the current visible status of a tab into a tabcontrol.
            </summary>
            <param name="TabCtrl">The Tab Control to test.</param>
            <param name="index">The Tab index.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.CheckForProperty(System.Windows.Forms.TabControl,UpgradeHelpers.VB6.Gui.SSTabHelper.newPropertiesEnum)">
            <summary>
            Check if the property 'newPropertiesEnum' is already defined for this tabcontrol.
            </summary>
            <param name="tabControl">The tab control to test.</param>
            <param name="prop">The property to check.</param>
            <returns>True if property could be checked.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.CheckNewProperties(System.Windows.Forms.TabControl)">
            <summary>
            Checks if the tabControl is controlled by the newProperties Dictionary.
            </summary>
            <param name="tabControl">The tab control to test.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetDefaultValueForProperty(UpgradeHelpers.VB6.Gui.SSTabHelper.newPropertiesEnum)">
            <summary>
            Returns a default value for the specified property.
            </summary>
            <param name="prop">The property requesting a default value.</param>
            <returns>A default value casted as object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.VisibleAffected(System.Windows.Forms.TabControl)">
            <summary>
            Indicates whether the given TabControl object has been affected by a 
            SetTabVisible operation.
            </summary>
            <param name="tabControl">The TabControl object to test for.</param>
            <returns><c>true</c> if at least one tab page of the control has been made invisible.</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.pagesCache">
            <summary>
            Keeps a cache containing Tab pages being searched.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabControlPages(System.Windows.Forms.TabControl)">
            <summary>
            Gets the TabPages of the Tab Control.
            </summary>
            <param name="tabControl">The Tab Control to test.</param>
            <returns>The visible Tab pages in the Tab Control.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetTabCaption(System.Windows.Forms.TabControl,System.Int32,System.String)">
            <summary>
            Sets the caption of a tab page.
            </summary>
            <param name="TabCtrl">The TabControl to use.</param>
            <param name="index">The index of the tab.</param>
            <param name="caption">The caption to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabCaption(System.Windows.Forms.TabControl,System.Int32)">
            <summary>
            Gets the caption of a tab in a TabControl.
            </summary>
            <param name="TabCtrl">The TabControl to use.</param>
            <param name="index">The index of the tab.</param>
            <returns>The caption of the specified tab.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetTabCount(System.Windows.Forms.TabControl)">
            <summary>
            Gets the number of tab pages in a TabControl.
            </summary>
            <param name="TabCtrl">The TabControl to test.</param>
            <returns>The number of tabs in the TabControl.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.SetSelectedIndex(System.Windows.Forms.TabControl,System.Int32)">
            <summary>
            Selects the specified tab in the TabControl.
            </summary>
            <param name="TabCtrl">The tab control to use.</param>
            <param name="index">The index of the tab to select.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.GetSelectedIndex(System.Windows.Forms.TabControl)">
            <summary>
            Gets the index of the selected tab.  Unlike in VB6, if
            no tabs are visible, it will return -1 instead of the
            index of the last visible tab.
            </summary>
            <param name="TabCtrl">The TabControl to use.</param>
            <returns>The index of the selected tab.</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.SSTabHelper.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum">
            <summary>
            Enum values for the custom property ActiveTabFont.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Strikeout">
            <summary>
            Strikeout
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.SSTabHelper.ActiveTabFontStyleEnum.Bold_Italic">
            <summary>
            BoldItalic
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.SSTabHelper.newPropertiesEnum">
            <summary>
            Enum to handle the different properties and custom behaviors supplied by this Helper.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.TreeViewHelper">
            <summary>
            Class provided to add lost functionality to the TreeViews .NET.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.TreeViewHelper.EventsToCorrect">
            <summary>
            List of events to be corrected for this provider.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.TreeViewHelper.EventsPatched">
            <summary>
            List of events to be patched for this provider.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Gui.TreeViewHelper.newProperties">
            <summary>
            List of properties and values that are supplied by this Helper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.GetTreeNodeExpandedImageProperty(System.Windows.Forms.TreeNode)">
            <summary>
            Gets the ExpandedImage property for a TreeNode (Key|Index).
            </summary>
            <param name="nItem">The TreeNode to get.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.SetTreeNodeExpandedImageProperty(System.Windows.Forms.TreeNode,System.Object)">
            <summary>
            Sets the ExpandedImage property for a TreeNode (Key|Index).
            </summary>
            <param name="nItem">The TreeNode to set.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.CreateDragImage(System.Windows.Forms.TreeNode)">
            <summary>
            Creates a drag image using the associated image to a treeNode. 
            This image is typically used in drag-and-drop operations
            </summary>
            <param name="tNode">The base node.</param>
            <returns>An image that can be used for Drag and Drop operations.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.CheckForProperty(System.Windows.Forms.TreeView,UpgradeHelpers.VB6.Gui.TreeViewHelper.newPropertiesEnum)">
            <summary>
            Check if the property 'newPropertiesEnum' is already defined for this TreeView.
            </summary>
            <param name="tView">The TreeView.</param>
            <param name="prop">The newPropertiesEnum to search.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.CheckNewProperties(System.Windows.Forms.TreeView)">
            <summary>
            Checks if a TreeView is controlled by the newProperties Dictionary.
            </summary>
            <param name="tView">The TreeView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.TreeView_Disposed(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Disposed event of a TreeView so it can be cleaned it.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.GetDefaultValueForProperty(UpgradeHelpers.VB6.Gui.TreeViewHelper.newPropertiesEnum)">
            <summary>
            Returns a default value for the specified property.
            </summary>
            <param name="prop">The property requesting a default value.</param>
            <returns>A default value casted as object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.CorrectEventsForTreeView(System.Windows.Forms.TreeView)">
            <summary>
            Patches the events for a specific treeview.
            </summary>
            <param name="tView">The TreeView.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.TreeView_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Event handler for the event AfterCollapse.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The TreeView event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.TreeView_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Event handler for the event AfterExpand.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The TreeView event arguments.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.CheckExpandedImageForTreeNode(System.Windows.Forms.TreeNode)">
            <summary>
            Checks if the image for a treenode should be changed based on 
            if an ExpandedImage has been defined for the TreeNode.
            </summary>
            <param name="nItem">The TreeNode.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.ValidateImageIndex(System.Windows.Forms.TreeView,System.Object)">
            <summary>
            Validates if the ImageIndex can be used with the images of the TreeView.
            </summary>
            <param name="tView">The TreeView source.</param>
            <param name="ImageID">The Image ID.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Gui.TreeViewHelper.InvokeEvents(System.Windows.Forms.TreeView,System.String,System.Object[])">
            <summary>
            Allows to invoke the patched events for a TreeView.
            </summary>
            <param name="source">The TreeView to invoke the event.</param>
            <param name="eventName">The event name to be invoked.</param>
            <param name="args">The arguments used to invoke the event.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Gui.TreeViewHelper.newPropertiesEnum">
            <summary>
            Enum to handle the different properties and custom behaviors supplied by this Helper.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Help.HelpSupportClass">
            <summary>
            This class provides support for Help feature.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.#ctor">
            <summary>
            Class Constructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.#ctor(System.String)">
            <summary>
            Class Constructor
            </summary>
            <param name="project">The current project name</param>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportClass.PatchedHelpRequested">
            <summary>
            List of the HelpRequested event handlers patched by control.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.SetHelpContextId(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets the Help Context Id to the control
            </summary>
            <param name="ctrl">Control to set the help id</param>
            <param name="HelpId">Help Id index</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.SetHelpContextId(System.Windows.Forms.Control,System.Int32,System.Windows.Forms.HelpNavigator)">
            <summary>
            Sets the Help Context Id to the control
            </summary>
            <param name="ctrl">Control to set the help id</param>
            <param name="HelpId">Help Id index</param>
            <param name="hNavigator">One of the HelpNavigator values to set</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.GetHelpContextId(System.Windows.Forms.Control)">
            <summary>
            Returns the Help Id key from the control
            </summary>
            <param name="ctrl">Control to search the help id</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.SetHelpNavigator(System.Windows.Forms.Control,System.Windows.Forms.HelpNavigator)">
            <summary>
            Sets the Help Navigator value to the control
            </summary>
            <param name="ctrl">Control to set the help navigator</param>
            <param name="hNavigator">One of the HelpNavigator values</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.CleanDeadReferences">
            <summary>
            It will clean the internal dictionaries from old references of controls alreay disposed.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.PatchHelpEventHandler(System.Windows.Forms.Control)">
            <summary>
            Replace the HelpRequested event handler placed by the helpProvider with 
            a custom event handler so we can catch when the user is requesting help.
            </summary>
            <param name="ctrl">The source control.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.RestoreHelpEventHandler(System.Windows.Forms.Control)">
            <summary>
            Restore the HelpRequested event handler that was originally added by 
            the helpProvider if one was previously patched.
            </summary>
            <param name="ctrl">The source control.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.Control_HelpRequested(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            Custom event handler used to patch the HelpRequested event of 
            the controls controlled by  the help provider.
            </summary>
            <param name="sender"></param>
            <param name="hlpevent"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportClass.ValidateHelpFile">
            <summary>
            Validates that HelpFile exists.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Help.HelpSupportClass.HelpFile">
            <summary>
            The help file name according to the respective project
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Help.HelpSupportClass.HelpIgnoreResctrictionsEnum">
            <summary>
            Help Ignore Restrictions Enum
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportClass.HelpIgnoreResctrictionsEnum.MDIContainerRestriction">
            <summary>
            MDI Container Restriction
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Help.HelpSupportComponent">
            <summary>
            This class provides support for Help feature.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.#ctor">
            <summary>
            Help Support Component Constructor
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Help Support Component Constructor, set the internal container
            </summary>
            <param name="container">add the instance to the container</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.ShowHelp">
            <summary>
            Opens the Help Window
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.ValidateHelpFile">
            <summary>
            Validates that HelpFile exists.
            </summary>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Help.HelpSupportComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpFile">
            <summary>
            Get/Set the HelpFile path
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpCommand">
            <summary>
            Get/Set Help Command
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpContext">
            <summary>
            Get/Set Help Context object
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants">
            <summary>
            Help Constants
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpContext">
            <summary>
            Help Context
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpQuit">
            <summary>
            Quit Help
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpContents">
            <summary>
            HelpContents
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpHelpOnHelp">
            <summary>
            Help on Help
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpSetContents">
            <summary>
            Set contents
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpContextPopup">
            <summary>
            Help Context Popup
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpForceFile">
            <summary>
            Force File
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpKey">
            <summary>
            Keyboard to show help
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpCommandHelp">
            <summary>
            Command to show help
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Help.HelpSupportComponent.HelpConstants.cdlHelpPartialKey">
            <summary>
            Partial key
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.UpgradeHelpers_VB6_Help_HelpSupportClass_ValidateHelpFile_OpenDialog_Filter">
            <summary>
              Looks up a localized string similar to 'Artchivos de ayuda (*.chm;*.html)|*.chm;*.html'.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.UpgradeHelpers_VB6_Help_HelpSupportClass_ValidateHelpFile_Question">
            <summary>
              Looks up a localized string similar to 'No se pudo hallar el archivo {0}. ¿Desea intentar hallarlo usted mismo?'.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.UpgradeHelpers_VB6_Help_HelpSupportClass_ValidateHelpFile_Question_Title">
            <summary>
              Looks up a localized string similar to 'Ayuda de Windows' (Windows Help).
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.UpgradeHelpers_VB6_Help_HelpSupportClass_ValidateHelpFile_ValidationFailure">
            <summary>
              Looks up a localized string similar to 'No se pudo hallar el archivo de Ayuda {0}. Compruebe si existe en su disco; de lo contrario necesitará instalarlo de nuevo..'
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.UpgradeHelpers_VB6_Help_ListViewHelper_PatchItemClickEvent_Err_Msg">
            <summary>
              Looks up a localized string similar to 'Error al crear parche para el evento &apos;ItemClick&apos;. {0}.'
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Resources.UpgradeHelpers_VB6.DefaultDragImage">
            <summary>
              Returns the default drag image.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Resources.Images">
            <summary>
            The Images helper class provides several functions to handle pictures, icons and images.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Resources.Images.CreateIconIndirect(UpgradeHelpers.VB6.Resources.Images.IconInfo@)">
            <summary>
            CreateIconIndirect function from user32.dll.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Resources.Images.GetIconInfo(System.IntPtr,UpgradeHelpers.VB6.Resources.Images.IconInfo@)">
            <summary>
            GetIconInfo function from user32.dll.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Resources.Images.IPictureDispToIcon(stdole.IPictureDisp)">
            <summary>
            Converts a IPictureDisp to Icon.
            </summary>
            <param name="iPictureDisp">The picture to be converted.</param>
            <returns>The source picture as an Icon.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Resources.Images.CreateCursor(System.Drawing.Image)">
            <summary>
            Converts an image into a cursor.
            </summary>
            <param name="source">The Image to be converted.</param>
            <returns>The source image as a Cursor.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Resources.Images.CreateCursor(stdole.IPictureDisp)">
            <summary>
            Converts a IPictureDisp into a cursor.
            </summary>
            <param name="source">The source IPicture to be converted.</param>
            <returns>The source IPicture as a Cursor.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Resources.Images.IconInfo">
            <summary>
            Structure to use to get info for a Icon.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Resources.Images.IconInfo.fIcon">
            <summary>
            use Icon
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Resources.Images.IconInfo.xHotspot">
            <summary>
            x position
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Resources.Images.IconInfo.yHotspot">
            <summary>
            y position
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Resources.Images.IconInfo.hbmMask">
            <summary>
            Pointer to Mask
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Resources.Images.IconInfo.hbmColor">
            <summary>
            Pointer to Palette
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ArraysHelper">
            <summary>
            The ArraysHelper contains functionality for some array operations, such as: 
            initialization, casting, and redimension.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32,System.Object[])">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32,System.Int32,System.Object[])">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32,System.Object)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="initValue">An initial value to set to each element.</param>
            <returns>A new one-dimensional array with its values initialized to initValue.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32,System.Int32,System.Object)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="E">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <param name="initValue">An initial value to set to each element.</param>
            <returns>A new one-dimensional array with its values initialized to initValue.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[])">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[])">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[],System.Object[])">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[],System.Object[])">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[],System.Object)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="initValue">The init value to use for each element in the array.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[],System.Object)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="initValue">The init value to use for each element in the array.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InternalInitializeArray(System.Int32[],System.Int32[],System.Type,System.Object)">
            <summary>
            Internal method to initialize a multi-dimensional array.
            </summary>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="itemType">The type to create the array.</param>
            <param name="value">The init value to use for each element in the array.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.RedimPreserve``1(``0,System.Int32[])">
            <summary>
            Executes a RedimPreserve over an array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions, for instance 'string[,,,]'.</typeparam>
            <param name="arraySource">The source array.</param>
            <param name="lengths">The length of the new dimensions.</param>
            <returns>The new array with the elements of the old one.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.RedimPreserve``1(``0,System.Int32[],System.Int32[])">
            <summary>
            Executes a RedimPreserve over an array.
            </summary>
            <typeparam name="A">The type of the array including the dimensions, for instance 'string[,,,]'.</typeparam>
            <param name="arraySource">The source array.</param>
            <param name="lengths">The length of the new dimensions.</param>
            <param name="lowerBounds">The lower bound of the new dimensions.</param>
            <returns>The new array with the elements of the old one.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.FillsOneDimensionArray(System.Array,System.Array,UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider)">
            <summary>
            Fills the one-dimension targetArray with either matching cell values from 
            sourceArray or with a initial value.
            </summary>
            <param name="sourceArray">The array object containing the values to copy.</param>
            <param name="targetArray">The new array where to copy the values.</param>
            <param name="valueProvider">a <c>InitialValueProvider</c> object used to get 
            the default values for the new cells.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.FillsMultiDimensionalArray(System.Array,System.Array,UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider)">
            <summary>
            Fills the n-dimension targetArray with either matching cell values from 
            sourceArray or with a initial value.
            </summary>
            <param name="sourceArray">The array object containing the values to copy.</param>
            <param name="targetArray">The new array where to copy the values.</param>
            <param name="valueProvider">a <c>InitialValueProvider</c> object used to get
            the default values for the new cells.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.CastArray``1(System.Array)">
            <summary>
            Casts an array from one type to another.
            </summary>
            <typeparam name="A">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="srcArray">The source array to cast.</param>
            <returns>A new array with the correct new target type.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.CalculateIndexes(System.Int32[]@,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Calculate the indexes of the next element to copy.
            </summary>
            <param name="indexes">The list of the indexes in the different dimensions for 
            the element to copy.</param>
            <param name="pos">The current position within the list of indexes.</param>
            <param name="lBounds">The list of lower bounds to use as limit.</param>
            <param name="UBounds">The list of upper bounds to use as limit.</param>
            <returns>The current position or -1 if the operation failed which means 
            there is no next element to copy.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.RunRedimPreserveVerifications(System.Object,System.Type,System.Int32[],System.Int32[])">
            <summary>
            Run some basic verifications on the parameters sent to RedimPreserve function.
            </summary>
            <param name="arrayPrototype">The source array to verify.</param>
            <param name="arrayType">The type of the source array.</param>
            <param name="lengths">The length of the dimensions.</param>
            <param name="lowerBounds">The lower bound of each dimension.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.GetFirstDimensionsSize(System.Array)">
            <summary>
            Gets the size for the first dimension for an array.
            </summary>
            <param name="array">The array to process.</param>
            <returns>The size of the first dimension of the array.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.GetLastDimensionSize(System.Array)">
            <summary>
            Gets the size for the last dimension for an array.
            </summary>
            <param name="array">The array to process.</param>
            <returns>The size of the last dimension of the array.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.DeepCopy(System.Object)">
            <summary>
            Makes a deep copy of an array.
            </summary>
            <param name="objectToCopy">Array to copy.</param>
            <returns>A deep copy of the array.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider">
            <summary>
            The InitialValueProvider provides an initial value from several methods.
            Used for initialization of element types of arrays.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.elementType">
            <summary>
            The Type of array's elements.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.constructorParams">
            <summary>
            The list of values to be sent to the constructor used in the method CreateInstanceValueType.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.initialized">
            <summary>
            Indicates if provider was already initialized.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.initializeMethod">
            <summary>
            The InitializeMethod for the current provider.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.constructor">
            <summary>
            The Constructor method if constructor is gotten from elementType.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.method">
            <summary>
            Some Method used for initialization of the elementType, like "CreateInstance".
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.#ctor(System.Type,System.Object[])">
            <summary>
            Constructor for IniatialValueProvider.
            </summary>
            <param name="elementType">The type of the array's elements.</param>
            <param name="constructorParams">The list of values to be sent to the constructor of 
            the item type of the array.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.GetInitialValue">
            <summary>
            Gets the value of initialization according to the InitialValueMethod of this provider.
            </summary>
            <returns>The value of initialization.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.Initialize">
            <summary>
            Initialize this provider to be able to gets the intialization value.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ArraysHelper.InitialValueProvider.InitialValueMethod">
            <summary>
            The Enumeration of the different kind of methods of initialization.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper">
            <summary>
            This Helper class is used to assist in the StructForAPI feature.
            When an structure has to do some interop with unmanaged code, we must provide
            a way to marshal arrays of fixed length strings.
            The way to do that is define an array of chars in the struct and a property 
            using this helper will facilitate 
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.#ctor(System.Char[],System.Int32,System.Int32[])">
            <summary>
            Builds an instance of a helper that is used when the StructForAPI feature is used.
            In those cases, arrays of FixedLength Strings have to be generated as char arrays (for marshalling reasons),
            and this helper provides a simplified way to "view" that array just any ordinary multidimensional array
            </summary>
            <param name="buffer">The array where the data will be</param>
            <param name="element_size">the size of each of the fixed strings</param>
            <param name="dimensions">the maximun length for each dimension</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.CheckValidIndexes(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Generic method used by the multidimensional indexer to validate indexes bounds
            </summary>
            <param name="indexDimension1">First Dimension index</param>
            <param name="indexDimension2">Second Dimension index</param>
            <param name="restIndexes">All other possible indexes</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.GetEnumerator">
            <summary>
            Returns an enumerator to facilitate transversal of all elements in array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.Item(System.Int32)">
            <summary>
            This indexer allows a simple access to the array elements, making it more natural
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.Item(System.Int32,System.Int32,System.Int32[])">
            <summary>
            This indexer allows a simple access to the array elements, making it more natural.
            Accessing 2 or more dimensions is supposed to be less frequent that accessing just one dimension, for
            that reason a second indexer is provided to support accessing more than one dimension
            </summary>
            <param name="indexDimension1"></param>
            <param name="indexDimension2"></param>
            <param name="restIndexes"></param>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.FixedLengthStringArrayHelper.Length">
            <summary>
            Returns the length of the array.
            For example if this helper is used for an array definition like:
            testarray(4) as String * 10
            
            Then this property will return 5. (Remember that unless specified arrays in VB6 started at 0)
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.AssemblyHelper">
            <summary>
            The AssemblyHelper obtains the information of Assemblies.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.AssemblyHelper.GetTitle">
            <summary>
            Gets the title (based on the AssemblyTitle attribute) of the current executing assembly.
            If no AssemblyTitle attribute is found then the Filename (without extension) is used
            </summary>
            <returns>The assembly title</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.AssemblyHelper.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the title of the currently executing assembly.
            </summary>
            <param name="assbly">The length of the new array.</param>
            <returns>The assembly title.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.CollectionHelper">
            <summary>
            The CollectionHelper contains a specific functionality to support VB6.Collection using
            System.Collections.Specialized.OrderedDictionary .Net native class.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.CollectionHelper.GetIndex(System.Collections.Specialized.OrderedDictionary,System.Object)">
            <summary>
            Searchs an element in Dictionary via a key and returns the index of the element.
            </summary>
            <param name="dict">Dictionary where to search the element.
            </param>
            <param name="key">Key of the element being searched.</param>
            <returns>Returns the index of the found element or -1 if element is not found.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.DateTimeHelper">
            <summary>
            The DateTimeHelper provides util functionality for Date and Time operations.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.DateTimeHelper.VB6MinValue">
            <summary>
            The minimal value for a Visual Basic 6 Date, which is 1899/12/30.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.DateTimeHelper.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
            Implementation of DatePart where DateValue is an object, in some cases this function is 
            expected to return null which is not done by Microsoft.VisualBasic.DateAndTime.DatePart.
            </summary>
            <param name="Interval">DateInterval enumeration value or String expression representing
            the part of the date/time value you want to return.
            </param>
            <param name="DateValue">Date value that you want to evaluate.</param>
            <param name="DayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies
            the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.</param>
            <param name="WeekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies
            the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.</param>
            <returns>Returns an Integer value containing the specified component of a given Date value 
            or null if DateValue is null.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.DateTimeHelper.ToString(System.DateTime)">
            <summary>
            Converts a DateTime to a String according to the format in Visual Basic 6.
            </summary>
            <param name="dateTime">The DateTime value to be converted to string.</param>
            <returns>The DateTime value converted to string.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.DateTimeHelper.Time">
            <summary>
            Implementation of function Time  from Visual Basic 6. This function returns only the Time part
            of a System.DataTime.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper">
            <summary>
            The ErrorHandlingHelper provides util functionality for Error Handling support. Specially the VB6
            Resume Next handling.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNext(UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextStatDelegate[])">
            <summary>
            Simulates the VB6 ResumeNext statement executing each statement inside a try/catch block,
            avoiding the throwing of exceptions.
            </summary>
            <param name="stats">A list of ResumeNextDelegate containing a list of statements to be executed in a try/catch block.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNext(System.Exception@,UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextStatDelegate[])">
            <summary>
            Simulates the VB6 ResumeNext statement executing each statement inside a try/catch block,
            avoiding the throwing of exceptions.
            </summary>
            <param name="ex">An Exception if any is thrown executing the statements or null if not.</param>
            <param name="stats">A list of ResumeNextDelegate containing a list of statements to be executed in a try/catch block.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextExpr``1(UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextExprDelegate)">
            <summary>
            Executes an expression inside a try/catch block to avoid throwing of exception. This expression is being
            executed inside a ResumeNext statement, for instance a condition of if, while, for, etc.
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="expr">The expression to be executed in a try/catch block.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextExpr``1(System.Exception@,UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextExprDelegate)">
            <summary>
            Executes an expression inside a try/catch block to avoid throwing of exception. This expression is being
            executed inside a ResumeNext statement, for instance a condition of if, while, for, etc.
            </summary>
            <typeparam name="T">The type of the class being created</typeparam>
            <param name="ex">An Exception if any is thrown executing the expression or null if not.</param>
            <param name="expr">The expression to be executed in a try/catch block.</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextStatDelegate">
            <summary>
            Delegate for each Resume Next stat sent to the ResumeNext method.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ErrorHandlingHelper.ResumeNextExprDelegate">
            <summary>
            Delegate for each Resume Next expression sent to the ResumeNextExpr method.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ExcelHelper">
            <summary>
            Provides support for excel object
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ExcelHelper.xlAutomatic">
            <summary>
            Excel Automatic constant -4105
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ExcelHelper.xlManual">
            <summary>
            Excel Manual constant -4135
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ExcelHelper.xlUpward">
            <summary>
            Excel Upward constant -4171
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ExcelHelper.xlWait">
            <summary>
            Excel Wait constant value 2
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Set(System.Object,System.String,System.Object)">
            <summary>
            Method to Set Excel properties using InvokeMember
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sProperty">Property to Set</param>
            <param name="oValue">Value to Set</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Get(System.Object,System.String,System.Object)">
            <summary>
            Method to Get values from Excel property
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sProperty">Property to get</param>
            <param name="oValue">Value</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Get(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Met
            Method to Get values from Excel property
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sProperty">Property to get</param>
            <param name="oValue1">Value</param>
            <param name="oValue2">Value</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Get(System.Object,System.String)">
            <summary>
            Method to Get values from Excel property
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sProperty">Property to get</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Method to invoke methods in excel using object array parameters
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sMethod">Method to call</param>
            <param name="oParam">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Invoke(System.Object,System.String,System.Object)">
            <summary>
            Method to invoke methods in excel using object array parameters
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sMethod">Method to call</param>
            <param name="oValue">Parameter</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ExcelHelper.Invoke(System.Object,System.String)">
            <summary>
            Method to invoke methods in excel using object array parameters
            </summary>
            <param name="obj">Excel instance</param>
            <param name="sMethod">Method to call</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.MemoryHelper">
            <summary>
            The MemoryHelper class has utility methods that handle memory-related issues, such as releasing and cleaning up memory.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.MemoryHelper.COMObjectsWithClose">
            <summary>
            List of strings with COM Objects that are needed to invoke Close method in ReleaseAndCleanObject.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ReleaseMemory">
            <summary>
            Function to call the Garbage Collector and reclaim any available memory.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ReleaseAndCleanObject(System.Object)">
            <summary>
            Function to release the memory bound to an object, it is expected that the
            parameter is bound to a COM Object which memory wants to be reclaimed.
            </summary>
            <param name="obj">A .NET object representing a COM Object.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ReleaseAndCleanObject``1(System.Object,System.Object)">
            <summary>
            Function to release the memory bound to an object, it is expected that the
            parameter is bound to a COM Object which memory wants to be reclaimed.
            </summary>
            <param name="obj">A .NET object representing a COM Object.</param>
            <param name="value">Value being assigned to the obj after releasing.</param>
            <returns>The value to be assigned to the obj.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ReleaseAndCleanObject(System.Object,System.Object)">
            <summary>
            Function to release the memory bound to an object, it is expected that the
            parameter is bound to a COM Object which memory wants to be reclaimed.
            </summary>
            <param name="obj">A .NET object representing a COM Object.</param>
            <param name="value">Value being assigned to the obj after releasing.</param>
            <returns>The value to be assigned to the obj.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.StructureToByteArray(System.Object)">
            <summary>
            In VB6, it was possible to copy variables using API functions like hMemCpy or 
            statements like LSET.
            This helper function is used to provide a mechanism to easily turn an structure into
            an array of bytes that can then be easily manipulated
            </summary>
            <param name="obj">The structure that will be copied to an array of bytes</param>
            <returns>An array of bytes containing a copy of the information hold by a struct</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ByteArrayToStructure``1(System.Byte[],``0@)">
            <summary>
            This overload calls ByteArrayToStructure assuming an startIndex of 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytearray"></param>
            <param name="obj"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.ByteArrayToStructure``1(System.Byte[],System.Int32,``0@)">
            <summary>
            In VB6, it was possible to copy variables using API functions like hMemCpy or 
            statements like LSET.
            This helper function is used to provide a mechanism to easily take an array
            of bytes and put that information inside an struct.
            </summary>
            <param name="bytearray">The array containing the information</param>
            <param name="startIndex">This index established the place where to start copying data from this array to the structure</param>
            <param name="obj">The target structure</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.CopyMemory``2(``0@,``1)">
            <summary>
            Copies data from one struct to another.
            This will be an exact copy of bytes.
            Users must be aware that reference types 
            might still be pointing to the same memory areas.
            Source and Destination might have different struct types
            </summary>
            <typeparam name="T2">Destination Struct Type</typeparam>
            <typeparam name="T1">Source Struct Type</typeparam>
            <param name="dest">Destination Struct</param>
            <param name="source">Source Struct</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.MemoryHelper.CopyValueToArray(System.Char[],System.String)">
            <summary>
            Copies data from an string to a character array
            </summary>
            <param name="destinationArray"></param>
            <param name="sourceValue"></param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ReflectionHelper">
            <summary>
            The ReflectionHelper class provides functionality to handle the instantiation, 
            setting/reading properties and method invocation using reflection on the .NET Framework. 
            Using of this class is optional, and will only appear if it is selected in the Upgrade Profile. 
            It is used when it is necessary to continue using late-bound calls to 
            objects in the migrated application.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ReflectionHelper.XML_TAG_DEFAULT_PROPERTY">
            <summary>
            Constant to access Xml Tag in the DefaulProperties file
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ReflectionHelper.XML_TAG_MAPPING">
            <summary>
            Constant to access Xml Tag in the DefaulProperties file
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetMember``1(System.Object,System.String,System.Object[])">
            <summary>
            Gets a member from an object by reflection.
            </summary>
            <typeparam name="T">The type, which the member value must be casted.</typeparam>
            <param name="obj">The source object that should be checked for the property.</param>
            <param name="propName">The name of the property that is required.</param>
            <param name="indexes">In the case that property represents an array 
            the index(es) must be specified here.</param>
            <returns>Returns the value of the member.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetMember(System.Object,System.String,System.Object[])">
            <summary>
            Gets a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the property.</param>
            <param name="propName">The name of the property that is required.</param>
            <param name="indexes">In the case that property represents an array 
            the index(es) must be specified here.</param>
            <returns>Returns the value of the member.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.SetMember(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Sets the value of a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the property.</param>
            <param name="propName">The name of the property that is required.</param>
            <param name="indexes">In the case that property represents an array 
            the index(es) must be specified here.</param>
            <param name="value">The new value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.LetMember(System.Object,System.String,System.Object[],System.Object)">
            <summary>
            Lets the value of a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the property.</param>
            <param name="propName">The name of the property that is required.</param>
            <param name="indexes">In the case that property represents an array 
            the index(es) must be specified here.</param>
            <param name="value">The new value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.LetMember(System.Object,System.String,System.Object)">
            <summary>
            Lets the value of a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the property.</param>
            <param name="propName">The name of the property that is required.</param>
            <param name="value">The new value to be set.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a member from an object by reflection.
            </summary>
            <typeparam name="T">The type, which the invokation value must be casted.</typeparam>
            <param name="obj">The source object that should be checked for the member.</param>
            <param name="memberName">The name of the member.</param>
            <param name="parameters">An array containing the values of the parameters 
            to be used in the invocation.</param>
            <returns>The value returned by the invocation if one is returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.Invoke``1(System.Object,System.String,System.Object[],System.String[])">
            <summary>
            Invokes a member from an object by reflection.
            </summary>
            <typeparam name="T">The type, which the invokation value must be casted.</typeparam>
            <param name="obj">The source object that should be checked for the member.</param>
            <param name="memberName">The name of the member.</param>
            <param name="parameters">An array containing the values of the parameters 
            to be used in the invocation.</param>
            <param name="paramNames">The names of params corresponding to the parameters sent
            int the other array 'parameters'.</param>
            <returns>The value returned by the invocation if one is returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            Invokes a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the member.</param>
            <param name="memberName">The name of the member.</param>
            <param name="parameters">An array containing the values of the parameters 
            to be used in the invocation.</param>
            <returns>The value returned by the invocation if one is returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.Invoke(System.Object,System.String,System.Object[],System.String[])">
            <summary>
            Invokes a member from an object by reflection.
            </summary>
            <param name="obj">The source object that should be checked for the member.</param>
            <param name="memberName">The name of the member.</param>
            <param name="parameters">An array containing the values of the parameters 
            to be used in the invocation.</param>
            <param name="paramNames">The names of params corresponding to the parameters sent
            int the other array 'parameters'.</param>
            <returns>The value returned by the invocation if one is returned.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.SetPrimitiveValue(System.Windows.Forms.Control@,System.Object,System.Object[])">
            <summary>
            Obtains the default property from 'ctl' and sets the 'propertyValue' to it.
            </summary>
            <param name="ctl">The control to be set the 'propertyValue'.</param>
            <param name="propertyValue">The value to be set to the default property of the 'obj'.</param>
            <param name="index">The arguments to invoke the default property if needed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.SetPrimitiveValue(System.Object@,System.Object,System.Object[])">
            <summary>
            Obtains the default property from 'obj' and sets the 'propertyValue' to it.
            </summary>
            <param name="obj">The object to be set the 'propertyValue'.</param>
            <param name="propertyValue">The value to be set to the default property of the 'obj'.</param>
            <param name="index">The arguments to invoke the default property if needed.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetPrimitiveValue``1(System.Object,System.Object[])">
            <summary>
            Obtains the default property value from the 'obj'.
            </summary>
            <param name="obj">The object to get the default property.</param>
            <typeparam name="T">The type, which the default property value must be casted.</typeparam>
            <param name="index">The arguments to invoke the default property if needed.</param>
            <returns>The default property value obtained from the 'obj'</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetPrimitiveValue(System.Object,System.Object[])">
            <summary>
            Obtains the default property value from the 'obj'.
            </summary>
            <param name="obj">The object to get the default property.</param>
            <param name="index">The arguments to invoke the default property if needed.</param>
            <returns>The default property value obtained from the 'obj'</returns>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ReflectionHelper.mappings">
            <summary>
            The mappings loaded from Mappings.xml resource file to map the member name during execution
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.ReflectionHelper.defaultProps">
            <summary>
            The default properties loaded from DefaultProperties.xml resource file
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.ExistMember(System.Object,System.String)">
            <summary>
            Functions to check if a member exists.
            </summary>
            <param name="obj">The object containing the member.</param>
            <param name="propName">The name of the member.</param>
            <returns>True if the member exists.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetDotNetMemberName(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the .NET name corresponding to this type and memberName.
            </summary>
            <param name="objType">The Type of the object being accessed via the ReflectionHelper.</param>
            <param name="memberName">The name of the member being searched.</param>
            <param name="theSetProperty">Indicates if look for the Set/Get default property.</param>
            <returns>The resultant name string to search into the object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.OrderNamedParameters(System.Object,System.String,System.Object[],System.String[])">
            <summary>
            Order the list of parameters for an invokation according to the corresponding
            parameter names in the list 'paramNames'.
            </summary>
            <param name="obj">The object where to find the method to be invoked.</param>
            <param name="methodName">The method name being invoked.</param>
            <param name="parameters">The list of parameters to order.</param>
            <param name="paramNames">The list of parameters names to use for ordering the parameters.</param>
            <returns>The parameters ordered according to the paramNames.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.IsPrimitive(System.Type)">
            <summary>
            Indicates if 'type' is a Primitive Type.
            </summary>
            <param name="type">The 'System.Type' to be checked.</param>
            <returns>True if the 'type' is a primitive Type.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.IsIntrinsic(System.Type)">
            <summary>
            Indicates if 'type' is a Intrisic Type, it means it is not a COM object and it has a default property.
            </summary>
            <param name="type">The 'System.Type' to be checked.</param>
            <returns>True if the 'type' is a intrinsic Type.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.IsCOMObject(System.Type)">
            <summary>
            Indicates if 'type' is a COMObject or a wrapped ActiveX object (AxHost).
            </summary>
            <param name="type">The 'System.Type' to be checked.</param>
            <returns>True if the 'type' is a COMObject Type.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.ObtainProperty(System.Type,System.String)">
            <summary>
            Gets the indicated 'propertyName' in the 'type'.
            </summary>
            <param name="type">The 'System.Type' where to look for.</param>
            <param name="propertyName">The name of the property to look for.</param>
            <returns>A 'MemberInfo' containing the indicated default property.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.ObtainDefaultPropertyFromIntrinsic(System.Type,System.Boolean)">
            <summary>
            Gets the default property in an Intrinsic type.
            </summary>
            <param name="type">The 'System.Type' to look for.</param>
            <param name="theSetProperty">Indicates if look for the Set/Get default property.</param>
            <returns>A 'MemberInfo' containing the default property.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.ObtainDefaultPropertyFromCOM(System.Object)">
            <summary>
            Gets the default property in a COMObject type.
            </summary>
            <param name="obj">The 'obj' where to look for.</param>
            <returns>A 'MemberInfo' containing the default property.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.ObtainDefaultPropertyFromInternalClass(System.Object)">
            <summary>
            Gets the default property in a user internal class.
            </summary>
            <param name="obj">The 'obj' where to look for.</param>
            <returns>A 'MemberInfo' containing the default property or null if it is not found.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.LoadExtendedXmlFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Load extended mappings if needed
            </summary>
            <param name="fileName"></param>
            <param name="tagName"></param>
            <param name="dict"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.LoadXmlFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Loads the a xml resource file containing the list of mappings/default properties.
            </summary>
            <param name="fileName">The file name to load.</param>
            <param name="tagName">The string tag name to search each element into the xml.</param>
            <param name="dict">The 'Dictionary' where to add the element from the xml file.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForced(System.Object,System.String,System.Object)">
            <summary>
            Converts the 'propertyValue' instance to the corresponding Type.
            </summary>
            <param name="obj">The object where to find the propertyName.</param>
            <param name="propertyName">The property name to look into the obj.</param>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to corresponding property type into the object.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToType(System.Object,System.Type)">
            <summary>
            Converts the 'propertyValue' instance to 'targetType'.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <param name="targetType">The Type to be converted.</param>
            <returns>A value converted to 'targetType'.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToString(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to string.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetBooleanValueForcedToNumeric(System.Object)">
            <summary>
            Converts the 'propertyValue', which is a boolean instance to numeric.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A boolean value converted to numeric.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetDateValueForcedToNumeric(System.Object)">
            <summary>
            Converts the 'propertyValue', which is a date instance to numeric.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A date value converted to numeric.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToDouble(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to double.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to double.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToFloat(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to float.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to float.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToLong(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to long.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to long.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToInt(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to int.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to int.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToShort(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to short.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to short.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToByte(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to byte.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to byte.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToBoolean(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to bool.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to bool.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToDecimal(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to bool.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to bool.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToChar(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to char.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to char.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToDate(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to datetime.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to datetime.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToColor(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to System.Drawing.Color.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to System.Drawing.Color.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToPictureBoxSizeMode(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to System.Windows.Forms.PictureBoxSizeMode.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to System.Windows.Forms.PictureBoxSizeMode.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToCursor(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to System.Windows.Forms.Cursor
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to System.Windows.Forms.Cursor.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToArray(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to array.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to array.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToClass(System.Object)">
            <summary>
            Converts the 'propertyValue' instance to a class.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <returns>A value converted to a class.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetValueForcedToEnum(System.Object,System.Type)">
            <summary>
            Converts the 'propertyValue' instance to a enum.
            </summary>
            <param name="propertyValue">The value to be converted.</param>
            <param name="enumType">The enum type to be casted.</param>
            <returns>A value converted to a enum.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.ReflectionHelper.GetPropertyValueType(System.Object)">
            <summary>
            Retrieves the property 'Type' according to the value of the propertyValue.
            </summary>
            <param name="propertyValue">The value to be checked.</param>
            <returns>The respective Type according to the propertyValue.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.DefaultPropertyException">
            <summary>
            Represents errors that occur during Default Property handling.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.DefaultPropertyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a DefaulPropertyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.DefaultPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of a DefaulPropertyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception tha tis the cause of the current exception
            or a null reference (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ITypeComp">
            <summary>
            ITypeComp IDispatch interface.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ITypeLib">
            <summary>
            ITypeLib IDispatch interface.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.tagTYPEKIND">
            <summary>
            tagTYPEKIND IDispatch enumeration.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.tagINVOKEKIND">
            <summary>
            tagINVOKEKIND IDispatch enumeration.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.ITypeInfo">
            <summary>
            ITypeInfo IDispatch interface.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.IDispatch">
            <summary>
            IDispatch interface.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.tagDISPPARAMS">
            <summary>
            tagDISPPARAMS IDispatch class.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.tagEXCEPINFO">
            <summary>
            tagEXCEPINFO IDispatch class.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.StringsHelper">
            <summary>
            The StringsHelper is an utility that provides funcationality related to string operations.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.StrConv(System.String,UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum)">
            <summary>
            Runtime implementation for VBA.Strings.StrConv
            note:
                If Conversion == vbUnicode then the string returned will be encoded using
                System.Text.Encoding.Default, otherwise the encoding System.Text.Encoding.Unicode
                will be used.
            </summary>
            <param name="str">Byte array representing an string.</param>
            <param name="Conversion">The type of the conversion to execute.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.StrConv(System.String,UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum,System.Int32)">
            <summary>
            Runtime implementation for VBA.Strings.StrConv
            note:
                If Conversion == vbUnicode then the string returned will be encoded using
                System.Text.Encoding.Default, otherwise the encoding System.Text.Encoding.Unicode
                will be used.
            </summary>
            <param name="str">Byte array representing an string.</param>
            <param name="Conversion">The type of the conversion to execute.</param>
            <param name="LocaleID">The LocaleID to use in the conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.StrConv2(System.String,UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum)">
            <summary>
            Runtime implementation for VBA.Strings.StrConv
            note:
                If Conversion == vbUnicode then the string returned will be encoded using
                System.Runtime.InteropServices.Marshal.StringToHGlobalUni.
            </summary>
            <param name="str">Byte array representing an string.</param>
            <param name="Conversion">The type of the conversion to execute.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.StrConv2(System.String,UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum,System.Int32)">
            <summary>
            Runtime implementation for VBA.Strings.StrConv VERSION 2
            note:
                If Conversion == vbUnicode then the string returned will be encoded using
                System.Runtime.InteropServices.Marshal.StringToHGlobalUni.
            </summary>
            <param name="str">Byte array representing an string.</param>
            <param name="Conversion">The type of the conversion to execute.</param>
            <param name="LocaleID">The LocaleID to use in the conversion.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.ByteArrayToString(System.Byte[])">
            <summary>
            Converts a byte array to a string.
            </summary>
            <param name="array">Byte array to be converted.</param>
            <returns>The string converted in Unicode encoding.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.MidAssignment(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Replaces a portion of a string with other string. Provides the same functionality than
            MidAssignment for Visual Basic 6.
            </summary>
            <param name="str">The string to be changed.</param>
            <param name="start">The index into the string where to start the changing.</param>
            <param name="length">The length of the portion of string to change.</param>
            <param name="val">The new string to change into the other one.</param>
            <returns>The changed string with the new portion.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.MidAssignment(System.String,System.Int32,System.String)">
            <summary>
            Replaces a portion of a string with other string. Provides the same functionality than
            MidAssignment for Visual Basic 6.
            </summary>
            <param name="str">The string to be changed.</param>
            <param name="start">The index into the string where to start the replace.</param>
            <param name="val">The new string to change into the other one.</param>
            <returns>The changed string with the new portion.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Like(System.String,System.String)">
            <summary>
            Matches a string value with a regular expression pattern.
            </summary>
            <param name="value">The string to be matched.</param>
            <param name="pattern">The regular expression used to match the string.</param>
            <returns>True if the pattern matches into the string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Format(System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
            Returns the String toFormat formatted with the given mask.
            </summary>
            <param name="_toFormat">The String object to format.</param>
            <param name="_mask">The format to apply.</param>
            <param name="dayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.</param>
            <param name="weekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year.</param>
            <returns>Empty String if toFormat is null or empty, othewise the formatted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Format(System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek)">
            <summary>
            Returns the String toFormat formatted with the given mask.
            </summary>
            <param name="toFormat">The String object to format.</param>
            <param name="mask">The format to apply.</param>
            <param name="dayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.</param>
            <returns>Empty String if toFormat is null or empty, othewise the formatted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Format(System.Object,System.Object,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
            Returns the String toFormat formatted with the given mask.
            </summary>
            <param name="toFormat">The String object to format.</param>
            <param name="mask">The format to apply.</param>
            <param name="weekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year.</param>
            <returns>Empty String if toFormat is null or empty, othewise the formatted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Format(System.Object,System.Object)">
            <summary>
            Returns the String toFormat formatted with the given mask.
            </summary>
            <param name="toFormat">The String object to format.</param>
            <param name="mask">The format to apply.</param>
            <returns>Empty String if toFormat is null or empty, othewise the formatted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.Format(System.Object)">
            <summary>
            Returns the String toFormat formatted with an empty mask.
            </summary>
            <param name="toFormat">The String object to format.</param>
            <returns>Empty String if toFormat is null or empty, othewise the formatted string.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.StringsHelper.ToDoubleSafe(System.String)">
            <summary>
            Gets a double value represented by the given String value. If value contains an 
            invalid number then a Double.NaN is returned.  
            This method is used to do safe castings between strings and numeric values.
            It is required for comparisons between strings and primitive types which were allowed by VB6 but are invalid in .NET.
            </summary>
            <param name="value">String containing the double value to convert.</param>
            <returns>A double value.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum">
            <summary>
            VbStrConv Enum used for the runtime implementation of StringsHelper.StrConv.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbFromUnicode">
            <summary>
            From Unicode
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbHiragana">
            <summary>
            Hiragana
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbKatakana">
            <summary>
            Katakana
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbLowerCase">
            <summary>
            Lower case
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbNarrow">
            <summary>
            Narrow
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbProperCase">
            <summary>
            ProperCase
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbUnicode">
            <summary>
            Unicode
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbUpperCase">
            <summary>
            Upper case
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.StringsHelper.VbStrConvEnum.vbWide">
            <summary>
            Wide char
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.NotUpgradedHelper">
            <summary>
            The NotUpgradedHelper is a miscellaneous class to handle notifications for the not-upgraded members or statements.
            Each not-upgraded member generates a stub declaration in the target application.
            When one of these stub declarations is invoked the NotUpgradedHelper notifies the missing functionality to the application user.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.NotUpgradedHelper.NotifyNotUpgradedElement(System.String)">
            <summary>
            Notifies the usage of a not-upgraded element to the user.
            <param name="NotUpgradedElementName">The name of the not-upgraded VB6 member.</param>
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.WeakDictionary`2">
            <summary>
            Implements a Dictionary containing as the Key a WeakReference. It facilitates that references
            inside this Dictionary could be released with any problem.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.AddWeakRef(`0,`1)">
            <summary>
            Adds an entry to the Dictionary.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.RemoveDeletedWeakRefs">
            <summary>
            Review and remove all the WeakReference that were freed by Garbage Collector.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the Dictionary.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Indicates if a key element is contained in the Dictionary.
            </summary>
            <param name="key">The entry key.</param>
            <returns>True if key element is contained in the Dictionary.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes a key element from the Dictionary.
            </summary>
            <param name="key">The entry key.</param>
            <returns>True if key element was removed succesfully.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value and returned it.
            </summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value where result will be returned.</param>
            <returns>True if key element was found and returned successfully.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an entry to the Dictionary.
            </summary>
            <param name="item">The key value pair to be added.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Clear">
            <summary>
            Clears and removes all elements from the Dictionary.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Indicates if the key value pair is in the Dictionary.
            </summary>
            <param name="item">The key value pair to be searched.</param>
            <returns>True if key element is contained in the Dictionary.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a item from the Dictionary.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>True if key element was removed succesfully.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the Dictionary.
            </summary>
            <returns>A enumerator.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Keys">
            <summary>
            Returns the collection of Keys from the Dictionary
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Values">
            <summary>
            Returns the collection of Values from the Dictionary
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Item(`0)">
            <summary>
            Gets a value from the Dictionary.
            </summary>
            <param name="key">The entry key.</param>
            <returns>The value corresponding to the key element.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.WeakDictionary`2.Count">
            <summary>
            Returns the number of elements from the Dictionary.
            </summary>
            <returns>The number of elements contained in the Dictionary.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.WeakDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.WeakDictionary`2.InternalWeakReference">
            <summary>
            Represents an internal WeakReference that overloads the comparative methods in order
            to change the behaviour of equality functions.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.InternalWeakReference.Equals(System.Object)">
            <summary>
            Compares this object with another object.
            </summary>
            <param name="o">The object to be compared.</param>
            <returns>True is they are the same instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.InternalWeakReference.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
            <returns>The hash code for the instance.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.WeakDictionary`2.WeakKeyComparer`1">
            <summary>
            Comparer to be used in the WeakDictionary to overload the behaviour for comparing
            objects for InternalWeakReference.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.WeakKeyComparer`1.Equals(`2,`2)">
            <summary>
            Compares two object instances.
            </summary>
            <param name="x">An object to be compared.</param>
            <param name="y">An object to be compared.</param>
            <returns>True is they are the same instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.WeakDictionary`2.WeakKeyComparer`1.GetHashCode(`2)">
            <summary>
            Gets the hash code for an object.
            </summary>
            <param name="obj">The object to get the hash code.</param>
            <returns>The hash code for the object.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.Utils.XArrayHelper">
            <summary>
            This simulates the XarrayDbObject funcionality based on DataTable class.
            </summary>
            <remarks>
            This class only supports two-dimensional arrays. Multi-dimensional arrays are not supported.
            </remarks>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.XArrayHelper.DimensionLowerBounds">
            <summary>
             Stores the LowerBounds to handle indexes.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.Utils.XArrayHelper.DimensionLengths">
            <summary>
             Stores the lenghts to handle indexes.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.#ctor">
            <summary>
             Constructor for the XArrayHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.CreateInstanceXarray(System.Int32[],System.Int32[])">
            <summary>
            This function is a Factory to create Xarray instances. 
            </summary>
            <param name="Lengths">The length of each dimension.</param>
            <param name="LowerBounds">The lower bounds to use for each dimension.</param>
            <returns>A new XArrayHelper instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.RedimXArray(System.Int32[],System.Int32[])">
            <summary>
            This function redimensions a Xarray instance.
            </summary>
            <param name="Lengths">The length of each dimension.</param>
            <param name="LowerBounds">The lower bounds to use for each dimension.</param>
            <returns>It returns a redimensioned instance of itself.</returns>
            <remarks></remarks>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.GetUpperBound(System.Int32)">
            <summary>
            Gets the upper bound of the specified dimension.
            </summary>
            <param name="Dimension">A zero-based dimension whose upper bound needs to be determined.</param>
            <returns>The upper bound for the specificed dimension.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.GetLowerBound(System.Int32)">
            <summary>
            Gets the Lower bound of the specified dimension.
            </summary>
            <param name="Dimension">A zero-based dimension whose lower bound needs to be determined.</param>
            <returns>The lower bound for the specificed dimension.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.GetLength(System.Int32)">
            <summary>
            Gets the number of elements in the specified dimension.
            </summary>
            <param name="Dimension">A zero-based dimension whose length needs to be determined.</param>
            <returns>The length of elements of the specified dimension.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.GetValue(System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified position.
            </summary>
            <param name="row">Index row where the element is located.</param>
            <param name="column">Index column where the element is located.</param>
            <returns>The value at the specified position.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.SetValue(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets a value to the element at the specified position.
            </summary>
            <param name="value">The new value for the specified element.</param>
            <param name="row">Index row where the element is located.</param>
            <param name="column">Index column where the element is located.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.Clear(UpgradeHelpers.VB6.Utils.XArrayHelper,System.Int32,System.Int32)">
            <summary>
            Clears a range of elements in the XArrayHelper.
            </summary>
            <param name="arr">XArrayHelper whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements.</param>
            <param name="length">The number of elements to be cleared.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.Clear(UpgradeHelpers.VB6.Utils.XArrayHelper@)">
            <summary>
            Creates a cleared a XArrayHelper.
            </summary>
            <param name="arr">XArrayHelper whose elements need to be cleared.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.AppendRows">
            <summary>
            Adds a new row to the current instance of XArrayHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.AppendRows(System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new row to the current instance of XArrayHelper and sets a value to the specified
            row and column.
            </summary>
            <param name="value">The value to be set the specified position.</param>
            <param name="row">The row in the XArrayHelper where to be set the value.</param>
            <param name="column">The column in the XArrayHelper where to be set the value.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.DeleteRows(System.Int32)">
            <summary>
            Deletes a row in the specified position and redimensions the XArrayHelper.
            </summary>
            <param name="row">The row in the XArrayHelper to be deleted.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.LoadRows(System.Object[0:,0:])">
            <summary>
            Creates a XArrayHelper and copies the values from an object array.
            </summary>
            <param name="array">The source array to be copied.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.LoadRows(UpgradeHelpers.VB6.Utils.XArrayHelper)">
            <summary>
            Creates a XArrayHelper and copies the values from a XArrayHelper.
            </summary>
            <param name="table">The source XArrayHelper to be copied.</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.Find(System.Object)">
            <summary>
            Finds a value into a XArrayHelper.
            </summary>
            <param name="value">The value to be found.</param>
            <returns>True if the value is found into the XArrayHelper.</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.Utils.XArrayHelper.Find(System.Object,System.Int32,System.Int32)">
            <summary>
            Finds a value into a XArrayHelper from a specified position.
            </summary>
            <param name="value">The value to be found.</param>
            <param name="lowerBound">The lowerbound where to start searching.</param>
            <param name="upperBound">The upperbound where to finish searching.</param>
            <returns>The index where the values is found or -1 if it is not found.</returns>
        </member>
        <member name="P:UpgradeHelpers.VB6.Utils.XArrayHelper.Item(System.Int32,System.Int32)">
            <summary>
            Returns the element at the specified row and column.
            </summary>
            <param name="row">Row index where the element is located.</param>
            <param name="column">Column index where the element is located.</param>
            <value>Value for the specified element.</value>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:UpgradeHelpers.VB6.VB.Err">
            <summary>
            Class to assist the management of errors/exceptions into the instance Microsoft.VisualBasic.Information.Err
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.Err.LoadError(System.Exception)">
            <summary>
            Loads the values stored in the exception into the class Microsoft.VisualBasic.Information.Err
            </summary>
            <param name="e">The current exception</param>
        </member>
        <member name="T:UpgradeHelpers.VB6.VB.PrinterHelper">
            <summary>
            Class to emulate the VB6 object printer.
            All internal lengths and sizes will be stored in the current unit of measurement defined by either
            ScaleHeight, ScaleWidth, ScaleLeft, ScaleTop, ScaleMode
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.VB.PrinterHelper._cacheHeight">
            <summary>
            The physical Height of the paper for the printer. 
            According to Microsoft's documentation this value is given in Twips units
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.VB.PrinterHelper._drawMode">
            <summary>
            DrawMode: Sets the appearance of output from graphics methods or of a Shape or Line control.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.VB6.VB.PrinterHelper._internalTextHeight">
            <summary>
            Private property to store the average height of a text
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PrintingAreaChanged">
            <summary>
            <para>This method is invoked when a property that change the printing area is modified.</para>
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.IsLocalPrinter(System.String)">
            <summary>
            Utility function to indicate if a printer is local or networked. This function will fail in Windows 2000
            and Windows NT 4.0 as the properties Local, Network are not supported in those systems.
            </summary>
            <param name="deviceName">The name of the printer</param>
            <returns>true if the printer is local</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.GetPort">
            <summary>
            Function to return the port of the current printer
            </summary>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.EndDoc">
            <summary>
            Terminates a print operation sent to the Printer object, releasing the document to the print device or spooler. 
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.GetColumnSize">
            <summary>
            The column size for the function Tab given in the internal unit given by ScaleMode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Circle(System.Drawing.PointF,System.Double)">
            <summary>
            point and radius are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Circle(System.Drawing.PointF,System.Double,System.Boolean)">
            <summary>
            point and radius are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Circle(System.Drawing.PointF,System.Double,System.Drawing.Color)">
            <summary>
            point and radius are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Circle(System.Drawing.PointF,System.Double,System.Drawing.Color,System.Boolean)">
            <summary>
            point and radius are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Line(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PaintPicture(System.Drawing.Image,System.Drawing.PointF)">
            <summary>
            point is given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PaintPicture(System.Drawing.Image,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Paint a picture in the current page
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="point1">The upper left corner</param>
            <param name="point2">The lower right corner</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PaintPicture(System.Drawing.Image,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Paint a picture in the current page
            </summary>
            <param name="picture">The picture to draw</param>
            <param name="point">Position</param>
            <param name="size">Image size</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PaintPicture(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
              Paints a picture in the current page
            </summary>
            <param name="picture">Picture reference</param>
            <param name="x1">X position in the paper</param>
            <param name="y1">Y position in the paper</param>
            <param name="w1">Width of the image to be drawn in the paper</param>
            <param name="h1">Height of the image to be drawn in the paper</param>
            <param name="x2">X position inside the original image</param>
            <param name="y2">Y position inside the original image</param>
            <param name="w2">width of the fragment show from the original image</param>
            <param name="h2">Height of the fragment show from the original image</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PaintPicture(System.Drawing.Image,System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
              Paints a picture in the current page
            </summary>
            <param name="picture">Picture reference</param>
            <param name="point">position of the image in the paper</param>
            <param name="size"> size of the image in the paper</param>
            <param name="clippingInfo">clipping information for the original image</param>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.DrawLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color)">
            <summary>
            point1 and point2 are given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.DrawRectangle(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean)">
            <summary>
            rec is given in the unit specified by Scalemode
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.NewPage">
            <summary>
            Ends the current page and advances to the next page on the Printer object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.SendPageToPrint">
            <summary>
            Send the current page to the spooler
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.StartPrinting">
            <summary>
            Start the printing process
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.GetPaperSize(System.Int32)">
            <summary>
            Returns a paper size suitable for the current printer
            </summary>
            <param name="value">The enum value given the desired paper size</param>
            <returns>The paper size that can be used or an exception if the paper size desired is not available</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.TextWidth(System.String)">
            <summary>
            Returns the height of a text string as it would be printed in the current font of the printer.
            The height is expressed in terms of the ScaleMode property setting
            </summary>
            <param name="str">The string text to use in the calculation</param>
            <returns>The text height expressed in terms of the ScaleMode units</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.TextHeight(System.String)">
            <summary>
            Returns the width of a text string as it would be printed in the current font of the printer.
            The width is expressed in terms of the ScaleMode property setting
            </summary>
            <param name="str">The string text to use in the calculation</param>
            <returns>The text width expressed in terms of the ScaleMode units</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.Print">
            <summary>
            Print an empty line
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PrinterEndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Event raised when the printing process has finished
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UpgradeHelpers.VB6.VB.PrinterHelper.currentGraphicsHdc">
            <summary>
               Graphics HDC which is only available when the print thread is started
            </summary>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.PrinterPrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print the pages
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPrinterUnitsX(System.Double)">
            <summary>
            Converts the parameter to printer units X. 
            It is assumed that the parameter is given in the units specified by ScaleMode
            </summary>
            <param name="num">The number to convert to printer units X</param>
            <returns>The parameter converted to printer units given the value of ScaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPrinterUnitsY(System.Double)">
            <summary>
            Converts the parameter to printer units Y. 
            It is assumed that the parameter is given in the units specified by ScaleMode
            </summary>
            <param name="num">The number to convert to printer units Y</param>
            <returns>The parameter converted to printer units given the value of ScaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPrinterUnitsY(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to printer units Y. 
            It is assumed that the parameter is given in the units specified by scaleMode
            </summary>
            <param name="num">The number to convert to printer units Y</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The parameter converted to printer units given the value of scaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPrinterUnitsX(System.Double)">
            <summary>
            Converts the paratemer to the new numeric system given by ScaleMode.
            It is assumed that the parameter is represented in the internal units of the printer
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPrinterUnitsY(System.Double)">
            <summary>
            Converts the paratemer to the new numeric system given by ScaleMode.
            It is assumed that the parameter is represented in the internal units of the printer
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPixelsX(System.Double)">
            <summary>
            Converts the parameter to the new numeric system given by ScaleMode.
            It is assumed that the parameter represents pixels X
            </summary>
            <param name="num">The pixels to convert</param>
            <returns>The pixels converted according to the ScaleMode property</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPixelsY(System.Double)">
            <summary>
            Converts the parameter to the new numeric system given by ScaleMode.
            It is assumed that the parameter represents pixels Y
            </summary>
            <param name="num">The pixels to convert</param>
            <returns>The pixels converted according to the ScaleMode property</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPixelsX(System.Double)">
            <summary>
            Converts the parameter to pixels X. 
            It is assumed that the parameter is given in the units specified by ScaleMode
            </summary>
            <param name="num">The number to convert to pixels X</param>
            <returns>The parameter converted to pixels given the value of ScaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPixelsY(System.Double)">
            <summary>
            Converts the parameter to pixels Y. 
            It is assumed that the parameter is given in the units specified by ScaleMode
            </summary>
            <param name="num">The number to convert to pixels Y</param>
            <returns>The parameter converted to pixels given the value of ScaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPrinterUnitsX(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to printer units X. 
            It is assumed that the parameter is given in the units specified by scaleMode
            </summary>
            <param name="num">The number to convert to printer units X</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The parameter converted to printer units given the value of scaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPrinterUnitsX(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the paratemer to the new numeric system given by scaleMode.
            It is assumed that the parameter is represented in the internal units of the printer
            </summary>
            <param name="num"></param>
            <param name="scaleMode"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPrinterUnitsY(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the paratemer to the new numeric system given by scaleMode.
            It is assumed that the parameter is represented in the internal units of the printer
            </summary>
            <param name="num"></param>
            <param name="scaleMode"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPixelsX(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to the new numeric system given by scaleMode.
            It is assumed that the parameter represents pixels X
            </summary>
            <param name="num">The pixels to convert</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The pixels converted according to the scaleMode parameter</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertFromPixelsY(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to the new numeric system given by scaleMode.
            It is assumed that the parameter represents pixels Y
            </summary>
            <param name="num">The pixels to convert</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The pixels converted according to the scaleMode parameter</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPixelsX(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to pixels X. 
            It is assumed that the parameter is given in the units specified by scaleMode
            </summary>
            <param name="num">The number to convert to pixels X</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The parameter converted to pixels given the value of scaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.ConvertToPixelsY(System.Double,UpgradeHelpers.VB6.VB.PrinterHelper.ScaleModeConstants)">
            <summary>
            Converts the parameter to pixels Y. 
            It is assumed that the parameter is given in the units specified by scaleMode
            </summary>
            <param name="num">The number to convert to pixels Y</param>
            <param name="scaleMode">The ScaleMode to use</param>
            <returns>The parameter converted to pixels given the value of scaleMode</returns>
        </member>
        <member name="M:UpgradeHelpers.VB6.VB.PrinterHelper.KillDoc">
            <summary>
            Immediately terminates the current print job.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.Printer">
            <summary>
            Gets the default <code>PrinterHelper</code> object
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.MaxColumnAvailables">
            <summary>
            Calcula el maximo de columnas disponibles para imprimir en la pagina
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.IsLocal">
            <summary>
            Utility property to indicate if the current printer is local or networked
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.CurrentX">
            <summary>
            Returns or set the horizontal coordinate for the next printing or drawing method
            Coordinates are expressed in the current unit of measurement defined by ScaleHeight, ScaleWidth, ScaleLeft,
            ScaleTop and ScaleMode
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.CurrentY">
            <summary>
            Returns or set the vertical coordinate for the next printing or drawing method
            Coordinates are expressed in the current unit of measurement defined by ScaleHeight, ScaleWidth, ScaleLeft,
            ScaleTop and ScaleMode
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.Width">
            <summary>
            The physical Width of the paper for the printer. 
            According to Microsoft's documentation this value is given in Twips units
            </summary>
        </member>
        <member name="P:UpgradeHelpers.VB6.VB.PrinterHelper.ListOfAvailableSizes">
            <summary>
            Returns the list of available sizes for the current printer
            </summary>
        </member>
    </members>
</doc>
